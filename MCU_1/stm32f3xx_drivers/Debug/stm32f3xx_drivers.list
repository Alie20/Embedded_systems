
stm32f3xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002810  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000170  080029b0  080029b0  000129b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b20  08002b20  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08002b20  08002b20  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002b20  08002b20  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b20  08002b20  00012b20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b24  08002b24  00012b24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08002b28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020064  2**0
                  CONTENTS
 10 .bss          00000108  20000064  20000064  00020064  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000016c  2000016c  00020064  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001f6f  00000000  00000000  0002008e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000099a  00000000  00000000  00021ffd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000002a8  00000000  00000000  00022998  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000240  00000000  00000000  00022c40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000036f9  00000000  00000000  00022e80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000031dc  00000000  00000000  00026579  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000c21d  00000000  00000000  00029755  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00035972  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000157c  00000000  00000000  000359c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000064 	.word	0x20000064
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08002998 	.word	0x08002998

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000068 	.word	0x20000068
 80001dc:	08002998 	.word	0x08002998

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b086      	sub	sp, #24
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000288:	4a14      	ldr	r2, [pc, #80]	; (80002dc <_sbrk+0x5c>)
 800028a:	4b15      	ldr	r3, [pc, #84]	; (80002e0 <_sbrk+0x60>)
 800028c:	1ad3      	subs	r3, r2, r3
 800028e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000290:	697b      	ldr	r3, [r7, #20]
 8000292:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000294:	4b13      	ldr	r3, [pc, #76]	; (80002e4 <_sbrk+0x64>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	2b00      	cmp	r3, #0
 800029a:	d102      	bne.n	80002a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800029c:	4b11      	ldr	r3, [pc, #68]	; (80002e4 <_sbrk+0x64>)
 800029e:	4a12      	ldr	r2, [pc, #72]	; (80002e8 <_sbrk+0x68>)
 80002a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80002a2:	4b10      	ldr	r3, [pc, #64]	; (80002e4 <_sbrk+0x64>)
 80002a4:	681a      	ldr	r2, [r3, #0]
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	4413      	add	r3, r2
 80002aa:	693a      	ldr	r2, [r7, #16]
 80002ac:	429a      	cmp	r2, r3
 80002ae:	d207      	bcs.n	80002c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80002b0:	f001 fa00 	bl	80016b4 <__errno>
 80002b4:	4603      	mov	r3, r0
 80002b6:	220c      	movs	r2, #12
 80002b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80002ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80002be:	e009      	b.n	80002d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80002c0:	4b08      	ldr	r3, [pc, #32]	; (80002e4 <_sbrk+0x64>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80002c6:	4b07      	ldr	r3, [pc, #28]	; (80002e4 <_sbrk+0x64>)
 80002c8:	681a      	ldr	r2, [r3, #0]
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	4413      	add	r3, r2
 80002ce:	4a05      	ldr	r2, [pc, #20]	; (80002e4 <_sbrk+0x64>)
 80002d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80002d2:	68fb      	ldr	r3, [r7, #12]
}
 80002d4:	4618      	mov	r0, r3
 80002d6:	3718      	adds	r7, #24
 80002d8:	46bd      	mov	sp, r7
 80002da:	bd80      	pop	{r7, pc}
 80002dc:	20010000 	.word	0x20010000
 80002e0:	00000400 	.word	0x00000400
 80002e4:	20000080 	.word	0x20000080
 80002e8:	20000170 	.word	0x20000170

080002ec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002ec:	480d      	ldr	r0, [pc, #52]	; (8000324 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002ee:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002f0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002f4:	480c      	ldr	r0, [pc, #48]	; (8000328 <LoopForever+0x6>)
  ldr r1, =_edata
 80002f6:	490d      	ldr	r1, [pc, #52]	; (800032c <LoopForever+0xa>)
  ldr r2, =_sidata
 80002f8:	4a0d      	ldr	r2, [pc, #52]	; (8000330 <LoopForever+0xe>)
  movs r3, #0
 80002fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002fc:	e002      	b.n	8000304 <LoopCopyDataInit>

080002fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000300:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000302:	3304      	adds	r3, #4

08000304 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000304:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000306:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000308:	d3f9      	bcc.n	80002fe <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800030a:	4a0a      	ldr	r2, [pc, #40]	; (8000334 <LoopForever+0x12>)
  ldr r4, =_ebss
 800030c:	4c0a      	ldr	r4, [pc, #40]	; (8000338 <LoopForever+0x16>)
  movs r3, #0
 800030e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000310:	e001      	b.n	8000316 <LoopFillZerobss>

08000312 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000312:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000314:	3204      	adds	r2, #4

08000316 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000316:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000318:	d3fb      	bcc.n	8000312 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800031a:	f001 f9d1 	bl	80016c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800031e:	f001 f8ff 	bl	8001520 <main>

08000322 <LoopForever>:

LoopForever:
    b LoopForever
 8000322:	e7fe      	b.n	8000322 <LoopForever>
  ldr   r0, =_estack
 8000324:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000328:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800032c:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000330:	08002b28 	.word	0x08002b28
  ldr r2, =_sbss
 8000334:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000338:	2000016c 	.word	0x2000016c

0800033c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800033c:	e7fe      	b.n	800033c <ADC1_2_IRQHandler>
	...

08000340 <ds1307_i2c_pin_config>:



I2C_Handle_t g_ds1307I2CHandle;
static void ds1307_i2c_pin_config()
{
 8000340:	b580      	push	{r7, lr}
 8000342:	b086      	sub	sp, #24
 8000344:	af00      	add	r7, sp, #0
	GPIO_Handle_t i2c_sda,i2c_scl;

	memset(&i2c_sda,0,sizeof(i2c_sda));
 8000346:	f107 030c 	add.w	r3, r7, #12
 800034a:	220c      	movs	r2, #12
 800034c:	2100      	movs	r1, #0
 800034e:	4618      	mov	r0, r3
 8000350:	f001 f9da 	bl	8001708 <memset>
	memset(&i2c_scl,0,sizeof(i2c_scl));
 8000354:	463b      	mov	r3, r7
 8000356:	220c      	movs	r2, #12
 8000358:	2100      	movs	r1, #0
 800035a:	4618      	mov	r0, r3
 800035c:	f001 f9d4 	bl	8001708 <memset>

	i2c_sda.pGPIOx = DS1307_GPIO_PORT;
 8000360:	4b14      	ldr	r3, [pc, #80]	; (80003b4 <ds1307_i2c_pin_config+0x74>)
 8000362:	60fb      	str	r3, [r7, #12]
	i2c_sda.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000364:	2302      	movs	r3, #2
 8000366:	747b      	strb	r3, [r7, #17]
	i2c_sda.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 8000368:	2304      	movs	r3, #4
 800036a:	757b      	strb	r3, [r7, #21]
	i2c_sda.GPIO_PinConfig.GPIO_PinNumber = DS1307_I2C_SDA_PIN;
 800036c:	2309      	movs	r3, #9
 800036e:	743b      	strb	r3, [r7, #16]
	i2c_sda.GPIO_PinConfig.GPIO_PuPdControl = DS1307_I2C_SCL_PUPD;
 8000370:	2301      	movs	r3, #1
 8000372:	753b      	strb	r3, [r7, #20]
	i2c_sda.GPIO_PinConfig.GPIO_PinSPeed = GPIO_SPEED_HIGH;
 8000374:	2302      	movs	r3, #2
 8000376:	74bb      	strb	r3, [r7, #18]
	i2c_sda.GPIO_PinConfig.GPIO_PinOpType = GPIO_OP_TYPE_OD;
 8000378:	2301      	movs	r3, #1
 800037a:	74fb      	strb	r3, [r7, #19]
	GPIO_Init(&i2c_sda);
 800037c:	f107 030c 	add.w	r3, r7, #12
 8000380:	4618      	mov	r0, r3
 8000382:	f000 fe31 	bl	8000fe8 <GPIO_Init>

	i2c_scl.pGPIOx = DS1307_GPIO_PORT;
 8000386:	4b0b      	ldr	r3, [pc, #44]	; (80003b4 <ds1307_i2c_pin_config+0x74>)
 8000388:	603b      	str	r3, [r7, #0]
	i2c_scl.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 800038a:	2302      	movs	r3, #2
 800038c:	717b      	strb	r3, [r7, #5]
	i2c_scl.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 800038e:	2304      	movs	r3, #4
 8000390:	727b      	strb	r3, [r7, #9]
	i2c_scl.GPIO_PinConfig.GPIO_PinNumber = DS1307_I2C_SCL_PIN;
 8000392:	2308      	movs	r3, #8
 8000394:	713b      	strb	r3, [r7, #4]
	i2c_scl.GPIO_PinConfig.GPIO_PuPdControl = DS1307_I2C_SCL_PUPD;
 8000396:	2301      	movs	r3, #1
 8000398:	723b      	strb	r3, [r7, #8]
	i2c_scl.GPIO_PinConfig.GPIO_PinSPeed = GPIO_SPEED_HIGH;
 800039a:	2302      	movs	r3, #2
 800039c:	71bb      	strb	r3, [r7, #6]
	i2c_scl.GPIO_PinConfig.GPIO_PinOpType = GPIO_OP_TYPE_OD;
 800039e:	2301      	movs	r3, #1
 80003a0:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(&i2c_scl);
 80003a2:	463b      	mov	r3, r7
 80003a4:	4618      	mov	r0, r3
 80003a6:	f000 fe1f 	bl	8000fe8 <GPIO_Init>

}
 80003aa:	bf00      	nop
 80003ac:	3718      	adds	r7, #24
 80003ae:	46bd      	mov	sp, r7
 80003b0:	bd80      	pop	{r7, pc}
 80003b2:	bf00      	nop
 80003b4:	48000400 	.word	0x48000400

080003b8 <ds1307_i2c_config>:

static void ds1307_i2c_config()
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	af00      	add	r7, sp, #0
	g_ds1307I2CHandle.pI2Cx = DS1307_I2C;
 80003bc:	4b07      	ldr	r3, [pc, #28]	; (80003dc <ds1307_i2c_config+0x24>)
 80003be:	4a08      	ldr	r2, [pc, #32]	; (80003e0 <ds1307_i2c_config+0x28>)
 80003c0:	601a      	str	r2, [r3, #0]
	g_ds1307I2CHandle.I2C_Config.I2C_DeviceAddress = DS1307_I2C_ADDRESS;
 80003c2:	4b06      	ldr	r3, [pc, #24]	; (80003dc <ds1307_i2c_config+0x24>)
 80003c4:	2268      	movs	r2, #104	; 0x68
 80003c6:	711a      	strb	r2, [r3, #4]
	g_ds1307I2CHandle.I2C_Config.I2C_SCLSpeed = DS1307_I2C_SCL_SPEED;
 80003c8:	4b04      	ldr	r3, [pc, #16]	; (80003dc <ds1307_i2c_config+0x24>)
 80003ca:	f242 7210 	movw	r2, #10000	; 0x2710
 80003ce:	609a      	str	r2, [r3, #8]
	I2C_Init(&g_ds1307I2CHandle);
 80003d0:	4802      	ldr	r0, [pc, #8]	; (80003dc <ds1307_i2c_config+0x24>)
 80003d2:	f000 fb69 	bl	8000aa8 <I2C_Init>
}
 80003d6:	bf00      	nop
 80003d8:	bd80      	pop	{r7, pc}
 80003da:	bf00      	nop
 80003dc:	20000084 	.word	0x20000084
 80003e0:	40005800 	.word	0x40005800

080003e4 <ds1307_init>:
uint8_t ds1307_init(void)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b082      	sub	sp, #8
 80003e8:	af00      	add	r7, sp, #0
	ds1307_i2c_pin_config();
 80003ea:	f7ff ffa9 	bl	8000340 <ds1307_i2c_pin_config>

	ds1307_i2c_config();
 80003ee:	f7ff ffe3 	bl	80003b8 <ds1307_i2c_config>

	I2C_PeripheralControl(DS1307_I2C,Enable);
 80003f2:	2101      	movs	r1, #1
 80003f4:	4809      	ldr	r0, [pc, #36]	; (800041c <ds1307_init+0x38>)
 80003f6:	f000 fae1 	bl	80009bc <I2C_PeripheralControl>

	ds1307_write(0x00,DS1307_ADD_SEC);
 80003fa:	2100      	movs	r1, #0
 80003fc:	2000      	movs	r0, #0
 80003fe:	f000 f8eb 	bl	80005d8 <ds1307_write>

	uint8_t clock_state = ds1307_read(DS1307_ADD_SEC);
 8000402:	2000      	movs	r0, #0
 8000404:	f000 f904 	bl	8000610 <ds1307_read>
 8000408:	4603      	mov	r3, r0
 800040a:	71fb      	strb	r3, [r7, #7]


	return (clock_state >>7 & 0x01);
 800040c:	79fb      	ldrb	r3, [r7, #7]
 800040e:	09db      	lsrs	r3, r3, #7
 8000410:	b2db      	uxtb	r3, r3
}
 8000412:	4618      	mov	r0, r3
 8000414:	3708      	adds	r7, #8
 8000416:	46bd      	mov	sp, r7
 8000418:	bd80      	pop	{r7, pc}
 800041a:	bf00      	nop
 800041c:	40005800 	.word	0x40005800

08000420 <ds1307_set_current_time>:
void ds1307_set_current_time(RTC_time_t *rtc_time)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b084      	sub	sp, #16
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
	uint8_t seconds , hrs;
	seconds = binarytobcd(rtc_time->seconds);
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	781b      	ldrb	r3, [r3, #0]
 800042c:	4618      	mov	r0, r3
 800042e:	f000 f90d 	bl	800064c <binarytobcd>
 8000432:	4603      	mov	r3, r0
 8000434:	73bb      	strb	r3, [r7, #14]
	seconds &~(1<<7);
	ds1307_write(seconds,DS1307_ADD_SEC);
 8000436:	7bbb      	ldrb	r3, [r7, #14]
 8000438:	2100      	movs	r1, #0
 800043a:	4618      	mov	r0, r3
 800043c:	f000 f8cc 	bl	80005d8 <ds1307_write>
	ds1307_write(binarytobcd(rtc_time->minutes),DS1307_ADD_MIN);
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	785b      	ldrb	r3, [r3, #1]
 8000444:	4618      	mov	r0, r3
 8000446:	f000 f901 	bl	800064c <binarytobcd>
 800044a:	4603      	mov	r3, r0
 800044c:	2101      	movs	r1, #1
 800044e:	4618      	mov	r0, r3
 8000450:	f000 f8c2 	bl	80005d8 <ds1307_write>

	hrs = binarytobcd(rtc_time->hours);
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	789b      	ldrb	r3, [r3, #2]
 8000458:	4618      	mov	r0, r3
 800045a:	f000 f8f7 	bl	800064c <binarytobcd>
 800045e:	4603      	mov	r3, r0
 8000460:	73fb      	strb	r3, [r7, #15]
	if (rtc_time->time_format == TIME_FORMAT_24HRS)
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	78db      	ldrb	r3, [r3, #3]
 8000466:	2b02      	cmp	r3, #2
 8000468:	d104      	bne.n	8000474 <ds1307_set_current_time+0x54>
	{
		hrs &= ~(1<<6);
 800046a:	7bfb      	ldrb	r3, [r7, #15]
 800046c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000470:	73fb      	strb	r3, [r7, #15]
 8000472:	e011      	b.n	8000498 <ds1307_set_current_time+0x78>
	}
	else
	{
		hrs |= (1<<6);
 8000474:	7bfb      	ldrb	r3, [r7, #15]
 8000476:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800047a:	73fb      	strb	r3, [r7, #15]
		hrs = (rtc_time->time_format == TIME_FORMAT_12HRS_PM? hrs |(1<<5): hrs &~(1<<5));
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	78db      	ldrb	r3, [r3, #3]
 8000480:	2b01      	cmp	r3, #1
 8000482:	d104      	bne.n	800048e <ds1307_set_current_time+0x6e>
 8000484:	7bfb      	ldrb	r3, [r7, #15]
 8000486:	f043 0320 	orr.w	r3, r3, #32
 800048a:	b2db      	uxtb	r3, r3
 800048c:	e003      	b.n	8000496 <ds1307_set_current_time+0x76>
 800048e:	7bfb      	ldrb	r3, [r7, #15]
 8000490:	f023 0320 	bic.w	r3, r3, #32
 8000494:	b2db      	uxtb	r3, r3
 8000496:	73fb      	strb	r3, [r7, #15]
	}
	ds1307_write(hrs,DS1307_ADD_HRS);
 8000498:	7bfb      	ldrb	r3, [r7, #15]
 800049a:	2102      	movs	r1, #2
 800049c:	4618      	mov	r0, r3
 800049e:	f000 f89b 	bl	80005d8 <ds1307_write>
}
 80004a2:	bf00      	nop
 80004a4:	3710      	adds	r7, #16
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bd80      	pop	{r7, pc}

080004aa <ds1307_get_current_time>:
void ds1307_get_current_time(RTC_time_t *rtc_time)
{
 80004aa:	b580      	push	{r7, lr}
 80004ac:	b084      	sub	sp, #16
 80004ae:	af00      	add	r7, sp, #0
 80004b0:	6078      	str	r0, [r7, #4]
	uint8_t seconds,hrs;
	seconds = ds1307_read(DS1307_ADD_SEC);
 80004b2:	2000      	movs	r0, #0
 80004b4:	f000 f8ac 	bl	8000610 <ds1307_read>
 80004b8:	4603      	mov	r3, r0
 80004ba:	73fb      	strb	r3, [r7, #15]

	seconds &= ~(1<<7);
 80004bc:	7bfb      	ldrb	r3, [r7, #15]
 80004be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80004c2:	73fb      	strb	r3, [r7, #15]

	rtc_time->seconds = bcd_to_binary(seconds);
 80004c4:	7bfb      	ldrb	r3, [r7, #15]
 80004c6:	4618      	mov	r0, r3
 80004c8:	f000 f8ec 	bl	80006a4 <bcd_to_binary>
 80004cc:	4603      	mov	r3, r0
 80004ce:	461a      	mov	r2, r3
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	701a      	strb	r2, [r3, #0]
	rtc_time->minutes = bcd_to_binary(ds1307_read(DS1307_ADD_MIN));
 80004d4:	2001      	movs	r0, #1
 80004d6:	f000 f89b 	bl	8000610 <ds1307_read>
 80004da:	4603      	mov	r3, r0
 80004dc:	4618      	mov	r0, r3
 80004de:	f000 f8e1 	bl	80006a4 <bcd_to_binary>
 80004e2:	4603      	mov	r3, r0
 80004e4:	461a      	mov	r2, r3
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	705a      	strb	r2, [r3, #1]

	hrs = ds1307_read(DS1307_ADD_HRS);
 80004ea:	2002      	movs	r0, #2
 80004ec:	f000 f890 	bl	8000610 <ds1307_read>
 80004f0:	4603      	mov	r3, r0
 80004f2:	73bb      	strb	r3, [r7, #14]

	if (hrs & (1<<6))
 80004f4:	7bbb      	ldrb	r3, [r7, #14]
 80004f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d003      	beq.n	8000506 <ds1307_get_current_time+0x5c>
	{
		if (hrs & (1 <<5))
 80004fe:	7bbb      	ldrb	r3, [r7, #14]
 8000500:	f003 0320 	and.w	r3, r3, #32
 8000504:	2b00      	cmp	r3, #0
	else
	{
		rtc_time->time_format == TIME_FORMAT_24HRS;
	}

}
 8000506:	bf00      	nop
 8000508:	3710      	adds	r7, #16
 800050a:	46bd      	mov	sp, r7
 800050c:	bd80      	pop	{r7, pc}

0800050e <ds1307_set_current_date>:

void ds1307_set_current_date(RTC_date_t *rtc_date)
{
 800050e:	b580      	push	{r7, lr}
 8000510:	b082      	sub	sp, #8
 8000512:	af00      	add	r7, sp, #0
 8000514:	6078      	str	r0, [r7, #4]
	ds1307_write(binarytobcd(rtc_date->day),DS1307_ADD_DAY);
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	789b      	ldrb	r3, [r3, #2]
 800051a:	4618      	mov	r0, r3
 800051c:	f000 f896 	bl	800064c <binarytobcd>
 8000520:	4603      	mov	r3, r0
 8000522:	2103      	movs	r1, #3
 8000524:	4618      	mov	r0, r3
 8000526:	f000 f857 	bl	80005d8 <ds1307_write>
	ds1307_write(binarytobcd(rtc_date->month),DS1307_ADD_MONTH);
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	785b      	ldrb	r3, [r3, #1]
 800052e:	4618      	mov	r0, r3
 8000530:	f000 f88c 	bl	800064c <binarytobcd>
 8000534:	4603      	mov	r3, r0
 8000536:	2105      	movs	r1, #5
 8000538:	4618      	mov	r0, r3
 800053a:	f000 f84d 	bl	80005d8 <ds1307_write>
	ds1307_write(binarytobcd(rtc_date->year),DS1307_ADD_YEAR);
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	78db      	ldrb	r3, [r3, #3]
 8000542:	4618      	mov	r0, r3
 8000544:	f000 f882 	bl	800064c <binarytobcd>
 8000548:	4603      	mov	r3, r0
 800054a:	2106      	movs	r1, #6
 800054c:	4618      	mov	r0, r3
 800054e:	f000 f843 	bl	80005d8 <ds1307_write>
	ds1307_write(binarytobcd(rtc_date->date),DS1307_ADD_YEAR);
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	781b      	ldrb	r3, [r3, #0]
 8000556:	4618      	mov	r0, r3
 8000558:	f000 f878 	bl	800064c <binarytobcd>
 800055c:	4603      	mov	r3, r0
 800055e:	2106      	movs	r1, #6
 8000560:	4618      	mov	r0, r3
 8000562:	f000 f839 	bl	80005d8 <ds1307_write>
}
 8000566:	bf00      	nop
 8000568:	3708      	adds	r7, #8
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}

0800056e <ds1307_get_current_date>:
void ds1307_get_current_date(RTC_date_t *rtc_date)
{
 800056e:	b580      	push	{r7, lr}
 8000570:	b082      	sub	sp, #8
 8000572:	af00      	add	r7, sp, #0
 8000574:	6078      	str	r0, [r7, #4]
	rtc_date->date = bcd_to_binary(ds1307_read(DS1307_ADD_DATE));
 8000576:	2004      	movs	r0, #4
 8000578:	f000 f84a 	bl	8000610 <ds1307_read>
 800057c:	4603      	mov	r3, r0
 800057e:	4618      	mov	r0, r3
 8000580:	f000 f890 	bl	80006a4 <bcd_to_binary>
 8000584:	4603      	mov	r3, r0
 8000586:	461a      	mov	r2, r3
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	701a      	strb	r2, [r3, #0]
	rtc_date->day = bcd_to_binary(ds1307_read(DS1307_ADD_DAY));
 800058c:	2003      	movs	r0, #3
 800058e:	f000 f83f 	bl	8000610 <ds1307_read>
 8000592:	4603      	mov	r3, r0
 8000594:	4618      	mov	r0, r3
 8000596:	f000 f885 	bl	80006a4 <bcd_to_binary>
 800059a:	4603      	mov	r3, r0
 800059c:	461a      	mov	r2, r3
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	709a      	strb	r2, [r3, #2]
	rtc_date->month = bcd_to_binary(ds1307_read(DS1307_ADD_MONTH));
 80005a2:	2005      	movs	r0, #5
 80005a4:	f000 f834 	bl	8000610 <ds1307_read>
 80005a8:	4603      	mov	r3, r0
 80005aa:	4618      	mov	r0, r3
 80005ac:	f000 f87a 	bl	80006a4 <bcd_to_binary>
 80005b0:	4603      	mov	r3, r0
 80005b2:	461a      	mov	r2, r3
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	705a      	strb	r2, [r3, #1]
	rtc_date->year = bcd_to_binary(ds1307_read(DS1307_ADD_YEAR));
 80005b8:	2006      	movs	r0, #6
 80005ba:	f000 f829 	bl	8000610 <ds1307_read>
 80005be:	4603      	mov	r3, r0
 80005c0:	4618      	mov	r0, r3
 80005c2:	f000 f86f 	bl	80006a4 <bcd_to_binary>
 80005c6:	4603      	mov	r3, r0
 80005c8:	461a      	mov	r2, r3
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	70da      	strb	r2, [r3, #3]
}
 80005ce:	bf00      	nop
 80005d0:	3708      	adds	r7, #8
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
	...

080005d8 <ds1307_write>:
static void ds1307_write(uint8_t value, uint8_t reg_address)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b086      	sub	sp, #24
 80005dc:	af02      	add	r7, sp, #8
 80005de:	4603      	mov	r3, r0
 80005e0:	460a      	mov	r2, r1
 80005e2:	71fb      	strb	r3, [r7, #7]
 80005e4:	4613      	mov	r3, r2
 80005e6:	71bb      	strb	r3, [r7, #6]
	uint8_t tx[2];
	tx[0] = reg_address;
 80005e8:	79bb      	ldrb	r3, [r7, #6]
 80005ea:	733b      	strb	r3, [r7, #12]
	tx[1] = value;
 80005ec:	79fb      	ldrb	r3, [r7, #7]
 80005ee:	737b      	strb	r3, [r7, #13]

	I2C_MasterSendData(&g_ds1307I2CHandle, tx, 2, DS1307_I2C_ADDRESS, 0);
 80005f0:	f107 010c 	add.w	r1, r7, #12
 80005f4:	2300      	movs	r3, #0
 80005f6:	9300      	str	r3, [sp, #0]
 80005f8:	2368      	movs	r3, #104	; 0x68
 80005fa:	2202      	movs	r2, #2
 80005fc:	4803      	ldr	r0, [pc, #12]	; (800060c <ds1307_write+0x34>)
 80005fe:	f000 fb3d 	bl	8000c7c <I2C_MasterSendData>
}
 8000602:	bf00      	nop
 8000604:	3710      	adds	r7, #16
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	20000084 	.word	0x20000084

08000610 <ds1307_read>:
static uint8_t ds1307_read(uint8_t reg_address)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b086      	sub	sp, #24
 8000614:	af02      	add	r7, sp, #8
 8000616:	4603      	mov	r3, r0
 8000618:	71fb      	strb	r3, [r7, #7]
	uint8_t data;
    I2C_MasterSendData(&g_ds1307I2CHandle, &reg_address, 1, DS1307_I2C_ADDRESS, 0);
 800061a:	1df9      	adds	r1, r7, #7
 800061c:	2300      	movs	r3, #0
 800061e:	9300      	str	r3, [sp, #0]
 8000620:	2368      	movs	r3, #104	; 0x68
 8000622:	2201      	movs	r2, #1
 8000624:	4808      	ldr	r0, [pc, #32]	; (8000648 <ds1307_read+0x38>)
 8000626:	f000 fb29 	bl	8000c7c <I2C_MasterSendData>
    I2C_MasterRecieveData(&g_ds1307I2CHandle, &data, 1, DS1307_I2C_ADDRESS, 0);
 800062a:	f107 010f 	add.w	r1, r7, #15
 800062e:	2300      	movs	r3, #0
 8000630:	9300      	str	r3, [sp, #0]
 8000632:	2368      	movs	r3, #104	; 0x68
 8000634:	2201      	movs	r2, #1
 8000636:	4804      	ldr	r0, [pc, #16]	; (8000648 <ds1307_read+0x38>)
 8000638:	f000 fb7d 	bl	8000d36 <I2C_MasterRecieveData>

    return data;
 800063c:	7bfb      	ldrb	r3, [r7, #15]
}
 800063e:	4618      	mov	r0, r3
 8000640:	3710      	adds	r7, #16
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	20000084 	.word	0x20000084

0800064c <binarytobcd>:
static uint8_t binarytobcd(uint8_t value)
{
 800064c:	b480      	push	{r7}
 800064e:	b085      	sub	sp, #20
 8000650:	af00      	add	r7, sp, #0
 8000652:	4603      	mov	r3, r0
 8000654:	71fb      	strb	r3, [r7, #7]
	uint8_t n , m ,bcd ;
	if (value >=10)
 8000656:	79fb      	ldrb	r3, [r7, #7]
 8000658:	2b09      	cmp	r3, #9
 800065a:	d919      	bls.n	8000690 <binarytobcd+0x44>
	{
		m = value /10;
 800065c:	79fb      	ldrb	r3, [r7, #7]
 800065e:	4a10      	ldr	r2, [pc, #64]	; (80006a0 <binarytobcd+0x54>)
 8000660:	fba2 2303 	umull	r2, r3, r2, r3
 8000664:	08db      	lsrs	r3, r3, #3
 8000666:	73bb      	strb	r3, [r7, #14]
		n = value %10;
 8000668:	79fa      	ldrb	r2, [r7, #7]
 800066a:	4b0d      	ldr	r3, [pc, #52]	; (80006a0 <binarytobcd+0x54>)
 800066c:	fba3 1302 	umull	r1, r3, r3, r2
 8000670:	08d9      	lsrs	r1, r3, #3
 8000672:	460b      	mov	r3, r1
 8000674:	009b      	lsls	r3, r3, #2
 8000676:	440b      	add	r3, r1
 8000678:	005b      	lsls	r3, r3, #1
 800067a:	1ad3      	subs	r3, r2, r3
 800067c:	737b      	strb	r3, [r7, #13]
		bcd = (uint8_t)((m << 4) | n);
 800067e:	7bbb      	ldrb	r3, [r7, #14]
 8000680:	011b      	lsls	r3, r3, #4
 8000682:	b25a      	sxtb	r2, r3
 8000684:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000688:	4313      	orrs	r3, r2
 800068a:	b25b      	sxtb	r3, r3
 800068c:	73fb      	strb	r3, [r7, #15]
 800068e:	e001      	b.n	8000694 <binarytobcd+0x48>
	}
	else
	{
		bcd = value;
 8000690:	79fb      	ldrb	r3, [r7, #7]
 8000692:	73fb      	strb	r3, [r7, #15]
	}
	return bcd;
 8000694:	7bfb      	ldrb	r3, [r7, #15]
}
 8000696:	4618      	mov	r0, r3
 8000698:	3714      	adds	r7, #20
 800069a:	46bd      	mov	sp, r7
 800069c:	bc80      	pop	{r7}
 800069e:	4770      	bx	lr
 80006a0:	cccccccd 	.word	0xcccccccd

080006a4 <bcd_to_binary>:
static uint8_t bcd_to_binary(uint8_t value)
{
 80006a4:	b480      	push	{r7}
 80006a6:	b085      	sub	sp, #20
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	4603      	mov	r3, r0
 80006ac:	71fb      	strb	r3, [r7, #7]
	uint8_t m , n ,binary;
	m = (uint8_t)((value >>4)*10);
 80006ae:	79fb      	ldrb	r3, [r7, #7]
 80006b0:	091b      	lsrs	r3, r3, #4
 80006b2:	b2db      	uxtb	r3, r3
 80006b4:	461a      	mov	r2, r3
 80006b6:	0092      	lsls	r2, r2, #2
 80006b8:	4413      	add	r3, r2
 80006ba:	005b      	lsls	r3, r3, #1
 80006bc:	73fb      	strb	r3, [r7, #15]
	n = (value &0x0F);
 80006be:	79fb      	ldrb	r3, [r7, #7]
 80006c0:	f003 030f 	and.w	r3, r3, #15
 80006c4:	73bb      	strb	r3, [r7, #14]
	binary = m + n;
 80006c6:	7bfa      	ldrb	r2, [r7, #15]
 80006c8:	7bbb      	ldrb	r3, [r7, #14]
 80006ca:	4413      	add	r3, r2
 80006cc:	737b      	strb	r3, [r7, #13]

	return binary;
 80006ce:	7b7b      	ldrb	r3, [r7, #13]
}
 80006d0:	4618      	mov	r0, r3
 80006d2:	3714      	adds	r7, #20
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bc80      	pop	{r7}
 80006d8:	4770      	bx	lr
	...

080006dc <lcd_send_command>:
static void lcd_enable(void);
static void mdelay(uint32_t cnt);
static void udelay(uint32_t cnt);

void lcd_send_command(uint8_t cmd)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	4603      	mov	r3, r0
 80006e4:	71fb      	strb	r3, [r7, #7]
	/* RS=0 for LCD command */
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RS, GPIO_PIN_RESET);
 80006e6:	2200      	movs	r2, #0
 80006e8:	2100      	movs	r1, #0
 80006ea:	480c      	ldr	r0, [pc, #48]	; (800071c <lcd_send_command+0x40>)
 80006ec:	f000 fdfc 	bl	80012e8 <GPIO_WriteToOutputPin>

	/*R/nW = 0, for write */
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RW, GPIO_PIN_RESET);
 80006f0:	2200      	movs	r2, #0
 80006f2:	2101      	movs	r1, #1
 80006f4:	4809      	ldr	r0, [pc, #36]	; (800071c <lcd_send_command+0x40>)
 80006f6:	f000 fdf7 	bl	80012e8 <GPIO_WriteToOutputPin>

	write_4_bits(cmd >> 4);
 80006fa:	79fb      	ldrb	r3, [r7, #7]
 80006fc:	091b      	lsrs	r3, r3, #4
 80006fe:	b2db      	uxtb	r3, r3
 8000700:	4618      	mov	r0, r3
 8000702:	f000 f8cd 	bl	80008a0 <write_4_bits>
	write_4_bits(cmd & 0x0F);
 8000706:	79fb      	ldrb	r3, [r7, #7]
 8000708:	f003 030f 	and.w	r3, r3, #15
 800070c:	b2db      	uxtb	r3, r3
 800070e:	4618      	mov	r0, r3
 8000710:	f000 f8c6 	bl	80008a0 <write_4_bits>

}
 8000714:	bf00      	nop
 8000716:	3708      	adds	r7, #8
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	48000400 	.word	0x48000400

08000720 <lcd_print_char>:
 *Here we used 4 bit parallel data transmission.
 *First higher nibble of the data will be sent on to the data lines D4,D5,D6,D7
 *Then lower nibble of the data will be set on to the data lines D4,D5,D6,D7
 */
void lcd_print_char(uint8_t data)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
 8000726:	4603      	mov	r3, r0
 8000728:	71fb      	strb	r3, [r7, #7]
	/* RS=1 for LCD user data */
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RS, GPIO_PIN_SET);
 800072a:	2201      	movs	r2, #1
 800072c:	2100      	movs	r1, #0
 800072e:	480c      	ldr	r0, [pc, #48]	; (8000760 <lcd_print_char+0x40>)
 8000730:	f000 fdda 	bl	80012e8 <GPIO_WriteToOutputPin>

	/*R/nW = 0, for write */
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RW, GPIO_PIN_RESET);
 8000734:	2200      	movs	r2, #0
 8000736:	2101      	movs	r1, #1
 8000738:	4809      	ldr	r0, [pc, #36]	; (8000760 <lcd_print_char+0x40>)
 800073a:	f000 fdd5 	bl	80012e8 <GPIO_WriteToOutputPin>

	write_4_bits(data >> 4);  /*Higher nibble*/
 800073e:	79fb      	ldrb	r3, [r7, #7]
 8000740:	091b      	lsrs	r3, r3, #4
 8000742:	b2db      	uxtb	r3, r3
 8000744:	4618      	mov	r0, r3
 8000746:	f000 f8ab 	bl	80008a0 <write_4_bits>
	write_4_bits(data & 0x0F); /*Lower nibble*/
 800074a:	79fb      	ldrb	r3, [r7, #7]
 800074c:	f003 030f 	and.w	r3, r3, #15
 8000750:	b2db      	uxtb	r3, r3
 8000752:	4618      	mov	r0, r3
 8000754:	f000 f8a4 	bl	80008a0 <write_4_bits>

}
 8000758:	bf00      	nop
 800075a:	3708      	adds	r7, #8
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	48000400 	.word	0x48000400

08000764 <lcd_print_string>:


void lcd_print_string(char *message)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]

      do
      {
          lcd_print_char((uint8_t)*message++);
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	1c5a      	adds	r2, r3, #1
 8000770:	607a      	str	r2, [r7, #4]
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	4618      	mov	r0, r3
 8000776:	f7ff ffd3 	bl	8000720 <lcd_print_char>
      }
      while (*message != '\0');
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	2b00      	cmp	r3, #0
 8000780:	d1f4      	bne.n	800076c <lcd_print_string+0x8>

}
 8000782:	bf00      	nop
 8000784:	bf00      	nop
 8000786:	3708      	adds	r7, #8
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}

0800078c <lcd_init>:


void lcd_init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b084      	sub	sp, #16
 8000790:	af00      	add	r7, sp, #0

	//1. Configure the gpio pins which are used for lcd connections

	GPIO_Handle_t lcd_signal;

	lcd_signal.pGPIOx = LCD_GPIO_PORT;
 8000792:	4b42      	ldr	r3, [pc, #264]	; (800089c <lcd_init+0x110>)
 8000794:	607b      	str	r3, [r7, #4]
	lcd_signal.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000796:	2301      	movs	r3, #1
 8000798:	727b      	strb	r3, [r7, #9]
	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_RS;
 800079a:	2300      	movs	r3, #0
 800079c:	723b      	strb	r3, [r7, #8]
	lcd_signal.GPIO_PinConfig.GPIO_PinOpType = GPIO_OP_TYPE_PP;
 800079e:	2300      	movs	r3, #0
 80007a0:	72fb      	strb	r3, [r7, #11]
	lcd_signal.GPIO_PinConfig.GPIO_PuPdControl = GPIO_NO_PUPD;
 80007a2:	2300      	movs	r3, #0
 80007a4:	733b      	strb	r3, [r7, #12]
	lcd_signal.GPIO_PinConfig.GPIO_PinSPeed = GPIO_SPEED_HIGH;
 80007a6:	2302      	movs	r3, #2
 80007a8:	72bb      	strb	r3, [r7, #10]
	GPIO_Init(&lcd_signal);
 80007aa:	1d3b      	adds	r3, r7, #4
 80007ac:	4618      	mov	r0, r3
 80007ae:	f000 fc1b 	bl	8000fe8 <GPIO_Init>

	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_RW;
 80007b2:	2301      	movs	r3, #1
 80007b4:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcd_signal);
 80007b6:	1d3b      	adds	r3, r7, #4
 80007b8:	4618      	mov	r0, r3
 80007ba:	f000 fc15 	bl	8000fe8 <GPIO_Init>

	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_EN;
 80007be:	2302      	movs	r3, #2
 80007c0:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcd_signal);
 80007c2:	1d3b      	adds	r3, r7, #4
 80007c4:	4618      	mov	r0, r3
 80007c6:	f000 fc0f 	bl	8000fe8 <GPIO_Init>

	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_D4;
 80007ca:	2303      	movs	r3, #3
 80007cc:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcd_signal);
 80007ce:	1d3b      	adds	r3, r7, #4
 80007d0:	4618      	mov	r0, r3
 80007d2:	f000 fc09 	bl	8000fe8 <GPIO_Init>

	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_D5;
 80007d6:	2304      	movs	r3, #4
 80007d8:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcd_signal);
 80007da:	1d3b      	adds	r3, r7, #4
 80007dc:	4618      	mov	r0, r3
 80007de:	f000 fc03 	bl	8000fe8 <GPIO_Init>

	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_D6;
 80007e2:	2305      	movs	r3, #5
 80007e4:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcd_signal);
 80007e6:	1d3b      	adds	r3, r7, #4
 80007e8:	4618      	mov	r0, r3
 80007ea:	f000 fbfd 	bl	8000fe8 <GPIO_Init>

	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_D7;
 80007ee:	2306      	movs	r3, #6
 80007f0:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcd_signal);
 80007f2:	1d3b      	adds	r3, r7, #4
 80007f4:	4618      	mov	r0, r3
 80007f6:	f000 fbf7 	bl	8000fe8 <GPIO_Init>

	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RS, GPIO_PIN_RESET);
 80007fa:	2200      	movs	r2, #0
 80007fc:	2100      	movs	r1, #0
 80007fe:	4827      	ldr	r0, [pc, #156]	; (800089c <lcd_init+0x110>)
 8000800:	f000 fd72 	bl	80012e8 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RW, GPIO_PIN_RESET);
 8000804:	2200      	movs	r2, #0
 8000806:	2101      	movs	r1, #1
 8000808:	4824      	ldr	r0, [pc, #144]	; (800089c <lcd_init+0x110>)
 800080a:	f000 fd6d 	bl	80012e8 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_EN, GPIO_PIN_RESET);
 800080e:	2200      	movs	r2, #0
 8000810:	2102      	movs	r1, #2
 8000812:	4822      	ldr	r0, [pc, #136]	; (800089c <lcd_init+0x110>)
 8000814:	f000 fd68 	bl	80012e8 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D4, GPIO_PIN_RESET);
 8000818:	2200      	movs	r2, #0
 800081a:	2103      	movs	r1, #3
 800081c:	481f      	ldr	r0, [pc, #124]	; (800089c <lcd_init+0x110>)
 800081e:	f000 fd63 	bl	80012e8 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D5, GPIO_PIN_RESET);
 8000822:	2200      	movs	r2, #0
 8000824:	2104      	movs	r1, #4
 8000826:	481d      	ldr	r0, [pc, #116]	; (800089c <lcd_init+0x110>)
 8000828:	f000 fd5e 	bl	80012e8 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D6, GPIO_PIN_RESET);
 800082c:	2200      	movs	r2, #0
 800082e:	2105      	movs	r1, #5
 8000830:	481a      	ldr	r0, [pc, #104]	; (800089c <lcd_init+0x110>)
 8000832:	f000 fd59 	bl	80012e8 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D7, GPIO_PIN_RESET);
 8000836:	2200      	movs	r2, #0
 8000838:	2106      	movs	r1, #6
 800083a:	4818      	ldr	r0, [pc, #96]	; (800089c <lcd_init+0x110>)
 800083c:	f000 fd54 	bl	80012e8 <GPIO_WriteToOutputPin>

	//2. Do the LCD initialization

	mdelay(40);
 8000840:	2028      	movs	r0, #40	; 0x28
 8000842:	f000 f88f 	bl	8000964 <mdelay>

	/*RS = 0 , For LCD command */
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RS, GPIO_PIN_RESET);
 8000846:	2200      	movs	r2, #0
 8000848:	2100      	movs	r1, #0
 800084a:	4814      	ldr	r0, [pc, #80]	; (800089c <lcd_init+0x110>)
 800084c:	f000 fd4c 	bl	80012e8 <GPIO_WriteToOutputPin>

	/* RnW = 0, Writing to LCD */
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RW, GPIO_PIN_RESET);
 8000850:	2200      	movs	r2, #0
 8000852:	2101      	movs	r1, #1
 8000854:	4811      	ldr	r0, [pc, #68]	; (800089c <lcd_init+0x110>)
 8000856:	f000 fd47 	bl	80012e8 <GPIO_WriteToOutputPin>

	write_4_bits(0x3);
 800085a:	2003      	movs	r0, #3
 800085c:	f000 f820 	bl	80008a0 <write_4_bits>

	mdelay(5);
 8000860:	2005      	movs	r0, #5
 8000862:	f000 f87f 	bl	8000964 <mdelay>

	write_4_bits(0x3);
 8000866:	2003      	movs	r0, #3
 8000868:	f000 f81a 	bl	80008a0 <write_4_bits>

	udelay(150);
 800086c:	2096      	movs	r0, #150	; 0x96
 800086e:	f000 f891 	bl	8000994 <udelay>

	write_4_bits(0x3);
 8000872:	2003      	movs	r0, #3
 8000874:	f000 f814 	bl	80008a0 <write_4_bits>
	write_4_bits(0x2);
 8000878:	2002      	movs	r0, #2
 800087a:	f000 f811 	bl	80008a0 <write_4_bits>

	//function set command
	lcd_send_command(LCD_CMD_4DL_2N_5X8F);
 800087e:	2028      	movs	r0, #40	; 0x28
 8000880:	f7ff ff2c 	bl	80006dc <lcd_send_command>

	//disply ON and cursor ON
	lcd_send_command(LCD_CMD_DON_CURON);
 8000884:	200e      	movs	r0, #14
 8000886:	f7ff ff29 	bl	80006dc <lcd_send_command>

	lcd_display_clear();
 800088a:	f000 f841 	bl	8000910 <lcd_display_clear>

	//entry mode set
	lcd_send_command(LCD_CMD_INCADD);
 800088e:	2006      	movs	r0, #6
 8000890:	f7ff ff24 	bl	80006dc <lcd_send_command>



}
 8000894:	bf00      	nop
 8000896:	3710      	adds	r7, #16
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	48000400 	.word	0x48000400

080008a0 <write_4_bits>:

/* writes 4 bits of data/command on to D4,D5,D6,D7 lines */
static void write_4_bits(uint8_t value)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	4603      	mov	r3, r0
 80008a8:	71fb      	strb	r3, [r7, #7]
	GPIO_WriteToOutputPin(LCD_GPIO_PORT,LCD_GPIO_D4, ((value >> 0) & 0x1) );
 80008aa:	79fb      	ldrb	r3, [r7, #7]
 80008ac:	f003 0301 	and.w	r3, r3, #1
 80008b0:	b2db      	uxtb	r3, r3
 80008b2:	461a      	mov	r2, r3
 80008b4:	2103      	movs	r1, #3
 80008b6:	4815      	ldr	r0, [pc, #84]	; (800090c <write_4_bits+0x6c>)
 80008b8:	f000 fd16 	bl	80012e8 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT,LCD_GPIO_D5, ((value >> 1) & 0x1) );
 80008bc:	79fb      	ldrb	r3, [r7, #7]
 80008be:	085b      	lsrs	r3, r3, #1
 80008c0:	b2db      	uxtb	r3, r3
 80008c2:	f003 0301 	and.w	r3, r3, #1
 80008c6:	b2db      	uxtb	r3, r3
 80008c8:	461a      	mov	r2, r3
 80008ca:	2104      	movs	r1, #4
 80008cc:	480f      	ldr	r0, [pc, #60]	; (800090c <write_4_bits+0x6c>)
 80008ce:	f000 fd0b 	bl	80012e8 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT,LCD_GPIO_D6, ((value >> 2) & 0x1) );
 80008d2:	79fb      	ldrb	r3, [r7, #7]
 80008d4:	089b      	lsrs	r3, r3, #2
 80008d6:	b2db      	uxtb	r3, r3
 80008d8:	f003 0301 	and.w	r3, r3, #1
 80008dc:	b2db      	uxtb	r3, r3
 80008de:	461a      	mov	r2, r3
 80008e0:	2105      	movs	r1, #5
 80008e2:	480a      	ldr	r0, [pc, #40]	; (800090c <write_4_bits+0x6c>)
 80008e4:	f000 fd00 	bl	80012e8 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT,LCD_GPIO_D7, ((value >> 3) & 0x1) );
 80008e8:	79fb      	ldrb	r3, [r7, #7]
 80008ea:	08db      	lsrs	r3, r3, #3
 80008ec:	b2db      	uxtb	r3, r3
 80008ee:	f003 0301 	and.w	r3, r3, #1
 80008f2:	b2db      	uxtb	r3, r3
 80008f4:	461a      	mov	r2, r3
 80008f6:	2106      	movs	r1, #6
 80008f8:	4804      	ldr	r0, [pc, #16]	; (800090c <write_4_bits+0x6c>)
 80008fa:	f000 fcf5 	bl	80012e8 <GPIO_WriteToOutputPin>

	lcd_enable();
 80008fe:	f000 f81b 	bl	8000938 <lcd_enable>

}
 8000902:	bf00      	nop
 8000904:	3708      	adds	r7, #8
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	48000400 	.word	0x48000400

08000910 <lcd_display_clear>:

void lcd_display_clear(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
	//Display clear
	lcd_send_command(LCD_CMD_DIS_CLEAR);
 8000914:	2001      	movs	r0, #1
 8000916:	f7ff fee1 	bl	80006dc <lcd_send_command>
	/*
	 * check page number 24 of datasheet.
	 * display clear command execution wait time is around 2ms
	 */

	mdelay(2);
 800091a:	2002      	movs	r0, #2
 800091c:	f000 f822 	bl	8000964 <mdelay>
}
 8000920:	bf00      	nop
 8000922:	bd80      	pop	{r7, pc}

08000924 <lcd_display_return_home>:


/*Cursor returns to home position */
void lcd_display_return_home(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0

	lcd_send_command(LCD_CMD_DIS_RETURN_HOME);
 8000928:	2002      	movs	r0, #2
 800092a:	f7ff fed7 	bl	80006dc <lcd_send_command>
	/*
	 * check page number 24 of datasheet.
	 * return home command execution wait time is around 2ms
	 */
	mdelay(2);
 800092e:	2002      	movs	r0, #2
 8000930:	f000 f818 	bl	8000964 <mdelay>
}
 8000934:	bf00      	nop
 8000936:	bd80      	pop	{r7, pc}

08000938 <lcd_enable>:
}



static void lcd_enable(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_EN, GPIO_PIN_SET);
 800093c:	2201      	movs	r2, #1
 800093e:	2102      	movs	r1, #2
 8000940:	4807      	ldr	r0, [pc, #28]	; (8000960 <lcd_enable+0x28>)
 8000942:	f000 fcd1 	bl	80012e8 <GPIO_WriteToOutputPin>
	mdelay(10);
 8000946:	200a      	movs	r0, #10
 8000948:	f000 f80c 	bl	8000964 <mdelay>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_EN, GPIO_PIN_RESET);
 800094c:	2200      	movs	r2, #0
 800094e:	2102      	movs	r1, #2
 8000950:	4803      	ldr	r0, [pc, #12]	; (8000960 <lcd_enable+0x28>)
 8000952:	f000 fcc9 	bl	80012e8 <GPIO_WriteToOutputPin>
	udelay(100);/* execution time > 37 micro seconds */
 8000956:	2064      	movs	r0, #100	; 0x64
 8000958:	f000 f81c 	bl	8000994 <udelay>
}
 800095c:	bf00      	nop
 800095e:	bd80      	pop	{r7, pc}
 8000960:	48000400 	.word	0x48000400

08000964 <mdelay>:


static void mdelay(uint32_t cnt)
{
 8000964:	b480      	push	{r7}
 8000966:	b085      	sub	sp, #20
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
	for(uint32_t i=0 ; i < (cnt * 1000); i++);
 800096c:	2300      	movs	r3, #0
 800096e:	60fb      	str	r3, [r7, #12]
 8000970:	e002      	b.n	8000978 <mdelay+0x14>
 8000972:	68fb      	ldr	r3, [r7, #12]
 8000974:	3301      	adds	r3, #1
 8000976:	60fb      	str	r3, [r7, #12]
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800097e:	fb02 f303 	mul.w	r3, r2, r3
 8000982:	68fa      	ldr	r2, [r7, #12]
 8000984:	429a      	cmp	r2, r3
 8000986:	d3f4      	bcc.n	8000972 <mdelay+0xe>
}
 8000988:	bf00      	nop
 800098a:	bf00      	nop
 800098c:	3714      	adds	r7, #20
 800098e:	46bd      	mov	sp, r7
 8000990:	bc80      	pop	{r7}
 8000992:	4770      	bx	lr

08000994 <udelay>:

static void udelay(uint32_t cnt)
{
 8000994:	b480      	push	{r7}
 8000996:	b085      	sub	sp, #20
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
	for(uint32_t i=0 ; i < (cnt * 1); i++);
 800099c:	2300      	movs	r3, #0
 800099e:	60fb      	str	r3, [r7, #12]
 80009a0:	e002      	b.n	80009a8 <udelay+0x14>
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	3301      	adds	r3, #1
 80009a6:	60fb      	str	r3, [r7, #12]
 80009a8:	68fa      	ldr	r2, [r7, #12]
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	429a      	cmp	r2, r3
 80009ae:	d3f8      	bcc.n	80009a2 <udelay+0xe>
}
 80009b0:	bf00      	nop
 80009b2:	bf00      	nop
 80009b4:	3714      	adds	r7, #20
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bc80      	pop	{r7}
 80009ba:	4770      	bx	lr

080009bc <I2C_PeripheralControl>:
static void I2C_ConfigureAddressPhaseRead(I2C_RegDef_t *pI2Cx,
		uint8_t slaveAddr);
static void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx);
static void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx);

void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi) {
 80009bc:	b480      	push	{r7}
 80009be:	b083      	sub	sp, #12
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
 80009c4:	460b      	mov	r3, r1
 80009c6:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == Enable) {
 80009c8:	78fb      	ldrb	r3, [r7, #3]
 80009ca:	2b01      	cmp	r3, #1
 80009cc:	d106      	bne.n	80009dc <I2C_PeripheralControl+0x20>
		pI2Cx->I2C_CR1 |= (1 << I2C_CR1_PE);
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	f043 0201 	orr.w	r2, r3, #1
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	601a      	str	r2, [r3, #0]
	} else if (EnorDi == Disable) {
		pI2Cx->I2C_CR1 &= ~(1 << I2C_CR1_PE);
	}
}
 80009da:	e008      	b.n	80009ee <I2C_PeripheralControl+0x32>
	} else if (EnorDi == Disable) {
 80009dc:	78fb      	ldrb	r3, [r7, #3]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d105      	bne.n	80009ee <I2C_PeripheralControl+0x32>
		pI2Cx->I2C_CR1 &= ~(1 << I2C_CR1_PE);
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	f023 0201 	bic.w	r2, r3, #1
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	601a      	str	r2, [r3, #0]
}
 80009ee:	bf00      	nop
 80009f0:	370c      	adds	r7, #12
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bc80      	pop	{r7}
 80009f6:	4770      	bx	lr

080009f8 <I2C_PeriClockControl>:

void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi) {
 80009f8:	b480      	push	{r7}
 80009fa:	b083      	sub	sp, #12
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
 8000a00:	460b      	mov	r3, r1
 8000a02:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == Enable) {
 8000a04:	78fb      	ldrb	r3, [r7, #3]
 8000a06:	2b01      	cmp	r3, #1
 8000a08:	d120      	bne.n	8000a4c <I2C_PeriClockControl+0x54>
		if (pI2Cx == I2C1) {
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	4a22      	ldr	r2, [pc, #136]	; (8000a98 <I2C_PeriClockControl+0xa0>)
 8000a0e:	4293      	cmp	r3, r2
 8000a10:	d106      	bne.n	8000a20 <I2C_PeriClockControl+0x28>
			I2C1_PCLK_EN();
 8000a12:	4b22      	ldr	r3, [pc, #136]	; (8000a9c <I2C_PeriClockControl+0xa4>)
 8000a14:	69db      	ldr	r3, [r3, #28]
 8000a16:	4a21      	ldr	r2, [pc, #132]	; (8000a9c <I2C_PeriClockControl+0xa4>)
 8000a18:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a1c:	61d3      	str	r3, [r2, #28]
		} else if (pI2Cx == I2C3) {
			I2C3_PCLK_DI();
		}

	}
}
 8000a1e:	e035      	b.n	8000a8c <I2C_PeriClockControl+0x94>
		} else if (pI2Cx == I2C2) {
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	4a1f      	ldr	r2, [pc, #124]	; (8000aa0 <I2C_PeriClockControl+0xa8>)
 8000a24:	4293      	cmp	r3, r2
 8000a26:	d106      	bne.n	8000a36 <I2C_PeriClockControl+0x3e>
			I2C2_PCLK_EN();
 8000a28:	4b1c      	ldr	r3, [pc, #112]	; (8000a9c <I2C_PeriClockControl+0xa4>)
 8000a2a:	69db      	ldr	r3, [r3, #28]
 8000a2c:	4a1b      	ldr	r2, [pc, #108]	; (8000a9c <I2C_PeriClockControl+0xa4>)
 8000a2e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a32:	61d3      	str	r3, [r2, #28]
}
 8000a34:	e02a      	b.n	8000a8c <I2C_PeriClockControl+0x94>
		} else if (pI2Cx == I2C3) {
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	4a1a      	ldr	r2, [pc, #104]	; (8000aa4 <I2C_PeriClockControl+0xac>)
 8000a3a:	4293      	cmp	r3, r2
 8000a3c:	d126      	bne.n	8000a8c <I2C_PeriClockControl+0x94>
			I2C3_PCLK_EN();
 8000a3e:	4b17      	ldr	r3, [pc, #92]	; (8000a9c <I2C_PeriClockControl+0xa4>)
 8000a40:	69db      	ldr	r3, [r3, #28]
 8000a42:	4a16      	ldr	r2, [pc, #88]	; (8000a9c <I2C_PeriClockControl+0xa4>)
 8000a44:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000a48:	61d3      	str	r3, [r2, #28]
}
 8000a4a:	e01f      	b.n	8000a8c <I2C_PeriClockControl+0x94>
		if (pI2Cx == I2C1) {
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	4a12      	ldr	r2, [pc, #72]	; (8000a98 <I2C_PeriClockControl+0xa0>)
 8000a50:	4293      	cmp	r3, r2
 8000a52:	d106      	bne.n	8000a62 <I2C_PeriClockControl+0x6a>
			I2C1_PCLK_DI();
 8000a54:	4b11      	ldr	r3, [pc, #68]	; (8000a9c <I2C_PeriClockControl+0xa4>)
 8000a56:	69db      	ldr	r3, [r3, #28]
 8000a58:	4a10      	ldr	r2, [pc, #64]	; (8000a9c <I2C_PeriClockControl+0xa4>)
 8000a5a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000a5e:	61d3      	str	r3, [r2, #28]
}
 8000a60:	e014      	b.n	8000a8c <I2C_PeriClockControl+0x94>
		} else if (pI2Cx == I2C2) {
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	4a0e      	ldr	r2, [pc, #56]	; (8000aa0 <I2C_PeriClockControl+0xa8>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d106      	bne.n	8000a78 <I2C_PeriClockControl+0x80>
			I2C2_PCLK_DI();
 8000a6a:	4b0c      	ldr	r3, [pc, #48]	; (8000a9c <I2C_PeriClockControl+0xa4>)
 8000a6c:	69db      	ldr	r3, [r3, #28]
 8000a6e:	4a0b      	ldr	r2, [pc, #44]	; (8000a9c <I2C_PeriClockControl+0xa4>)
 8000a70:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000a74:	61d3      	str	r3, [r2, #28]
}
 8000a76:	e009      	b.n	8000a8c <I2C_PeriClockControl+0x94>
		} else if (pI2Cx == I2C3) {
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	4a0a      	ldr	r2, [pc, #40]	; (8000aa4 <I2C_PeriClockControl+0xac>)
 8000a7c:	4293      	cmp	r3, r2
 8000a7e:	d105      	bne.n	8000a8c <I2C_PeriClockControl+0x94>
			I2C3_PCLK_DI();
 8000a80:	4b06      	ldr	r3, [pc, #24]	; (8000a9c <I2C_PeriClockControl+0xa4>)
 8000a82:	69db      	ldr	r3, [r3, #28]
 8000a84:	4a05      	ldr	r2, [pc, #20]	; (8000a9c <I2C_PeriClockControl+0xa4>)
 8000a86:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8000a8a:	61d3      	str	r3, [r2, #28]
}
 8000a8c:	bf00      	nop
 8000a8e:	370c      	adds	r7, #12
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bc80      	pop	{r7}
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop
 8000a98:	40005400 	.word	0x40005400
 8000a9c:	40021000 	.word	0x40021000
 8000aa0:	40005800 	.word	0x40005800
 8000aa4:	40007800 	.word	0x40007800

08000aa8 <I2C_Init>:

void I2C_Init(I2C_Handle_t *pI2CHandle) {
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
	// Enable I2C_PeriClockControl
	I2C_PeriClockControl(pI2CHandle->pI2Cx, Enable);
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	2101      	movs	r1, #1
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f7ff ff9e 	bl	80009f8 <I2C_PeriClockControl>

	// clear PE
	I2C_PeripheralControl(pI2CHandle->pI2Cx, Disable);
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f7ff ff7a 	bl	80009bc <I2C_PeripheralControl>

	// uint32_t i2c_timingr_tmp = 0;

	// HSI as clock source for I2C
	switch (pI2CHandle->I2C_Config.I2C_SCLSpeed) {
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	689b      	ldr	r3, [r3, #8]
 8000acc:	4a68      	ldr	r2, [pc, #416]	; (8000c70 <I2C_Init+0x1c8>)
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	f000 808c 	beq.w	8000bec <I2C_Init+0x144>
 8000ad4:	4a66      	ldr	r2, [pc, #408]	; (8000c70 <I2C_Init+0x1c8>)
 8000ad6:	4293      	cmp	r3, r2
 8000ad8:	f200 80ad 	bhi.w	8000c36 <I2C_Init+0x18e>
 8000adc:	4a65      	ldr	r2, [pc, #404]	; (8000c74 <I2C_Init+0x1cc>)
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	d05d      	beq.n	8000b9e <I2C_Init+0xf6>
 8000ae2:	4a64      	ldr	r2, [pc, #400]	; (8000c74 <I2C_Init+0x1cc>)
 8000ae4:	4293      	cmp	r3, r2
 8000ae6:	f200 80a6 	bhi.w	8000c36 <I2C_Init+0x18e>
 8000aea:	f242 7210 	movw	r2, #10000	; 0x2710
 8000aee:	4293      	cmp	r3, r2
 8000af0:	d003      	beq.n	8000afa <I2C_Init+0x52>
 8000af2:	4a61      	ldr	r2, [pc, #388]	; (8000c78 <I2C_Init+0x1d0>)
 8000af4:	4293      	cmp	r3, r2
 8000af6:	d029      	beq.n	8000b4c <I2C_Init+0xa4>
 8000af8:	e09d      	b.n	8000c36 <I2C_Init+0x18e>

	case I2C_SCL_SPEED_SM10:
		pI2CHandle->pI2Cx->I2C_TIMINGR |= (1 << I2C_TIMINGR_PRESC);
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	691a      	ldr	r2, [r3, #16]
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000b08:	611a      	str	r2, [r3, #16]
		pI2CHandle->pI2Cx->I2C_TIMINGR |= (0xC7 << I2C_TIMINGR_SCLL);
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	691a      	ldr	r2, [r3, #16]
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	f042 02c7 	orr.w	r2, r2, #199	; 0xc7
 8000b18:	611a      	str	r2, [r3, #16]
		pI2CHandle->pI2Cx->I2C_TIMINGR |= (0xC3 << I2C_TIMINGR_SCLH);
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	691a      	ldr	r2, [r3, #16]
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	f442 4243 	orr.w	r2, r2, #49920	; 0xc300
 8000b28:	611a      	str	r2, [r3, #16]
		pI2CHandle->pI2Cx->I2C_TIMINGR |= (0x2 << I2C_TIMINGR_SDADEL);
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	691a      	ldr	r2, [r3, #16]
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000b38:	611a      	str	r2, [r3, #16]
		pI2CHandle->pI2Cx->I2C_TIMINGR |= (0x4 << I2C_TIMINGR_SCLDEL);
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	691a      	ldr	r2, [r3, #16]
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8000b48:	611a      	str	r2, [r3, #16]
		break;
 8000b4a:	e074      	b.n	8000c36 <I2C_Init+0x18e>

	case I2C_SCL_SPEED_SM100:
		pI2CHandle->pI2Cx->I2C_TIMINGR |= (1 << I2C_TIMINGR_PRESC);
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	691a      	ldr	r2, [r3, #16]
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000b5a:	611a      	str	r2, [r3, #16]
		pI2CHandle->pI2Cx->I2C_TIMINGR |= (0x13 << I2C_TIMINGR_SCLL);
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	691a      	ldr	r2, [r3, #16]
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	f042 0213 	orr.w	r2, r2, #19
 8000b6a:	611a      	str	r2, [r3, #16]
		pI2CHandle->pI2Cx->I2C_TIMINGR |= (0xf << I2C_TIMINGR_SCLH);
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	691a      	ldr	r2, [r3, #16]
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	f442 6270 	orr.w	r2, r2, #3840	; 0xf00
 8000b7a:	611a      	str	r2, [r3, #16]
		pI2CHandle->pI2Cx->I2C_TIMINGR |= (0x2 << I2C_TIMINGR_SDADEL);
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	691a      	ldr	r2, [r3, #16]
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000b8a:	611a      	str	r2, [r3, #16]
		pI2CHandle->pI2Cx->I2C_TIMINGR |= (0x4 << I2C_TIMINGR_SCLDEL);
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	691a      	ldr	r2, [r3, #16]
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8000b9a:	611a      	str	r2, [r3, #16]
		break;
 8000b9c:	e04b      	b.n	8000c36 <I2C_Init+0x18e>

	case I2C_SCL_SPEED_FM:
		pI2CHandle->pI2Cx->I2C_TIMINGR |= (0 << I2C_TIMINGR_PRESC);
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681a      	ldr	r2, [r3, #0]
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	6912      	ldr	r2, [r2, #16]
 8000ba8:	611a      	str	r2, [r3, #16]
		pI2CHandle->pI2Cx->I2C_TIMINGR |= (0x9 << I2C_TIMINGR_SCLL);
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	691a      	ldr	r2, [r3, #16]
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	f042 0209 	orr.w	r2, r2, #9
 8000bb8:	611a      	str	r2, [r3, #16]
		pI2CHandle->pI2Cx->I2C_TIMINGR |= (0x3 << I2C_TIMINGR_SCLH);
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	691a      	ldr	r2, [r3, #16]
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8000bc8:	611a      	str	r2, [r3, #16]
		pI2CHandle->pI2Cx->I2C_TIMINGR |= (0x1 << I2C_TIMINGR_SDADEL);
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	691a      	ldr	r2, [r3, #16]
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000bd8:	611a      	str	r2, [r3, #16]
		pI2CHandle->pI2Cx->I2C_TIMINGR |= (0x3 << I2C_TIMINGR_SCLDEL);
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	691a      	ldr	r2, [r3, #16]
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	f442 1240 	orr.w	r2, r2, #3145728	; 0x300000
 8000be8:	611a      	str	r2, [r3, #16]
		break;
 8000bea:	e024      	b.n	8000c36 <I2C_Init+0x18e>

	case I2C_SCL_SPEED_FMP:
		pI2CHandle->pI2Cx->I2C_TIMINGR |= (0 << I2C_TIMINGR_PRESC);
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681a      	ldr	r2, [r3, #0]
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	6912      	ldr	r2, [r2, #16]
 8000bf6:	611a      	str	r2, [r3, #16]
		pI2CHandle->pI2Cx->I2C_TIMINGR |= (0x6 << I2C_TIMINGR_SCLL);
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	691a      	ldr	r2, [r3, #16]
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	f042 0206 	orr.w	r2, r2, #6
 8000c06:	611a      	str	r2, [r3, #16]
		pI2CHandle->pI2Cx->I2C_TIMINGR |= (0x3 << I2C_TIMINGR_SCLH);
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	691a      	ldr	r2, [r3, #16]
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8000c16:	611a      	str	r2, [r3, #16]
		pI2CHandle->pI2Cx->I2C_TIMINGR |= (0x0 << I2C_TIMINGR_SDADEL);
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681a      	ldr	r2, [r3, #0]
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	6912      	ldr	r2, [r2, #16]
 8000c22:	611a      	str	r2, [r3, #16]
		pI2CHandle->pI2Cx->I2C_TIMINGR |= (0x1 << I2C_TIMINGR_SCLDEL);
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	691a      	ldr	r2, [r3, #16]
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000c32:	611a      	str	r2, [r3, #16]
		break;
 8000c34:	bf00      	nop
	}
	// slave address
	pI2CHandle->pI2Cx->I2C_OAR1 |= (pI2CHandle->I2C_Config.I2C_DeviceAddress
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	689a      	ldr	r2, [r3, #8]
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	791b      	ldrb	r3, [r3, #4]
			<< 1);
 8000c40:	005b      	lsls	r3, r3, #1
 8000c42:	4619      	mov	r1, r3
	pI2CHandle->pI2Cx->I2C_OAR1 |= (pI2CHandle->I2C_Config.I2C_DeviceAddress
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	430a      	orrs	r2, r1
 8000c4a:	609a      	str	r2, [r3, #8]
	// enable slave address
	pI2CHandle->pI2Cx->I2C_OAR1 |= (1 << 15);
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	689a      	ldr	r2, [r3, #8]
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000c5a:	609a      	str	r2, [r3, #8]

	I2C_PeripheralControl(pI2CHandle->pI2Cx, Enable);
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	2101      	movs	r1, #1
 8000c62:	4618      	mov	r0, r3
 8000c64:	f7ff feaa 	bl	80009bc <I2C_PeripheralControl>

}
 8000c68:	bf00      	nop
 8000c6a:	3708      	adds	r7, #8
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	0007a120 	.word	0x0007a120
 8000c74:	00061a80 	.word	0x00061a80
 8000c78:	000186a0 	.word	0x000186a0

08000c7c <I2C_MasterSendData>:
		I2C3_REG_RESET();
	}
}

void I2C_MasterSendData(I2C_Handle_t *pI2CHandle, uint8_t *pTxBuffer,
	uint32_t len, uint8_t slaveAddr, uint8_t rs) {
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b084      	sub	sp, #16
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	60f8      	str	r0, [r7, #12]
 8000c84:	60b9      	str	r1, [r7, #8]
 8000c86:	607a      	str	r2, [r7, #4]
 8000c88:	70fb      	strb	r3, [r7, #3]

	//Write the Address of the slave

	// Set autoend to 0, and length of data to be transmitted
	//software end mode: TC flag is set when NBYTES data are
	pI2CHandle->pI2Cx->I2C_CR2 &= ~(1 << I2C_CR2_AUTOEND);
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	685a      	ldr	r2, [r3, #4]
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8000c98:	605a      	str	r2, [r3, #4]

	// set how many bytes to transfer
	pI2CHandle->pI2Cx->I2C_CR2 |= (len << I2C_CR2_NBYTES);
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	6859      	ldr	r1, [r3, #4]
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	041a      	lsls	r2, r3, #16
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	430a      	orrs	r2, r1
 8000caa:	605a      	str	r2, [r3, #4]

	I2C_ConfigureAddressPhaseWrite(pI2CHandle->pI2Cx, slaveAddr);
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	78fa      	ldrb	r2, [r7, #3]
 8000cb2:	4611      	mov	r1, r2
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f000 f892 	bl	8000dde <I2C_ConfigureAddressPhaseWrite>


	//Start the transmission process by setting 1 to start bit
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f000 f8c1 	bl	8000e46 <I2C_GenerateStartCondition>

	while (len > 0) {
 8000cc4:	e014      	b.n	8000cf0 <I2C_MasterSendData+0x74>
		while (!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_TXE));
 8000cc6:	bf00      	nop
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	2101      	movs	r1, #1
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f000 f8d7 	bl	8000e82 <I2C_GetFlagStatus>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d0f6      	beq.n	8000cc8 <I2C_MasterSendData+0x4c>

		pI2CHandle->pI2Cx->I2C_TXDR = *pTxBuffer;
 8000cda:	68bb      	ldr	r3, [r7, #8]
 8000cdc:	781a      	ldrb	r2, [r3, #0]
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	629a      	str	r2, [r3, #40]	; 0x28
		pTxBuffer++;
 8000ce4:	68bb      	ldr	r3, [r7, #8]
 8000ce6:	3301      	adds	r3, #1
 8000ce8:	60bb      	str	r3, [r7, #8]
		len--;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	3b01      	subs	r3, #1
 8000cee:	607b      	str	r3, [r7, #4]
	while (len > 0) {
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d1e7      	bne.n	8000cc6 <I2C_MasterSendData+0x4a>
	}
	// check that transfer shift register is empty
	while (!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_TXE));
 8000cf6:	bf00      	nop
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	2101      	movs	r1, #1
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f000 f8bf 	bl	8000e82 <I2C_GetFlagStatus>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d0f6      	beq.n	8000cf8 <I2C_MasterSendData+0x7c>

	// Check the transfer is completed
	while (!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_TC));
 8000d0a:	bf00      	nop
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	2140      	movs	r1, #64	; 0x40
 8000d12:	4618      	mov	r0, r3
 8000d14:	f000 f8b5 	bl	8000e82 <I2C_GetFlagStatus>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d0f6      	beq.n	8000d0c <I2C_MasterSendData+0x90>

	if (rs == I2C_RS_DISABLE) {
 8000d1e:	7e3b      	ldrb	r3, [r7, #24]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d104      	bne.n	8000d2e <I2C_MasterSendData+0xb2>
		I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f000 f89b 	bl	8000e64 <I2C_GenerateStopCondition>
	}
}
 8000d2e:	bf00      	nop
 8000d30:	3710      	adds	r7, #16
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}

08000d36 <I2C_MasterRecieveData>:

void I2C_MasterRecieveData(I2C_Handle_t *pI2CHandle, uint8_t *pRxBuffer,
		uint32_t len, uint8_t slaveAddr, uint8_t rs) {
 8000d36:	b580      	push	{r7, lr}
 8000d38:	b084      	sub	sp, #16
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	60f8      	str	r0, [r7, #12]
 8000d3e:	60b9      	str	r1, [r7, #8]
 8000d40:	607a      	str	r2, [r7, #4]
 8000d42:	70fb      	strb	r3, [r7, #3]
	// Set autoend to 0, and length of data to be transmitted
	//software end mode: TC flag is set when NBYTES data are
	pI2CHandle->pI2Cx->I2C_CR2 &= ~(1 << I2C_CR2_AUTOEND);
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	685a      	ldr	r2, [r3, #4]
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8000d52:	605a      	str	r2, [r3, #4]

	// set how many bytes to transfer
	pI2CHandle->pI2Cx->I2C_CR2 |= (len << I2C_CR2_NBYTES);
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	6859      	ldr	r1, [r3, #4]
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	041a      	lsls	r2, r3, #16
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	430a      	orrs	r2, r1
 8000d64:	605a      	str	r2, [r3, #4]

	//Write the Address of the slave
	I2C_ConfigureAddressPhaseRead(pI2CHandle->pI2Cx, slaveAddr);
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	78fa      	ldrb	r2, [r7, #3]
 8000d6c:	4611      	mov	r1, r2
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f000 f84f 	bl	8000e12 <I2C_ConfigureAddressPhaseRead>

	//Start the Receiving process by setting 1 to start bit
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f000 f864 	bl	8000e46 <I2C_GenerateStartCondition>

	while (len > 0) {
 8000d7e:	e015      	b.n	8000dac <I2C_MasterRecieveData+0x76>
		while (!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_RXNE))
 8000d80:	bf00      	nop
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	2104      	movs	r1, #4
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f000 f87a 	bl	8000e82 <I2C_GetFlagStatus>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d0f6      	beq.n	8000d82 <I2C_MasterRecieveData+0x4c>
			;

		*pRxBuffer = pI2CHandle->pI2Cx->I2C_RXDR;
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d9a:	b2da      	uxtb	r2, r3
 8000d9c:	68bb      	ldr	r3, [r7, #8]
 8000d9e:	701a      	strb	r2, [r3, #0]
		pRxBuffer++;
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	3301      	adds	r3, #1
 8000da4:	60bb      	str	r3, [r7, #8]
		len--;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	3b01      	subs	r3, #1
 8000daa:	607b      	str	r3, [r7, #4]
	while (len > 0) {
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d1e6      	bne.n	8000d80 <I2C_MasterRecieveData+0x4a>
	}
	// check that receive shift register is empty
	//while (!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_RXNE));

	// Check the transfer is completed
	while (!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_TC))
 8000db2:	bf00      	nop
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	2140      	movs	r1, #64	; 0x40
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f000 f861 	bl	8000e82 <I2C_GetFlagStatus>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d0f6      	beq.n	8000db4 <I2C_MasterRecieveData+0x7e>
		;

	if (rs == I2C_RS_DISABLE) {
 8000dc6:	7e3b      	ldrb	r3, [r7, #24]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d104      	bne.n	8000dd6 <I2C_MasterRecieveData+0xa0>
		I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f000 f847 	bl	8000e64 <I2C_GenerateStopCondition>
	}

}
 8000dd6:	bf00      	nop
 8000dd8:	3710      	adds	r7, #16
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}

08000dde <I2C_ConfigureAddressPhaseWrite>:

		}
	}

	static void I2C_ConfigureAddressPhaseWrite(I2C_RegDef_t *pI2Cx,
			uint8_t slaveAddr) {
 8000dde:	b480      	push	{r7}
 8000de0:	b083      	sub	sp, #12
 8000de2:	af00      	add	r7, sp, #0
 8000de4:	6078      	str	r0, [r7, #4]
 8000de6:	460b      	mov	r3, r1
 8000de8:	70fb      	strb	r3, [r7, #3]
		slaveAddr = (slaveAddr << 1);
 8000dea:	78fb      	ldrb	r3, [r7, #3]
 8000dec:	005b      	lsls	r3, r3, #1
 8000dee:	70fb      	strb	r3, [r7, #3]
		pI2Cx->I2C_CR2 |= (slaveAddr << I2C_CR2_SADD);
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	685a      	ldr	r2, [r3, #4]
 8000df4:	78fb      	ldrb	r3, [r7, #3]
 8000df6:	431a      	orrs	r2, r3
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	605a      	str	r2, [r3, #4]
		pI2Cx->I2C_CR2 &= ~(1 << I2C_CR2_RD_WRN);
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	605a      	str	r2, [r3, #4]

	}
 8000e08:	bf00      	nop
 8000e0a:	370c      	adds	r7, #12
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bc80      	pop	{r7}
 8000e10:	4770      	bx	lr

08000e12 <I2C_ConfigureAddressPhaseRead>:
	static void I2C_ConfigureAddressPhaseRead(I2C_RegDef_t *pI2Cx,
			uint8_t slaveAddr)
	{
 8000e12:	b480      	push	{r7}
 8000e14:	b083      	sub	sp, #12
 8000e16:	af00      	add	r7, sp, #0
 8000e18:	6078      	str	r0, [r7, #4]
 8000e1a:	460b      	mov	r3, r1
 8000e1c:	70fb      	strb	r3, [r7, #3]
		slaveAddr = (slaveAddr << 1);
 8000e1e:	78fb      	ldrb	r3, [r7, #3]
 8000e20:	005b      	lsls	r3, r3, #1
 8000e22:	70fb      	strb	r3, [r7, #3]
		pI2Cx->I2C_CR2 |= (slaveAddr << I2C_CR2_SADD);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	685a      	ldr	r2, [r3, #4]
 8000e28:	78fb      	ldrb	r3, [r7, #3]
 8000e2a:	431a      	orrs	r2, r3
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	605a      	str	r2, [r3, #4]
		pI2Cx->I2C_CR2 |= (1 << I2C_CR2_RD_WRN);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	605a      	str	r2, [r3, #4]

	}
 8000e3c:	bf00      	nop
 8000e3e:	370c      	adds	r7, #12
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bc80      	pop	{r7}
 8000e44:	4770      	bx	lr

08000e46 <I2C_GenerateStartCondition>:

	static void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx) {
 8000e46:	b480      	push	{r7}
 8000e48:	b083      	sub	sp, #12
 8000e4a:	af00      	add	r7, sp, #0
 8000e4c:	6078      	str	r0, [r7, #4]
		pI2Cx->I2C_CR2 |= (1 << I2C_CR2_START);
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	685b      	ldr	r3, [r3, #4]
 8000e52:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	605a      	str	r2, [r3, #4]
	}
 8000e5a:	bf00      	nop
 8000e5c:	370c      	adds	r7, #12
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bc80      	pop	{r7}
 8000e62:	4770      	bx	lr

08000e64 <I2C_GenerateStopCondition>:

	static void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx) {
 8000e64:	b480      	push	{r7}
 8000e66:	b083      	sub	sp, #12
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
		pI2Cx->I2C_CR2 |= (1 << I2C_CR2_STOP);
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	605a      	str	r2, [r3, #4]
	}
 8000e78:	bf00      	nop
 8000e7a:	370c      	adds	r7, #12
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bc80      	pop	{r7}
 8000e80:	4770      	bx	lr

08000e82 <I2C_GetFlagStatus>:

	uint8_t I2C_GetFlagStatus(I2C_RegDef_t *pI2Cx, uint32_t FlagName)
	{
 8000e82:	b480      	push	{r7}
 8000e84:	b083      	sub	sp, #12
 8000e86:	af00      	add	r7, sp, #0
 8000e88:	6078      	str	r0, [r7, #4]
 8000e8a:	6039      	str	r1, [r7, #0]
		if (pI2Cx->I2C_ISR & FlagName) {
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	699a      	ldr	r2, [r3, #24]
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	4013      	ands	r3, r2
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <I2C_GetFlagStatus+0x1a>
			return (FLAG_SET);
 8000e98:	2301      	movs	r3, #1
 8000e9a:	e000      	b.n	8000e9e <I2C_GetFlagStatus+0x1c>
		} else {
			return (FLAG_RESET);
 8000e9c:	2300      	movs	r3, #0
		}
	}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	370c      	adds	r7, #12
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bc80      	pop	{r7}
 8000ea6:	4770      	bx	lr

08000ea8 <GPIO_PeriClockControl>:
 * @return		-None
 *
 * @Note		-None
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx , uint8_t EnorDi)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
 8000eb0:	460b      	mov	r3, r1
 8000eb2:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == Enable)
 8000eb4:	78fb      	ldrb	r3, [r7, #3]
 8000eb6:	2b01      	cmp	r3, #1
 8000eb8:	d141      	bne.n	8000f3e <GPIO_PeriClockControl+0x96>
	{
		if (pGPIOx == GPIOA)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000ec0:	d106      	bne.n	8000ed0 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 8000ec2:	4b43      	ldr	r3, [pc, #268]	; (8000fd0 <GPIO_PeriClockControl+0x128>)
 8000ec4:	695b      	ldr	r3, [r3, #20]
 8000ec6:	4a42      	ldr	r2, [pc, #264]	; (8000fd0 <GPIO_PeriClockControl+0x128>)
 8000ec8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ecc:	6153      	str	r3, [r2, #20]
		else if (pGPIOx == GPIOF)
			{
				GPIOF_PCLK_DI();
			}
	}
}
 8000ece:	e07a      	b.n	8000fc6 <GPIO_PeriClockControl+0x11e>
		else if (pGPIOx == GPIOB)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	4a40      	ldr	r2, [pc, #256]	; (8000fd4 <GPIO_PeriClockControl+0x12c>)
 8000ed4:	4293      	cmp	r3, r2
 8000ed6:	d106      	bne.n	8000ee6 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000ed8:	4b3d      	ldr	r3, [pc, #244]	; (8000fd0 <GPIO_PeriClockControl+0x128>)
 8000eda:	695b      	ldr	r3, [r3, #20]
 8000edc:	4a3c      	ldr	r2, [pc, #240]	; (8000fd0 <GPIO_PeriClockControl+0x128>)
 8000ede:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ee2:	6153      	str	r3, [r2, #20]
}
 8000ee4:	e06f      	b.n	8000fc6 <GPIO_PeriClockControl+0x11e>
		else if (pGPIOx == GPIOC)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4a3b      	ldr	r2, [pc, #236]	; (8000fd8 <GPIO_PeriClockControl+0x130>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d106      	bne.n	8000efc <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8000eee:	4b38      	ldr	r3, [pc, #224]	; (8000fd0 <GPIO_PeriClockControl+0x128>)
 8000ef0:	695b      	ldr	r3, [r3, #20]
 8000ef2:	4a37      	ldr	r2, [pc, #220]	; (8000fd0 <GPIO_PeriClockControl+0x128>)
 8000ef4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000ef8:	6153      	str	r3, [r2, #20]
}
 8000efa:	e064      	b.n	8000fc6 <GPIO_PeriClockControl+0x11e>
		else if (pGPIOx == GPIOD)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	4a37      	ldr	r2, [pc, #220]	; (8000fdc <GPIO_PeriClockControl+0x134>)
 8000f00:	4293      	cmp	r3, r2
 8000f02:	d106      	bne.n	8000f12 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000f04:	4b32      	ldr	r3, [pc, #200]	; (8000fd0 <GPIO_PeriClockControl+0x128>)
 8000f06:	695b      	ldr	r3, [r3, #20]
 8000f08:	4a31      	ldr	r2, [pc, #196]	; (8000fd0 <GPIO_PeriClockControl+0x128>)
 8000f0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000f0e:	6153      	str	r3, [r2, #20]
}
 8000f10:	e059      	b.n	8000fc6 <GPIO_PeriClockControl+0x11e>
		else if (pGPIOx == GPIOE)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	4a32      	ldr	r2, [pc, #200]	; (8000fe0 <GPIO_PeriClockControl+0x138>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d106      	bne.n	8000f28 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000f1a:	4b2d      	ldr	r3, [pc, #180]	; (8000fd0 <GPIO_PeriClockControl+0x128>)
 8000f1c:	695b      	ldr	r3, [r3, #20]
 8000f1e:	4a2c      	ldr	r2, [pc, #176]	; (8000fd0 <GPIO_PeriClockControl+0x128>)
 8000f20:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f24:	6153      	str	r3, [r2, #20]
}
 8000f26:	e04e      	b.n	8000fc6 <GPIO_PeriClockControl+0x11e>
		else if (pGPIOx == GPIOF)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	4a2e      	ldr	r2, [pc, #184]	; (8000fe4 <GPIO_PeriClockControl+0x13c>)
 8000f2c:	4293      	cmp	r3, r2
 8000f2e:	d14a      	bne.n	8000fc6 <GPIO_PeriClockControl+0x11e>
			GPIOF_PCLK_EN();
 8000f30:	4b27      	ldr	r3, [pc, #156]	; (8000fd0 <GPIO_PeriClockControl+0x128>)
 8000f32:	695b      	ldr	r3, [r3, #20]
 8000f34:	4a26      	ldr	r2, [pc, #152]	; (8000fd0 <GPIO_PeriClockControl+0x128>)
 8000f36:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f3a:	6153      	str	r3, [r2, #20]
}
 8000f3c:	e043      	b.n	8000fc6 <GPIO_PeriClockControl+0x11e>
	else if (EnorDi == Disable)
 8000f3e:	78fb      	ldrb	r3, [r7, #3]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d140      	bne.n	8000fc6 <GPIO_PeriClockControl+0x11e>
		if (pGPIOx == GPIOA)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000f4a:	d106      	bne.n	8000f5a <GPIO_PeriClockControl+0xb2>
				GPIOA_PCLK_DI();
 8000f4c:	4b20      	ldr	r3, [pc, #128]	; (8000fd0 <GPIO_PeriClockControl+0x128>)
 8000f4e:	695b      	ldr	r3, [r3, #20]
 8000f50:	4a1f      	ldr	r2, [pc, #124]	; (8000fd0 <GPIO_PeriClockControl+0x128>)
 8000f52:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000f56:	6153      	str	r3, [r2, #20]
}
 8000f58:	e035      	b.n	8000fc6 <GPIO_PeriClockControl+0x11e>
		else if (pGPIOx == GPIOB)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4a1d      	ldr	r2, [pc, #116]	; (8000fd4 <GPIO_PeriClockControl+0x12c>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d106      	bne.n	8000f70 <GPIO_PeriClockControl+0xc8>
				GPIOB_PCLK_DI();
 8000f62:	4b1b      	ldr	r3, [pc, #108]	; (8000fd0 <GPIO_PeriClockControl+0x128>)
 8000f64:	695b      	ldr	r3, [r3, #20]
 8000f66:	4a1a      	ldr	r2, [pc, #104]	; (8000fd0 <GPIO_PeriClockControl+0x128>)
 8000f68:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f6c:	6153      	str	r3, [r2, #20]
}
 8000f6e:	e02a      	b.n	8000fc6 <GPIO_PeriClockControl+0x11e>
		else if (pGPIOx == GPIOC)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	4a19      	ldr	r2, [pc, #100]	; (8000fd8 <GPIO_PeriClockControl+0x130>)
 8000f74:	4293      	cmp	r3, r2
 8000f76:	d106      	bne.n	8000f86 <GPIO_PeriClockControl+0xde>
				GPIOC_PCLK_DI();
 8000f78:	4b15      	ldr	r3, [pc, #84]	; (8000fd0 <GPIO_PeriClockControl+0x128>)
 8000f7a:	695b      	ldr	r3, [r3, #20]
 8000f7c:	4a14      	ldr	r2, [pc, #80]	; (8000fd0 <GPIO_PeriClockControl+0x128>)
 8000f7e:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8000f82:	6153      	str	r3, [r2, #20]
}
 8000f84:	e01f      	b.n	8000fc6 <GPIO_PeriClockControl+0x11e>
		else if (pGPIOx == GPIOD)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4a14      	ldr	r2, [pc, #80]	; (8000fdc <GPIO_PeriClockControl+0x134>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d106      	bne.n	8000f9c <GPIO_PeriClockControl+0xf4>
				GPIOD_PCLK_DI();
 8000f8e:	4b10      	ldr	r3, [pc, #64]	; (8000fd0 <GPIO_PeriClockControl+0x128>)
 8000f90:	695b      	ldr	r3, [r3, #20]
 8000f92:	4a0f      	ldr	r2, [pc, #60]	; (8000fd0 <GPIO_PeriClockControl+0x128>)
 8000f94:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000f98:	6153      	str	r3, [r2, #20]
}
 8000f9a:	e014      	b.n	8000fc6 <GPIO_PeriClockControl+0x11e>
		else if (pGPIOx == GPIOE)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	4a10      	ldr	r2, [pc, #64]	; (8000fe0 <GPIO_PeriClockControl+0x138>)
 8000fa0:	4293      	cmp	r3, r2
 8000fa2:	d106      	bne.n	8000fb2 <GPIO_PeriClockControl+0x10a>
				GPIOE_PCLK_DI();
 8000fa4:	4b0a      	ldr	r3, [pc, #40]	; (8000fd0 <GPIO_PeriClockControl+0x128>)
 8000fa6:	695b      	ldr	r3, [r3, #20]
 8000fa8:	4a09      	ldr	r2, [pc, #36]	; (8000fd0 <GPIO_PeriClockControl+0x128>)
 8000faa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000fae:	6153      	str	r3, [r2, #20]
}
 8000fb0:	e009      	b.n	8000fc6 <GPIO_PeriClockControl+0x11e>
		else if (pGPIOx == GPIOF)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4a0b      	ldr	r2, [pc, #44]	; (8000fe4 <GPIO_PeriClockControl+0x13c>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d105      	bne.n	8000fc6 <GPIO_PeriClockControl+0x11e>
				GPIOF_PCLK_DI();
 8000fba:	4b05      	ldr	r3, [pc, #20]	; (8000fd0 <GPIO_PeriClockControl+0x128>)
 8000fbc:	695b      	ldr	r3, [r3, #20]
 8000fbe:	4a04      	ldr	r2, [pc, #16]	; (8000fd0 <GPIO_PeriClockControl+0x128>)
 8000fc0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000fc4:	6153      	str	r3, [r2, #20]
}
 8000fc6:	bf00      	nop
 8000fc8:	370c      	adds	r7, #12
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bc80      	pop	{r7}
 8000fce:	4770      	bx	lr
 8000fd0:	40021000 	.word	0x40021000
 8000fd4:	48000400 	.word	0x48000400
 8000fd8:	48000800 	.word	0x48000800
 8000fdc:	48000c00 	.word	0x48000c00
 8000fe0:	48001000 	.word	0x48001000
 8000fe4:	48001400 	.word	0x48001400

08000fe8 <GPIO_Init>:
 * @return		-None
 *
 * @Note		-None
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
	// configure the mode of the pin
	uint32_t temp = 0;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	617b      	str	r3, [r7, #20]
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx,Enable);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	2101      	movs	r1, #1
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f7ff ff54 	bl	8000ea8 <GPIO_PeriClockControl>
	//check interrupt or non interrupt
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	795b      	ldrb	r3, [r3, #5]
 8001004:	2b03      	cmp	r3, #3
 8001006:	d822      	bhi.n	800104e <GPIO_Init+0x66>
	{
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	795b      	ldrb	r3, [r3, #5]
 800100c:	461a      	mov	r2, r3
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	791b      	ldrb	r3, [r3, #4]
 8001012:	005b      	lsls	r3, r3, #1
 8001014:	fa02 f303 	lsl.w	r3, r2, r3
 8001018:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~( 0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	681a      	ldr	r2, [r3, #0]
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	791b      	ldrb	r3, [r3, #4]
 8001024:	005b      	lsls	r3, r3, #1
 8001026:	2103      	movs	r1, #3
 8001028:	fa01 f303 	lsl.w	r3, r1, r3
 800102c:	43db      	mvns	r3, r3
 800102e:	4619      	mov	r1, r3
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	400a      	ands	r2, r1
 8001036:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	6819      	ldr	r1, [r3, #0]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	697a      	ldr	r2, [r7, #20]
 8001044:	430a      	orrs	r2, r1
 8001046:	601a      	str	r2, [r3, #0]
		temp = 0;
 8001048:	2300      	movs	r3, #0
 800104a:	617b      	str	r3, [r7, #20]
 800104c:	e0a1      	b.n	8001192 <GPIO_Init+0x1aa>
	}
	else
	{

		if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	795b      	ldrb	r3, [r3, #5]
 8001052:	2b04      	cmp	r3, #4
 8001054:	d117      	bne.n	8001086 <GPIO_Init+0x9e>
		{
			//1. Configure Falling trigger selection register FTSR
			EXTI->FTSR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001056:	4b9c      	ldr	r3, [pc, #624]	; (80012c8 <GPIO_Init+0x2e0>)
 8001058:	68db      	ldr	r3, [r3, #12]
 800105a:	687a      	ldr	r2, [r7, #4]
 800105c:	7912      	ldrb	r2, [r2, #4]
 800105e:	4611      	mov	r1, r2
 8001060:	2201      	movs	r2, #1
 8001062:	408a      	lsls	r2, r1
 8001064:	4611      	mov	r1, r2
 8001066:	4a98      	ldr	r2, [pc, #608]	; (80012c8 <GPIO_Init+0x2e0>)
 8001068:	430b      	orrs	r3, r1
 800106a:	60d3      	str	r3, [r2, #12]
			// to guarntee that raising trigger selection register RTSR
			EXTI->RTSR1 &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800106c:	4b96      	ldr	r3, [pc, #600]	; (80012c8 <GPIO_Init+0x2e0>)
 800106e:	689b      	ldr	r3, [r3, #8]
 8001070:	687a      	ldr	r2, [r7, #4]
 8001072:	7912      	ldrb	r2, [r2, #4]
 8001074:	4611      	mov	r1, r2
 8001076:	2201      	movs	r2, #1
 8001078:	408a      	lsls	r2, r1
 800107a:	43d2      	mvns	r2, r2
 800107c:	4611      	mov	r1, r2
 800107e:	4a92      	ldr	r2, [pc, #584]	; (80012c8 <GPIO_Init+0x2e0>)
 8001080:	400b      	ands	r3, r1
 8001082:	6093      	str	r3, [r2, #8]
 8001084:	e035      	b.n	80010f2 <GPIO_Init+0x10a>
		}
		else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	795b      	ldrb	r3, [r3, #5]
 800108a:	2b05      	cmp	r3, #5
 800108c:	d117      	bne.n	80010be <GPIO_Init+0xd6>
		{
		//1. Configure Falling trigger selection register FTSR
		EXTI->RTSR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800108e:	4b8e      	ldr	r3, [pc, #568]	; (80012c8 <GPIO_Init+0x2e0>)
 8001090:	689b      	ldr	r3, [r3, #8]
 8001092:	687a      	ldr	r2, [r7, #4]
 8001094:	7912      	ldrb	r2, [r2, #4]
 8001096:	4611      	mov	r1, r2
 8001098:	2201      	movs	r2, #1
 800109a:	408a      	lsls	r2, r1
 800109c:	4611      	mov	r1, r2
 800109e:	4a8a      	ldr	r2, [pc, #552]	; (80012c8 <GPIO_Init+0x2e0>)
 80010a0:	430b      	orrs	r3, r1
 80010a2:	6093      	str	r3, [r2, #8]

		// to guarntee that raising trigger selection register RTSR
		EXTI->FTSR1 &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80010a4:	4b88      	ldr	r3, [pc, #544]	; (80012c8 <GPIO_Init+0x2e0>)
 80010a6:	68db      	ldr	r3, [r3, #12]
 80010a8:	687a      	ldr	r2, [r7, #4]
 80010aa:	7912      	ldrb	r2, [r2, #4]
 80010ac:	4611      	mov	r1, r2
 80010ae:	2201      	movs	r2, #1
 80010b0:	408a      	lsls	r2, r1
 80010b2:	43d2      	mvns	r2, r2
 80010b4:	4611      	mov	r1, r2
 80010b6:	4a84      	ldr	r2, [pc, #528]	; (80012c8 <GPIO_Init+0x2e0>)
 80010b8:	400b      	ands	r3, r1
 80010ba:	60d3      	str	r3, [r2, #12]
 80010bc:	e019      	b.n	80010f2 <GPIO_Init+0x10a>
		}
		else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	795b      	ldrb	r3, [r3, #5]
 80010c2:	2b06      	cmp	r3, #6
 80010c4:	d115      	bne.n	80010f2 <GPIO_Init+0x10a>
		{
		//3. configure Both FTSR & RTSR
		EXTI->RTSR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80010c6:	4b80      	ldr	r3, [pc, #512]	; (80012c8 <GPIO_Init+0x2e0>)
 80010c8:	689b      	ldr	r3, [r3, #8]
 80010ca:	687a      	ldr	r2, [r7, #4]
 80010cc:	7912      	ldrb	r2, [r2, #4]
 80010ce:	4611      	mov	r1, r2
 80010d0:	2201      	movs	r2, #1
 80010d2:	408a      	lsls	r2, r1
 80010d4:	4611      	mov	r1, r2
 80010d6:	4a7c      	ldr	r2, [pc, #496]	; (80012c8 <GPIO_Init+0x2e0>)
 80010d8:	430b      	orrs	r3, r1
 80010da:	6093      	str	r3, [r2, #8]
		EXTI->FTSR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80010dc:	4b7a      	ldr	r3, [pc, #488]	; (80012c8 <GPIO_Init+0x2e0>)
 80010de:	68db      	ldr	r3, [r3, #12]
 80010e0:	687a      	ldr	r2, [r7, #4]
 80010e2:	7912      	ldrb	r2, [r2, #4]
 80010e4:	4611      	mov	r1, r2
 80010e6:	2201      	movs	r2, #1
 80010e8:	408a      	lsls	r2, r1
 80010ea:	4611      	mov	r1, r2
 80010ec:	4a76      	ldr	r2, [pc, #472]	; (80012c8 <GPIO_Init+0x2e0>)
 80010ee:	430b      	orrs	r3, r1
 80010f0:	60d3      	str	r3, [r2, #12]
		}
		// 2. configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp_1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	791b      	ldrb	r3, [r3, #4]
 80010f6:	089b      	lsrs	r3, r3, #2
 80010f8:	74fb      	strb	r3, [r7, #19]
		uint8_t temp_2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	791b      	ldrb	r3, [r3, #4]
 80010fe:	f003 0303 	and.w	r3, r3, #3
 8001102:	74bb      	strb	r3, [r7, #18]
		uint8_t port_code = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800110c:	d024      	beq.n	8001158 <GPIO_Init+0x170>
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4a6e      	ldr	r2, [pc, #440]	; (80012cc <GPIO_Init+0x2e4>)
 8001114:	4293      	cmp	r3, r2
 8001116:	d01d      	beq.n	8001154 <GPIO_Init+0x16c>
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a6c      	ldr	r2, [pc, #432]	; (80012d0 <GPIO_Init+0x2e8>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d016      	beq.n	8001150 <GPIO_Init+0x168>
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4a6b      	ldr	r2, [pc, #428]	; (80012d4 <GPIO_Init+0x2ec>)
 8001128:	4293      	cmp	r3, r2
 800112a:	d00f      	beq.n	800114c <GPIO_Init+0x164>
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a69      	ldr	r2, [pc, #420]	; (80012d8 <GPIO_Init+0x2f0>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d008      	beq.n	8001148 <GPIO_Init+0x160>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4a68      	ldr	r2, [pc, #416]	; (80012dc <GPIO_Init+0x2f4>)
 800113c:	4293      	cmp	r3, r2
 800113e:	d101      	bne.n	8001144 <GPIO_Init+0x15c>
 8001140:	2305      	movs	r3, #5
 8001142:	e00a      	b.n	800115a <GPIO_Init+0x172>
 8001144:	2300      	movs	r3, #0
 8001146:	e008      	b.n	800115a <GPIO_Init+0x172>
 8001148:	2304      	movs	r3, #4
 800114a:	e006      	b.n	800115a <GPIO_Init+0x172>
 800114c:	2303      	movs	r3, #3
 800114e:	e004      	b.n	800115a <GPIO_Init+0x172>
 8001150:	2302      	movs	r3, #2
 8001152:	e002      	b.n	800115a <GPIO_Init+0x172>
 8001154:	2301      	movs	r3, #1
 8001156:	e000      	b.n	800115a <GPIO_Init+0x172>
 8001158:	2300      	movs	r3, #0
 800115a:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 800115c:	4b60      	ldr	r3, [pc, #384]	; (80012e0 <GPIO_Init+0x2f8>)
 800115e:	699b      	ldr	r3, [r3, #24]
 8001160:	4a5f      	ldr	r2, [pc, #380]	; (80012e0 <GPIO_Init+0x2f8>)
 8001162:	f043 0301 	orr.w	r3, r3, #1
 8001166:	6193      	str	r3, [r2, #24]
		SYSCFG->EXTICR[temp_1] = port_code << (temp_2 * 4);
 8001168:	7c7a      	ldrb	r2, [r7, #17]
 800116a:	7cbb      	ldrb	r3, [r7, #18]
 800116c:	009b      	lsls	r3, r3, #2
 800116e:	fa02 f103 	lsl.w	r1, r2, r3
 8001172:	4a5c      	ldr	r2, [pc, #368]	; (80012e4 <GPIO_Init+0x2fc>)
 8001174:	7cfb      	ldrb	r3, [r7, #19]
 8001176:	3302      	adds	r3, #2
 8001178:	f842 1023 	str.w	r1, [r2, r3, lsl #2]


		// 3. Enable The EXTI Interrupt delivery
		EXTI->IMR1 |= 1 << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800117c:	4b52      	ldr	r3, [pc, #328]	; (80012c8 <GPIO_Init+0x2e0>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	687a      	ldr	r2, [r7, #4]
 8001182:	7912      	ldrb	r2, [r2, #4]
 8001184:	4611      	mov	r1, r2
 8001186:	2201      	movs	r2, #1
 8001188:	408a      	lsls	r2, r1
 800118a:	4611      	mov	r1, r2
 800118c:	4a4e      	ldr	r2, [pc, #312]	; (80012c8 <GPIO_Init+0x2e0>)
 800118e:	430b      	orrs	r3, r1
 8001190:	6013      	str	r3, [r2, #0]

	}
	// configure the speed
	temp = 0;
 8001192:	2300      	movs	r3, #0
 8001194:	617b      	str	r3, [r7, #20]
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSPeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	799b      	ldrb	r3, [r3, #6]
 800119a:	461a      	mov	r2, r3
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	791b      	ldrb	r3, [r3, #4]
 80011a0:	005b      	lsls	r3, r3, #1
 80011a2:	fa02 f303 	lsl.w	r3, r2, r3
 80011a6:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	689a      	ldr	r2, [r3, #8]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	791b      	ldrb	r3, [r3, #4]
 80011b2:	4619      	mov	r1, r3
 80011b4:	460b      	mov	r3, r1
 80011b6:	005b      	lsls	r3, r3, #1
 80011b8:	440b      	add	r3, r1
 80011ba:	43db      	mvns	r3, r3
 80011bc:	4619      	mov	r1, r3
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	400a      	ands	r2, r1
 80011c4:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	6899      	ldr	r1, [r3, #8]
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	697a      	ldr	r2, [r7, #20]
 80011d2:	430a      	orrs	r2, r1
 80011d4:	609a      	str	r2, [r3, #8]

	// configure the pupd setting
	temp = 0;
 80011d6:	2300      	movs	r3, #0
 80011d8:	617b      	str	r3, [r7, #20]
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	7a1b      	ldrb	r3, [r3, #8]
 80011de:	461a      	mov	r2, r3
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	791b      	ldrb	r3, [r3, #4]
 80011e4:	005b      	lsls	r3, r3, #1
 80011e6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ea:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	68da      	ldr	r2, [r3, #12]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	791b      	ldrb	r3, [r3, #4]
 80011f6:	4619      	mov	r1, r3
 80011f8:	460b      	mov	r3, r1
 80011fa:	005b      	lsls	r3, r3, #1
 80011fc:	440b      	add	r3, r1
 80011fe:	43db      	mvns	r3, r3
 8001200:	4619      	mov	r1, r3
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	400a      	ands	r2, r1
 8001208:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	68d9      	ldr	r1, [r3, #12]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	697a      	ldr	r2, [r7, #20]
 8001216:	430a      	orrs	r2, r1
 8001218:	60da      	str	r2, [r3, #12]

	// configure the output type
	temp = 0;
 800121a:	2300      	movs	r3, #0
 800121c:	617b      	str	r3, [r7, #20]
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOpType << (1 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	79db      	ldrb	r3, [r3, #7]
 8001222:	461a      	mov	r2, r3
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	791b      	ldrb	r3, [r3, #4]
 8001228:	fa02 f303 	lsl.w	r3, r2, r3
 800122c:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	685a      	ldr	r2, [r3, #4]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	791b      	ldrb	r3, [r3, #4]
 8001238:	43db      	mvns	r3, r3
 800123a:	4619      	mov	r1, r3
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	400a      	ands	r2, r1
 8001242:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	6859      	ldr	r1, [r3, #4]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	697a      	ldr	r2, [r7, #20]
 8001250:	430a      	orrs	r2, r1
 8001252:	605a      	str	r2, [r3, #4]

	// configure the Alt_mode_function

	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	795b      	ldrb	r3, [r3, #5]
 8001258:	2b02      	cmp	r3, #2
 800125a:	d131      	bne.n	80012c0 <GPIO_Init+0x2d8>
	{
		// configure the Alt_mode_function
		uint8_t temp1 ,temp2 ;
		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	791b      	ldrb	r3, [r3, #4]
 8001260:	08db      	lsrs	r3, r3, #3
 8001262:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	791b      	ldrb	r3, [r3, #4]
 8001268:	f003 0307 	and.w	r3, r3, #7
 800126c:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (temp2 * 4));
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	7c3a      	ldrb	r2, [r7, #16]
 8001274:	3208      	adds	r2, #8
 8001276:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800127a:	7bfb      	ldrb	r3, [r7, #15]
 800127c:	009b      	lsls	r3, r3, #2
 800127e:	220f      	movs	r2, #15
 8001280:	fa02 f303 	lsl.w	r3, r2, r3
 8001284:	43db      	mvns	r3, r3
 8001286:	4618      	mov	r0, r3
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	7c3a      	ldrb	r2, [r7, #16]
 800128e:	4001      	ands	r1, r0
 8001290:	3208      	adds	r2, #8
 8001292:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (temp2 * 4));
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	7c3a      	ldrb	r2, [r7, #16]
 800129c:	3208      	adds	r2, #8
 800129e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	7a5b      	ldrb	r3, [r3, #9]
 80012a6:	461a      	mov	r2, r3
 80012a8:	7bfb      	ldrb	r3, [r7, #15]
 80012aa:	009b      	lsls	r3, r3, #2
 80012ac:	fa02 f303 	lsl.w	r3, r2, r3
 80012b0:	4618      	mov	r0, r3
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	7c3a      	ldrb	r2, [r7, #16]
 80012b8:	4301      	orrs	r1, r0
 80012ba:	3208      	adds	r2, #8
 80012bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	}

}
 80012c0:	bf00      	nop
 80012c2:	3718      	adds	r7, #24
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	40010400 	.word	0x40010400
 80012cc:	48000400 	.word	0x48000400
 80012d0:	48000800 	.word	0x48000800
 80012d4:	48000c00 	.word	0x48000c00
 80012d8:	48001000 	.word	0x48001000
 80012dc:	48001400 	.word	0x48001400
 80012e0:	40021000 	.word	0x40021000
 80012e4:	40010000 	.word	0x40010000

080012e8 <GPIO_WriteToOutputPin>:
 * @return		-None
 *
 * @Note		-None
 */
void GPIO_WriteToOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber ,uint8_t value)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	460b      	mov	r3, r1
 80012f2:	70fb      	strb	r3, [r7, #3]
 80012f4:	4613      	mov	r3, r2
 80012f6:	70bb      	strb	r3, [r7, #2]
	if(value == GPIO_PIN_SET)
 80012f8:	78bb      	ldrb	r3, [r7, #2]
 80012fa:	2b01      	cmp	r3, #1
 80012fc:	d109      	bne.n	8001312 <GPIO_WriteToOutputPin+0x2a>
	{
		pGPIOx->ODR |= (1<<PinNumber);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	695b      	ldr	r3, [r3, #20]
 8001302:	78fa      	ldrb	r2, [r7, #3]
 8001304:	2101      	movs	r1, #1
 8001306:	fa01 f202 	lsl.w	r2, r1, r2
 800130a:	431a      	orrs	r2, r3
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	615a      	str	r2, [r3, #20]
		pGPIOx->ODR &= ~(1<<(PinNumber));



	}
}
 8001310:	e009      	b.n	8001326 <GPIO_WriteToOutputPin+0x3e>
		pGPIOx->ODR &= ~(1<<(PinNumber));
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	695b      	ldr	r3, [r3, #20]
 8001316:	78fa      	ldrb	r2, [r7, #3]
 8001318:	2101      	movs	r1, #1
 800131a:	fa01 f202 	lsl.w	r2, r1, r2
 800131e:	43d2      	mvns	r2, r2
 8001320:	401a      	ands	r2, r3
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	615a      	str	r2, [r3, #20]
}
 8001326:	bf00      	nop
 8001328:	370c      	adds	r7, #12
 800132a:	46bd      	mov	sp, r7
 800132c:	bc80      	pop	{r7}
 800132e:	4770      	bx	lr

08001330 <init_systick_timer>:
/* Enable this macro if you want to test RTC on LCD */
//#define PRINT_LCD


void init_systick_timer(uint32_t tick_hz)
{
 8001330:	b480      	push	{r7}
 8001332:	b087      	sub	sp, #28
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
	uint32_t *pSRVR = (uint32_t*)0xE000E014;
 8001338:	4b14      	ldr	r3, [pc, #80]	; (800138c <init_systick_timer+0x5c>)
 800133a:	617b      	str	r3, [r7, #20]
	uint32_t *pSCSR = (uint32_t*)0xE000E010;
 800133c:	4b14      	ldr	r3, [pc, #80]	; (8001390 <init_systick_timer+0x60>)
 800133e:	613b      	str	r3, [r7, #16]

    /* calculation of reload value */
    uint32_t count_value = (SYSTICK_TIM_CLK/tick_hz)-1;
 8001340:	4a14      	ldr	r2, [pc, #80]	; (8001394 <init_systick_timer+0x64>)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	fbb2 f3f3 	udiv	r3, r2, r3
 8001348:	3b01      	subs	r3, #1
 800134a:	60fb      	str	r3, [r7, #12]

    //Clear the value of SVR
    *pSRVR &= ~(0x00FFFFFFFF);
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	2200      	movs	r2, #0
 8001350:	601a      	str	r2, [r3, #0]

    //load the value in to SVR
    *pSRVR |= count_value;
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	431a      	orrs	r2, r3
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	601a      	str	r2, [r3, #0]

    //do some settings
    *pSCSR |= ( 1 << 1); //Enables SysTick exception request:
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f043 0202 	orr.w	r2, r3, #2
 8001366:	693b      	ldr	r3, [r7, #16]
 8001368:	601a      	str	r2, [r3, #0]
    *pSCSR |= ( 1 << 2);  //Indicates the clock source, processor clock source
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f043 0204 	orr.w	r2, r3, #4
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	601a      	str	r2, [r3, #0]

    //enable the systick
    *pSCSR |= ( 1 << 0); //enables the counter
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f043 0201 	orr.w	r2, r3, #1
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	601a      	str	r2, [r3, #0]

}
 8001382:	bf00      	nop
 8001384:	371c      	adds	r7, #28
 8001386:	46bd      	mov	sp, r7
 8001388:	bc80      	pop	{r7}
 800138a:	4770      	bx	lr
 800138c:	e000e014 	.word	0xe000e014
 8001390:	e000e010 	.word	0xe000e010
 8001394:	00f42400 	.word	0x00f42400

08001398 <get_day_of_week>:


char* get_day_of_week(uint8_t i)
{
 8001398:	b4b0      	push	{r4, r5, r7}
 800139a:	b08b      	sub	sp, #44	; 0x2c
 800139c:	af00      	add	r7, sp, #0
 800139e:	4603      	mov	r3, r0
 80013a0:	71fb      	strb	r3, [r7, #7]
	char* days[] = { "Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"};
 80013a2:	4b0b      	ldr	r3, [pc, #44]	; (80013d0 <get_day_of_week+0x38>)
 80013a4:	f107 040c 	add.w	r4, r7, #12
 80013a8:	461d      	mov	r5, r3
 80013aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013ae:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80013b2:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	return days[i-1];
 80013b6:	79fb      	ldrb	r3, [r7, #7]
 80013b8:	3b01      	subs	r3, #1
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	3328      	adds	r3, #40	; 0x28
 80013be:	443b      	add	r3, r7
 80013c0:	f853 3c1c 	ldr.w	r3, [r3, #-28]
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	372c      	adds	r7, #44	; 0x2c
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bcb0      	pop	{r4, r5, r7}
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop
 80013d0:	080029f4 	.word	0x080029f4

080013d4 <number_to_string>:


void number_to_string(uint8_t num , char* buf)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b083      	sub	sp, #12
 80013d8:	af00      	add	r7, sp, #0
 80013da:	4603      	mov	r3, r0
 80013dc:	6039      	str	r1, [r7, #0]
 80013de:	71fb      	strb	r3, [r7, #7]

	if(num < 10){
 80013e0:	79fb      	ldrb	r3, [r7, #7]
 80013e2:	2b09      	cmp	r3, #9
 80013e4:	d809      	bhi.n	80013fa <number_to_string+0x26>
		buf[0] = '0';
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	2230      	movs	r2, #48	; 0x30
 80013ea:	701a      	strb	r2, [r3, #0]
		buf[1] = num+48;
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	3301      	adds	r3, #1
 80013f0:	79fa      	ldrb	r2, [r7, #7]
 80013f2:	3230      	adds	r2, #48	; 0x30
 80013f4:	b2d2      	uxtb	r2, r2
 80013f6:	701a      	strb	r2, [r3, #0]
	}else if(num >= 10 && num < 99)
	{
		buf[0] = (num/10) + 48;
		buf[1]= (num % 10) + 48;
	}
}
 80013f8:	e01f      	b.n	800143a <number_to_string+0x66>
	}else if(num >= 10 && num < 99)
 80013fa:	79fb      	ldrb	r3, [r7, #7]
 80013fc:	2b09      	cmp	r3, #9
 80013fe:	d91c      	bls.n	800143a <number_to_string+0x66>
 8001400:	79fb      	ldrb	r3, [r7, #7]
 8001402:	2b62      	cmp	r3, #98	; 0x62
 8001404:	d819      	bhi.n	800143a <number_to_string+0x66>
		buf[0] = (num/10) + 48;
 8001406:	79fb      	ldrb	r3, [r7, #7]
 8001408:	4a0e      	ldr	r2, [pc, #56]	; (8001444 <number_to_string+0x70>)
 800140a:	fba2 2303 	umull	r2, r3, r2, r3
 800140e:	08db      	lsrs	r3, r3, #3
 8001410:	b2db      	uxtb	r3, r3
 8001412:	3330      	adds	r3, #48	; 0x30
 8001414:	b2da      	uxtb	r2, r3
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	701a      	strb	r2, [r3, #0]
		buf[1]= (num % 10) + 48;
 800141a:	79fa      	ldrb	r2, [r7, #7]
 800141c:	4b09      	ldr	r3, [pc, #36]	; (8001444 <number_to_string+0x70>)
 800141e:	fba3 1302 	umull	r1, r3, r3, r2
 8001422:	08d9      	lsrs	r1, r3, #3
 8001424:	460b      	mov	r3, r1
 8001426:	009b      	lsls	r3, r3, #2
 8001428:	440b      	add	r3, r1
 800142a:	005b      	lsls	r3, r3, #1
 800142c:	1ad3      	subs	r3, r2, r3
 800142e:	b2da      	uxtb	r2, r3
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	3301      	adds	r3, #1
 8001434:	3230      	adds	r2, #48	; 0x30
 8001436:	b2d2      	uxtb	r2, r2
 8001438:	701a      	strb	r2, [r3, #0]
}
 800143a:	bf00      	nop
 800143c:	370c      	adds	r7, #12
 800143e:	46bd      	mov	sp, r7
 8001440:	bc80      	pop	{r7}
 8001442:	4770      	bx	lr
 8001444:	cccccccd 	.word	0xcccccccd

08001448 <time_to_string>:



//hh:mm:ss
char* time_to_string(RTC_time_t *rtc_time)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
	static char buf[9];

	buf[2]= ':';
 8001450:	4b0f      	ldr	r3, [pc, #60]	; (8001490 <time_to_string+0x48>)
 8001452:	223a      	movs	r2, #58	; 0x3a
 8001454:	709a      	strb	r2, [r3, #2]
	buf[5]= ':';
 8001456:	4b0e      	ldr	r3, [pc, #56]	; (8001490 <time_to_string+0x48>)
 8001458:	223a      	movs	r2, #58	; 0x3a
 800145a:	715a      	strb	r2, [r3, #5]

	number_to_string(rtc_time->hours,buf);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	789b      	ldrb	r3, [r3, #2]
 8001460:	490b      	ldr	r1, [pc, #44]	; (8001490 <time_to_string+0x48>)
 8001462:	4618      	mov	r0, r3
 8001464:	f7ff ffb6 	bl	80013d4 <number_to_string>
	number_to_string(rtc_time->minutes,&buf[3]);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	785b      	ldrb	r3, [r3, #1]
 800146c:	4909      	ldr	r1, [pc, #36]	; (8001494 <time_to_string+0x4c>)
 800146e:	4618      	mov	r0, r3
 8001470:	f7ff ffb0 	bl	80013d4 <number_to_string>
	number_to_string(rtc_time->seconds,&buf[6]);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	4907      	ldr	r1, [pc, #28]	; (8001498 <time_to_string+0x50>)
 800147a:	4618      	mov	r0, r3
 800147c:	f7ff ffaa 	bl	80013d4 <number_to_string>

	buf[8] = '\0';
 8001480:	4b03      	ldr	r3, [pc, #12]	; (8001490 <time_to_string+0x48>)
 8001482:	2200      	movs	r2, #0
 8001484:	721a      	strb	r2, [r3, #8]

	return buf;
 8001486:	4b02      	ldr	r3, [pc, #8]	; (8001490 <time_to_string+0x48>)

}
 8001488:	4618      	mov	r0, r3
 800148a:	3708      	adds	r7, #8
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	200000a8 	.word	0x200000a8
 8001494:	200000ab 	.word	0x200000ab
 8001498:	200000ae 	.word	0x200000ae

0800149c <date_to_string>:

//dd/mm/yy
char* date_to_string(RTC_date_t *rtc_date)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
	static char buf[9];

	buf[2]= '/';
 80014a4:	4b0f      	ldr	r3, [pc, #60]	; (80014e4 <date_to_string+0x48>)
 80014a6:	222f      	movs	r2, #47	; 0x2f
 80014a8:	709a      	strb	r2, [r3, #2]
	buf[5]= '/';
 80014aa:	4b0e      	ldr	r3, [pc, #56]	; (80014e4 <date_to_string+0x48>)
 80014ac:	222f      	movs	r2, #47	; 0x2f
 80014ae:	715a      	strb	r2, [r3, #5]

	number_to_string(rtc_date->date,buf);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	490b      	ldr	r1, [pc, #44]	; (80014e4 <date_to_string+0x48>)
 80014b6:	4618      	mov	r0, r3
 80014b8:	f7ff ff8c 	bl	80013d4 <number_to_string>
	number_to_string(rtc_date->month,&buf[3]);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	785b      	ldrb	r3, [r3, #1]
 80014c0:	4909      	ldr	r1, [pc, #36]	; (80014e8 <date_to_string+0x4c>)
 80014c2:	4618      	mov	r0, r3
 80014c4:	f7ff ff86 	bl	80013d4 <number_to_string>
	number_to_string(rtc_date->year,&buf[6]);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	78db      	ldrb	r3, [r3, #3]
 80014cc:	4907      	ldr	r1, [pc, #28]	; (80014ec <date_to_string+0x50>)
 80014ce:	4618      	mov	r0, r3
 80014d0:	f7ff ff80 	bl	80013d4 <number_to_string>

	buf[8]= '\0';
 80014d4:	4b03      	ldr	r3, [pc, #12]	; (80014e4 <date_to_string+0x48>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	721a      	strb	r2, [r3, #8]

	return buf;
 80014da:	4b02      	ldr	r3, [pc, #8]	; (80014e4 <date_to_string+0x48>)

}
 80014dc:	4618      	mov	r0, r3
 80014de:	3708      	adds	r7, #8
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	200000b4 	.word	0x200000b4
 80014e8:	200000b7 	.word	0x200000b7
 80014ec:	200000ba 	.word	0x200000ba

080014f0 <mdelay>:

static void mdelay(uint32_t cnt)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b085      	sub	sp, #20
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
	for(uint32_t i=0 ; i < (cnt * 1000); i++);
 80014f8:	2300      	movs	r3, #0
 80014fa:	60fb      	str	r3, [r7, #12]
 80014fc:	e002      	b.n	8001504 <mdelay+0x14>
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	3301      	adds	r3, #1
 8001502:	60fb      	str	r3, [r7, #12]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800150a:	fb02 f303 	mul.w	r3, r2, r3
 800150e:	68fa      	ldr	r2, [r7, #12]
 8001510:	429a      	cmp	r2, r3
 8001512:	d3f4      	bcc.n	80014fe <mdelay+0xe>
}
 8001514:	bf00      	nop
 8001516:	bf00      	nop
 8001518:	3714      	adds	r7, #20
 800151a:	46bd      	mov	sp, r7
 800151c:	bc80      	pop	{r7}
 800151e:	4770      	bx	lr

08001520 <main>:

int main(void)
{
 8001520:	b590      	push	{r4, r7, lr}
 8001522:	b085      	sub	sp, #20
 8001524:	af00      	add	r7, sp, #0

	RTC_time_t current_time;
	RTC_date_t current_date;

	printf("RTC test\n");
 8001526:	4836      	ldr	r0, [pc, #216]	; (8001600 <main+0xe0>)
 8001528:	f000 f97c 	bl	8001824 <puts>

	lcd_init();
 800152c:	f7ff f92e 	bl	800078c <lcd_init>

	lcd_print_string("Alie Eldeen");
 8001530:	4834      	ldr	r0, [pc, #208]	; (8001604 <main+0xe4>)
 8001532:	f7ff f917 	bl	8000764 <lcd_print_string>


	mdelay(20);
 8001536:	2014      	movs	r0, #20
 8001538:	f7ff ffda 	bl	80014f0 <mdelay>

	lcd_display_clear();
 800153c:	f7ff f9e8 	bl	8000910 <lcd_display_clear>
	lcd_display_return_home();
 8001540:	f7ff f9f0 	bl	8000924 <lcd_display_return_home>


	if(ds1307_init()){
 8001544:	f7fe ff4e 	bl	80003e4 <ds1307_init>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d003      	beq.n	8001556 <main+0x36>
		printf("RTC init has failed\n");
 800154e:	482e      	ldr	r0, [pc, #184]	; (8001608 <main+0xe8>)
 8001550:	f000 f968 	bl	8001824 <puts>
		while(1);
 8001554:	e7fe      	b.n	8001554 <main+0x34>
	}

	init_systick_timer(1);
 8001556:	2001      	movs	r0, #1
 8001558:	f7ff feea 	bl	8001330 <init_systick_timer>

	current_date.day = FRIDAY;
 800155c:	2306      	movs	r3, #6
 800155e:	71bb      	strb	r3, [r7, #6]
	current_date.date = 15;
 8001560:	230f      	movs	r3, #15
 8001562:	713b      	strb	r3, [r7, #4]
	current_date.month = 1;
 8001564:	2301      	movs	r3, #1
 8001566:	717b      	strb	r3, [r7, #5]
	current_date.year = 21;
 8001568:	2315      	movs	r3, #21
 800156a:	71fb      	strb	r3, [r7, #7]

	current_time.hours = 11;
 800156c:	230b      	movs	r3, #11
 800156e:	72bb      	strb	r3, [r7, #10]
	current_time.minutes = 59;
 8001570:	233b      	movs	r3, #59	; 0x3b
 8001572:	727b      	strb	r3, [r7, #9]
	current_time.seconds = 30;
 8001574:	231e      	movs	r3, #30
 8001576:	723b      	strb	r3, [r7, #8]
	current_time.time_format = TIME_FORMAT_12HRS_PM;
 8001578:	2301      	movs	r3, #1
 800157a:	72fb      	strb	r3, [r7, #11]

	ds1307_set_current_date(&current_date);
 800157c:	1d3b      	adds	r3, r7, #4
 800157e:	4618      	mov	r0, r3
 8001580:	f7fe ffc5 	bl	800050e <ds1307_set_current_date>
	ds1307_set_current_time(&current_time);
 8001584:	f107 0308 	add.w	r3, r7, #8
 8001588:	4618      	mov	r0, r3
 800158a:	f7fe ff49 	bl	8000420 <ds1307_set_current_time>

	ds1307_get_current_time(&current_time);
 800158e:	f107 0308 	add.w	r3, r7, #8
 8001592:	4618      	mov	r0, r3
 8001594:	f7fe ff89 	bl	80004aa <ds1307_get_current_time>
	ds1307_get_current_date(&current_date);
 8001598:	1d3b      	adds	r3, r7, #4
 800159a:	4618      	mov	r0, r3
 800159c:	f7fe ffe7 	bl	800056e <ds1307_get_current_date>

	char *am_pm;
	if(current_time.time_format != TIME_FORMAT_24HRS){
 80015a0:	7afb      	ldrb	r3, [r7, #11]
 80015a2:	2b02      	cmp	r3, #2
 80015a4:	d012      	beq.n	80015cc <main+0xac>
		am_pm = (current_time.time_format) ? "PM" : "AM";
 80015a6:	7afb      	ldrb	r3, [r7, #11]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <main+0x90>
 80015ac:	4b17      	ldr	r3, [pc, #92]	; (800160c <main+0xec>)
 80015ae:	e000      	b.n	80015b2 <main+0x92>
 80015b0:	4b17      	ldr	r3, [pc, #92]	; (8001610 <main+0xf0>)
 80015b2:	60fb      	str	r3, [r7, #12]
#ifndef PRINT_LCD
		printf("Current time = %s %s\n",time_to_string(&current_time),am_pm); // 04:25:41 PM
 80015b4:	f107 0308 	add.w	r3, r7, #8
 80015b8:	4618      	mov	r0, r3
 80015ba:	f7ff ff45 	bl	8001448 <time_to_string>
 80015be:	4603      	mov	r3, r0
 80015c0:	68fa      	ldr	r2, [r7, #12]
 80015c2:	4619      	mov	r1, r3
 80015c4:	4813      	ldr	r0, [pc, #76]	; (8001614 <main+0xf4>)
 80015c6:	f000 f8a7 	bl	8001718 <iprintf>
 80015ca:	e009      	b.n	80015e0 <main+0xc0>
		lcd_print_string(time_to_string(&current_time));
		lcd_print_string(am_pm);
#endif
	}else{
#ifndef PRINT_LCD
		printf("Current time = %s\n",time_to_string(&current_time)); // 04:25:41
 80015cc:	f107 0308 	add.w	r3, r7, #8
 80015d0:	4618      	mov	r0, r3
 80015d2:	f7ff ff39 	bl	8001448 <time_to_string>
 80015d6:	4603      	mov	r3, r0
 80015d8:	4619      	mov	r1, r3
 80015da:	480f      	ldr	r0, [pc, #60]	; (8001618 <main+0xf8>)
 80015dc:	f000 f89c 	bl	8001718 <iprintf>
		lcd_print_string(time_to_string(&current_time));
#endif
	}

#ifndef PRINT_LCD
	printf("Current date = %s <%s>\n",date_to_string(&current_date), get_day_of_week(current_date.day));
 80015e0:	1d3b      	adds	r3, r7, #4
 80015e2:	4618      	mov	r0, r3
 80015e4:	f7ff ff5a 	bl	800149c <date_to_string>
 80015e8:	4604      	mov	r4, r0
 80015ea:	79bb      	ldrb	r3, [r7, #6]
 80015ec:	4618      	mov	r0, r3
 80015ee:	f7ff fed3 	bl	8001398 <get_day_of_week>
 80015f2:	4603      	mov	r3, r0
 80015f4:	461a      	mov	r2, r3
 80015f6:	4621      	mov	r1, r4
 80015f8:	4808      	ldr	r0, [pc, #32]	; (800161c <main+0xfc>)
 80015fa:	f000 f88d 	bl	8001718 <iprintf>
	lcd_set_cursor(2, 1);
	lcd_print_string(date_to_string(&current_date));
#endif


	while(1);
 80015fe:	e7fe      	b.n	80015fe <main+0xde>
 8001600:	08002a10 	.word	0x08002a10
 8001604:	08002a1c 	.word	0x08002a1c
 8001608:	08002a28 	.word	0x08002a28
 800160c:	08002a3c 	.word	0x08002a3c
 8001610:	08002a40 	.word	0x08002a40
 8001614:	08002a44 	.word	0x08002a44
 8001618:	08002a5c 	.word	0x08002a5c
 800161c:	08002a70 	.word	0x08002a70

08001620 <SysTick_Handler>:
	return 0;
}


void SysTick_Handler(void)
{
 8001620:	b590      	push	{r4, r7, lr}
 8001622:	b085      	sub	sp, #20
 8001624:	af00      	add	r7, sp, #0
	RTC_time_t current_time;
	RTC_date_t current_date;

	ds1307_get_current_time(&current_time);
 8001626:	f107 0308 	add.w	r3, r7, #8
 800162a:	4618      	mov	r0, r3
 800162c:	f7fe ff3d 	bl	80004aa <ds1307_get_current_time>

	char *am_pm;
	if(current_time.time_format != TIME_FORMAT_24HRS){
 8001630:	7afb      	ldrb	r3, [r7, #11]
 8001632:	2b02      	cmp	r3, #2
 8001634:	d012      	beq.n	800165c <SysTick_Handler+0x3c>
		am_pm = (current_time.time_format) ? "PM" : "AM";
 8001636:	7afb      	ldrb	r3, [r7, #11]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d001      	beq.n	8001640 <SysTick_Handler+0x20>
 800163c:	4b18      	ldr	r3, [pc, #96]	; (80016a0 <SysTick_Handler+0x80>)
 800163e:	e000      	b.n	8001642 <SysTick_Handler+0x22>
 8001640:	4b18      	ldr	r3, [pc, #96]	; (80016a4 <SysTick_Handler+0x84>)
 8001642:	60fb      	str	r3, [r7, #12]
#ifndef PRINT_LCD
		printf("Current time = %s %s\n",time_to_string(&current_time),am_pm); // 04:25:41 PM
 8001644:	f107 0308 	add.w	r3, r7, #8
 8001648:	4618      	mov	r0, r3
 800164a:	f7ff fefd 	bl	8001448 <time_to_string>
 800164e:	4603      	mov	r3, r0
 8001650:	68fa      	ldr	r2, [r7, #12]
 8001652:	4619      	mov	r1, r3
 8001654:	4814      	ldr	r0, [pc, #80]	; (80016a8 <SysTick_Handler+0x88>)
 8001656:	f000 f85f 	bl	8001718 <iprintf>
 800165a:	e009      	b.n	8001670 <SysTick_Handler+0x50>
		lcd_print_string(am_pm);
#endif

	}else{
#ifndef PRINT_LCD
		printf("Current time = %s\n",time_to_string(&current_time)); // 04:25:41
 800165c:	f107 0308 	add.w	r3, r7, #8
 8001660:	4618      	mov	r0, r3
 8001662:	f7ff fef1 	bl	8001448 <time_to_string>
 8001666:	4603      	mov	r3, r0
 8001668:	4619      	mov	r1, r3
 800166a:	4810      	ldr	r0, [pc, #64]	; (80016ac <SysTick_Handler+0x8c>)
 800166c:	f000 f854 	bl	8001718 <iprintf>
		lcd_set_cursor(1, 1);
		lcd_print_string(time_to_string(&current_time));
#endif
	}

	ds1307_get_current_date(&current_date);
 8001670:	1d3b      	adds	r3, r7, #4
 8001672:	4618      	mov	r0, r3
 8001674:	f7fe ff7b 	bl	800056e <ds1307_get_current_date>

#ifndef PRINT_LCD
	printf("Current date = %s <%s>\n",date_to_string(&current_date), get_day_of_week(current_date.day));
 8001678:	1d3b      	adds	r3, r7, #4
 800167a:	4618      	mov	r0, r3
 800167c:	f7ff ff0e 	bl	800149c <date_to_string>
 8001680:	4604      	mov	r4, r0
 8001682:	79bb      	ldrb	r3, [r7, #6]
 8001684:	4618      	mov	r0, r3
 8001686:	f7ff fe87 	bl	8001398 <get_day_of_week>
 800168a:	4603      	mov	r3, r0
 800168c:	461a      	mov	r2, r3
 800168e:	4621      	mov	r1, r4
 8001690:	4807      	ldr	r0, [pc, #28]	; (80016b0 <SysTick_Handler+0x90>)
 8001692:	f000 f841 	bl	8001718 <iprintf>
	lcd_print_string(get_day_of_week(current_date.day));
	lcd_print_char('>');
#endif


}
 8001696:	bf00      	nop
 8001698:	3714      	adds	r7, #20
 800169a:	46bd      	mov	sp, r7
 800169c:	bd90      	pop	{r4, r7, pc}
 800169e:	bf00      	nop
 80016a0:	08002a3c 	.word	0x08002a3c
 80016a4:	08002a40 	.word	0x08002a40
 80016a8:	08002a44 	.word	0x08002a44
 80016ac:	08002a5c 	.word	0x08002a5c
 80016b0:	08002a70 	.word	0x08002a70

080016b4 <__errno>:
 80016b4:	4b01      	ldr	r3, [pc, #4]	; (80016bc <__errno+0x8>)
 80016b6:	6818      	ldr	r0, [r3, #0]
 80016b8:	4770      	bx	lr
 80016ba:	bf00      	nop
 80016bc:	20000000 	.word	0x20000000

080016c0 <__libc_init_array>:
 80016c0:	b570      	push	{r4, r5, r6, lr}
 80016c2:	4d0d      	ldr	r5, [pc, #52]	; (80016f8 <__libc_init_array+0x38>)
 80016c4:	4c0d      	ldr	r4, [pc, #52]	; (80016fc <__libc_init_array+0x3c>)
 80016c6:	1b64      	subs	r4, r4, r5
 80016c8:	10a4      	asrs	r4, r4, #2
 80016ca:	2600      	movs	r6, #0
 80016cc:	42a6      	cmp	r6, r4
 80016ce:	d109      	bne.n	80016e4 <__libc_init_array+0x24>
 80016d0:	4d0b      	ldr	r5, [pc, #44]	; (8001700 <__libc_init_array+0x40>)
 80016d2:	4c0c      	ldr	r4, [pc, #48]	; (8001704 <__libc_init_array+0x44>)
 80016d4:	f001 f960 	bl	8002998 <_init>
 80016d8:	1b64      	subs	r4, r4, r5
 80016da:	10a4      	asrs	r4, r4, #2
 80016dc:	2600      	movs	r6, #0
 80016de:	42a6      	cmp	r6, r4
 80016e0:	d105      	bne.n	80016ee <__libc_init_array+0x2e>
 80016e2:	bd70      	pop	{r4, r5, r6, pc}
 80016e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80016e8:	4798      	blx	r3
 80016ea:	3601      	adds	r6, #1
 80016ec:	e7ee      	b.n	80016cc <__libc_init_array+0xc>
 80016ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80016f2:	4798      	blx	r3
 80016f4:	3601      	adds	r6, #1
 80016f6:	e7f2      	b.n	80016de <__libc_init_array+0x1e>
 80016f8:	08002b20 	.word	0x08002b20
 80016fc:	08002b20 	.word	0x08002b20
 8001700:	08002b20 	.word	0x08002b20
 8001704:	08002b24 	.word	0x08002b24

08001708 <memset>:
 8001708:	4402      	add	r2, r0
 800170a:	4603      	mov	r3, r0
 800170c:	4293      	cmp	r3, r2
 800170e:	d100      	bne.n	8001712 <memset+0xa>
 8001710:	4770      	bx	lr
 8001712:	f803 1b01 	strb.w	r1, [r3], #1
 8001716:	e7f9      	b.n	800170c <memset+0x4>

08001718 <iprintf>:
 8001718:	b40f      	push	{r0, r1, r2, r3}
 800171a:	4b0a      	ldr	r3, [pc, #40]	; (8001744 <iprintf+0x2c>)
 800171c:	b513      	push	{r0, r1, r4, lr}
 800171e:	681c      	ldr	r4, [r3, #0]
 8001720:	b124      	cbz	r4, 800172c <iprintf+0x14>
 8001722:	69a3      	ldr	r3, [r4, #24]
 8001724:	b913      	cbnz	r3, 800172c <iprintf+0x14>
 8001726:	4620      	mov	r0, r4
 8001728:	f000 fa5a 	bl	8001be0 <__sinit>
 800172c:	ab05      	add	r3, sp, #20
 800172e:	9a04      	ldr	r2, [sp, #16]
 8001730:	68a1      	ldr	r1, [r4, #8]
 8001732:	9301      	str	r3, [sp, #4]
 8001734:	4620      	mov	r0, r4
 8001736:	f000 fc5f 	bl	8001ff8 <_vfiprintf_r>
 800173a:	b002      	add	sp, #8
 800173c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001740:	b004      	add	sp, #16
 8001742:	4770      	bx	lr
 8001744:	20000000 	.word	0x20000000

08001748 <_puts_r>:
 8001748:	b570      	push	{r4, r5, r6, lr}
 800174a:	460e      	mov	r6, r1
 800174c:	4605      	mov	r5, r0
 800174e:	b118      	cbz	r0, 8001758 <_puts_r+0x10>
 8001750:	6983      	ldr	r3, [r0, #24]
 8001752:	b90b      	cbnz	r3, 8001758 <_puts_r+0x10>
 8001754:	f000 fa44 	bl	8001be0 <__sinit>
 8001758:	69ab      	ldr	r3, [r5, #24]
 800175a:	68ac      	ldr	r4, [r5, #8]
 800175c:	b913      	cbnz	r3, 8001764 <_puts_r+0x1c>
 800175e:	4628      	mov	r0, r5
 8001760:	f000 fa3e 	bl	8001be0 <__sinit>
 8001764:	4b2c      	ldr	r3, [pc, #176]	; (8001818 <_puts_r+0xd0>)
 8001766:	429c      	cmp	r4, r3
 8001768:	d120      	bne.n	80017ac <_puts_r+0x64>
 800176a:	686c      	ldr	r4, [r5, #4]
 800176c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800176e:	07db      	lsls	r3, r3, #31
 8001770:	d405      	bmi.n	800177e <_puts_r+0x36>
 8001772:	89a3      	ldrh	r3, [r4, #12]
 8001774:	0598      	lsls	r0, r3, #22
 8001776:	d402      	bmi.n	800177e <_puts_r+0x36>
 8001778:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800177a:	f000 facf 	bl	8001d1c <__retarget_lock_acquire_recursive>
 800177e:	89a3      	ldrh	r3, [r4, #12]
 8001780:	0719      	lsls	r1, r3, #28
 8001782:	d51d      	bpl.n	80017c0 <_puts_r+0x78>
 8001784:	6923      	ldr	r3, [r4, #16]
 8001786:	b1db      	cbz	r3, 80017c0 <_puts_r+0x78>
 8001788:	3e01      	subs	r6, #1
 800178a:	68a3      	ldr	r3, [r4, #8]
 800178c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001790:	3b01      	subs	r3, #1
 8001792:	60a3      	str	r3, [r4, #8]
 8001794:	bb39      	cbnz	r1, 80017e6 <_puts_r+0x9e>
 8001796:	2b00      	cmp	r3, #0
 8001798:	da38      	bge.n	800180c <_puts_r+0xc4>
 800179a:	4622      	mov	r2, r4
 800179c:	210a      	movs	r1, #10
 800179e:	4628      	mov	r0, r5
 80017a0:	f000 f848 	bl	8001834 <__swbuf_r>
 80017a4:	3001      	adds	r0, #1
 80017a6:	d011      	beq.n	80017cc <_puts_r+0x84>
 80017a8:	250a      	movs	r5, #10
 80017aa:	e011      	b.n	80017d0 <_puts_r+0x88>
 80017ac:	4b1b      	ldr	r3, [pc, #108]	; (800181c <_puts_r+0xd4>)
 80017ae:	429c      	cmp	r4, r3
 80017b0:	d101      	bne.n	80017b6 <_puts_r+0x6e>
 80017b2:	68ac      	ldr	r4, [r5, #8]
 80017b4:	e7da      	b.n	800176c <_puts_r+0x24>
 80017b6:	4b1a      	ldr	r3, [pc, #104]	; (8001820 <_puts_r+0xd8>)
 80017b8:	429c      	cmp	r4, r3
 80017ba:	bf08      	it	eq
 80017bc:	68ec      	ldreq	r4, [r5, #12]
 80017be:	e7d5      	b.n	800176c <_puts_r+0x24>
 80017c0:	4621      	mov	r1, r4
 80017c2:	4628      	mov	r0, r5
 80017c4:	f000 f888 	bl	80018d8 <__swsetup_r>
 80017c8:	2800      	cmp	r0, #0
 80017ca:	d0dd      	beq.n	8001788 <_puts_r+0x40>
 80017cc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80017d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80017d2:	07da      	lsls	r2, r3, #31
 80017d4:	d405      	bmi.n	80017e2 <_puts_r+0x9a>
 80017d6:	89a3      	ldrh	r3, [r4, #12]
 80017d8:	059b      	lsls	r3, r3, #22
 80017da:	d402      	bmi.n	80017e2 <_puts_r+0x9a>
 80017dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80017de:	f000 fa9e 	bl	8001d1e <__retarget_lock_release_recursive>
 80017e2:	4628      	mov	r0, r5
 80017e4:	bd70      	pop	{r4, r5, r6, pc}
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	da04      	bge.n	80017f4 <_puts_r+0xac>
 80017ea:	69a2      	ldr	r2, [r4, #24]
 80017ec:	429a      	cmp	r2, r3
 80017ee:	dc06      	bgt.n	80017fe <_puts_r+0xb6>
 80017f0:	290a      	cmp	r1, #10
 80017f2:	d004      	beq.n	80017fe <_puts_r+0xb6>
 80017f4:	6823      	ldr	r3, [r4, #0]
 80017f6:	1c5a      	adds	r2, r3, #1
 80017f8:	6022      	str	r2, [r4, #0]
 80017fa:	7019      	strb	r1, [r3, #0]
 80017fc:	e7c5      	b.n	800178a <_puts_r+0x42>
 80017fe:	4622      	mov	r2, r4
 8001800:	4628      	mov	r0, r5
 8001802:	f000 f817 	bl	8001834 <__swbuf_r>
 8001806:	3001      	adds	r0, #1
 8001808:	d1bf      	bne.n	800178a <_puts_r+0x42>
 800180a:	e7df      	b.n	80017cc <_puts_r+0x84>
 800180c:	6823      	ldr	r3, [r4, #0]
 800180e:	250a      	movs	r5, #10
 8001810:	1c5a      	adds	r2, r3, #1
 8001812:	6022      	str	r2, [r4, #0]
 8001814:	701d      	strb	r5, [r3, #0]
 8001816:	e7db      	b.n	80017d0 <_puts_r+0x88>
 8001818:	08002aac 	.word	0x08002aac
 800181c:	08002acc 	.word	0x08002acc
 8001820:	08002a8c 	.word	0x08002a8c

08001824 <puts>:
 8001824:	4b02      	ldr	r3, [pc, #8]	; (8001830 <puts+0xc>)
 8001826:	4601      	mov	r1, r0
 8001828:	6818      	ldr	r0, [r3, #0]
 800182a:	f7ff bf8d 	b.w	8001748 <_puts_r>
 800182e:	bf00      	nop
 8001830:	20000000 	.word	0x20000000

08001834 <__swbuf_r>:
 8001834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001836:	460e      	mov	r6, r1
 8001838:	4614      	mov	r4, r2
 800183a:	4605      	mov	r5, r0
 800183c:	b118      	cbz	r0, 8001846 <__swbuf_r+0x12>
 800183e:	6983      	ldr	r3, [r0, #24]
 8001840:	b90b      	cbnz	r3, 8001846 <__swbuf_r+0x12>
 8001842:	f000 f9cd 	bl	8001be0 <__sinit>
 8001846:	4b21      	ldr	r3, [pc, #132]	; (80018cc <__swbuf_r+0x98>)
 8001848:	429c      	cmp	r4, r3
 800184a:	d12b      	bne.n	80018a4 <__swbuf_r+0x70>
 800184c:	686c      	ldr	r4, [r5, #4]
 800184e:	69a3      	ldr	r3, [r4, #24]
 8001850:	60a3      	str	r3, [r4, #8]
 8001852:	89a3      	ldrh	r3, [r4, #12]
 8001854:	071a      	lsls	r2, r3, #28
 8001856:	d52f      	bpl.n	80018b8 <__swbuf_r+0x84>
 8001858:	6923      	ldr	r3, [r4, #16]
 800185a:	b36b      	cbz	r3, 80018b8 <__swbuf_r+0x84>
 800185c:	6923      	ldr	r3, [r4, #16]
 800185e:	6820      	ldr	r0, [r4, #0]
 8001860:	1ac0      	subs	r0, r0, r3
 8001862:	6963      	ldr	r3, [r4, #20]
 8001864:	b2f6      	uxtb	r6, r6
 8001866:	4283      	cmp	r3, r0
 8001868:	4637      	mov	r7, r6
 800186a:	dc04      	bgt.n	8001876 <__swbuf_r+0x42>
 800186c:	4621      	mov	r1, r4
 800186e:	4628      	mov	r0, r5
 8001870:	f000 f922 	bl	8001ab8 <_fflush_r>
 8001874:	bb30      	cbnz	r0, 80018c4 <__swbuf_r+0x90>
 8001876:	68a3      	ldr	r3, [r4, #8]
 8001878:	3b01      	subs	r3, #1
 800187a:	60a3      	str	r3, [r4, #8]
 800187c:	6823      	ldr	r3, [r4, #0]
 800187e:	1c5a      	adds	r2, r3, #1
 8001880:	6022      	str	r2, [r4, #0]
 8001882:	701e      	strb	r6, [r3, #0]
 8001884:	6963      	ldr	r3, [r4, #20]
 8001886:	3001      	adds	r0, #1
 8001888:	4283      	cmp	r3, r0
 800188a:	d004      	beq.n	8001896 <__swbuf_r+0x62>
 800188c:	89a3      	ldrh	r3, [r4, #12]
 800188e:	07db      	lsls	r3, r3, #31
 8001890:	d506      	bpl.n	80018a0 <__swbuf_r+0x6c>
 8001892:	2e0a      	cmp	r6, #10
 8001894:	d104      	bne.n	80018a0 <__swbuf_r+0x6c>
 8001896:	4621      	mov	r1, r4
 8001898:	4628      	mov	r0, r5
 800189a:	f000 f90d 	bl	8001ab8 <_fflush_r>
 800189e:	b988      	cbnz	r0, 80018c4 <__swbuf_r+0x90>
 80018a0:	4638      	mov	r0, r7
 80018a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80018a4:	4b0a      	ldr	r3, [pc, #40]	; (80018d0 <__swbuf_r+0x9c>)
 80018a6:	429c      	cmp	r4, r3
 80018a8:	d101      	bne.n	80018ae <__swbuf_r+0x7a>
 80018aa:	68ac      	ldr	r4, [r5, #8]
 80018ac:	e7cf      	b.n	800184e <__swbuf_r+0x1a>
 80018ae:	4b09      	ldr	r3, [pc, #36]	; (80018d4 <__swbuf_r+0xa0>)
 80018b0:	429c      	cmp	r4, r3
 80018b2:	bf08      	it	eq
 80018b4:	68ec      	ldreq	r4, [r5, #12]
 80018b6:	e7ca      	b.n	800184e <__swbuf_r+0x1a>
 80018b8:	4621      	mov	r1, r4
 80018ba:	4628      	mov	r0, r5
 80018bc:	f000 f80c 	bl	80018d8 <__swsetup_r>
 80018c0:	2800      	cmp	r0, #0
 80018c2:	d0cb      	beq.n	800185c <__swbuf_r+0x28>
 80018c4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80018c8:	e7ea      	b.n	80018a0 <__swbuf_r+0x6c>
 80018ca:	bf00      	nop
 80018cc:	08002aac 	.word	0x08002aac
 80018d0:	08002acc 	.word	0x08002acc
 80018d4:	08002a8c 	.word	0x08002a8c

080018d8 <__swsetup_r>:
 80018d8:	4b32      	ldr	r3, [pc, #200]	; (80019a4 <__swsetup_r+0xcc>)
 80018da:	b570      	push	{r4, r5, r6, lr}
 80018dc:	681d      	ldr	r5, [r3, #0]
 80018de:	4606      	mov	r6, r0
 80018e0:	460c      	mov	r4, r1
 80018e2:	b125      	cbz	r5, 80018ee <__swsetup_r+0x16>
 80018e4:	69ab      	ldr	r3, [r5, #24]
 80018e6:	b913      	cbnz	r3, 80018ee <__swsetup_r+0x16>
 80018e8:	4628      	mov	r0, r5
 80018ea:	f000 f979 	bl	8001be0 <__sinit>
 80018ee:	4b2e      	ldr	r3, [pc, #184]	; (80019a8 <__swsetup_r+0xd0>)
 80018f0:	429c      	cmp	r4, r3
 80018f2:	d10f      	bne.n	8001914 <__swsetup_r+0x3c>
 80018f4:	686c      	ldr	r4, [r5, #4]
 80018f6:	89a3      	ldrh	r3, [r4, #12]
 80018f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80018fc:	0719      	lsls	r1, r3, #28
 80018fe:	d42c      	bmi.n	800195a <__swsetup_r+0x82>
 8001900:	06dd      	lsls	r5, r3, #27
 8001902:	d411      	bmi.n	8001928 <__swsetup_r+0x50>
 8001904:	2309      	movs	r3, #9
 8001906:	6033      	str	r3, [r6, #0]
 8001908:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800190c:	81a3      	strh	r3, [r4, #12]
 800190e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001912:	e03e      	b.n	8001992 <__swsetup_r+0xba>
 8001914:	4b25      	ldr	r3, [pc, #148]	; (80019ac <__swsetup_r+0xd4>)
 8001916:	429c      	cmp	r4, r3
 8001918:	d101      	bne.n	800191e <__swsetup_r+0x46>
 800191a:	68ac      	ldr	r4, [r5, #8]
 800191c:	e7eb      	b.n	80018f6 <__swsetup_r+0x1e>
 800191e:	4b24      	ldr	r3, [pc, #144]	; (80019b0 <__swsetup_r+0xd8>)
 8001920:	429c      	cmp	r4, r3
 8001922:	bf08      	it	eq
 8001924:	68ec      	ldreq	r4, [r5, #12]
 8001926:	e7e6      	b.n	80018f6 <__swsetup_r+0x1e>
 8001928:	0758      	lsls	r0, r3, #29
 800192a:	d512      	bpl.n	8001952 <__swsetup_r+0x7a>
 800192c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800192e:	b141      	cbz	r1, 8001942 <__swsetup_r+0x6a>
 8001930:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001934:	4299      	cmp	r1, r3
 8001936:	d002      	beq.n	800193e <__swsetup_r+0x66>
 8001938:	4630      	mov	r0, r6
 800193a:	f000 fa57 	bl	8001dec <_free_r>
 800193e:	2300      	movs	r3, #0
 8001940:	6363      	str	r3, [r4, #52]	; 0x34
 8001942:	89a3      	ldrh	r3, [r4, #12]
 8001944:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001948:	81a3      	strh	r3, [r4, #12]
 800194a:	2300      	movs	r3, #0
 800194c:	6063      	str	r3, [r4, #4]
 800194e:	6923      	ldr	r3, [r4, #16]
 8001950:	6023      	str	r3, [r4, #0]
 8001952:	89a3      	ldrh	r3, [r4, #12]
 8001954:	f043 0308 	orr.w	r3, r3, #8
 8001958:	81a3      	strh	r3, [r4, #12]
 800195a:	6923      	ldr	r3, [r4, #16]
 800195c:	b94b      	cbnz	r3, 8001972 <__swsetup_r+0x9a>
 800195e:	89a3      	ldrh	r3, [r4, #12]
 8001960:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001964:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001968:	d003      	beq.n	8001972 <__swsetup_r+0x9a>
 800196a:	4621      	mov	r1, r4
 800196c:	4630      	mov	r0, r6
 800196e:	f000 f9fd 	bl	8001d6c <__smakebuf_r>
 8001972:	89a0      	ldrh	r0, [r4, #12]
 8001974:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001978:	f010 0301 	ands.w	r3, r0, #1
 800197c:	d00a      	beq.n	8001994 <__swsetup_r+0xbc>
 800197e:	2300      	movs	r3, #0
 8001980:	60a3      	str	r3, [r4, #8]
 8001982:	6963      	ldr	r3, [r4, #20]
 8001984:	425b      	negs	r3, r3
 8001986:	61a3      	str	r3, [r4, #24]
 8001988:	6923      	ldr	r3, [r4, #16]
 800198a:	b943      	cbnz	r3, 800199e <__swsetup_r+0xc6>
 800198c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001990:	d1ba      	bne.n	8001908 <__swsetup_r+0x30>
 8001992:	bd70      	pop	{r4, r5, r6, pc}
 8001994:	0781      	lsls	r1, r0, #30
 8001996:	bf58      	it	pl
 8001998:	6963      	ldrpl	r3, [r4, #20]
 800199a:	60a3      	str	r3, [r4, #8]
 800199c:	e7f4      	b.n	8001988 <__swsetup_r+0xb0>
 800199e:	2000      	movs	r0, #0
 80019a0:	e7f7      	b.n	8001992 <__swsetup_r+0xba>
 80019a2:	bf00      	nop
 80019a4:	20000000 	.word	0x20000000
 80019a8:	08002aac 	.word	0x08002aac
 80019ac:	08002acc 	.word	0x08002acc
 80019b0:	08002a8c 	.word	0x08002a8c

080019b4 <__sflush_r>:
 80019b4:	898a      	ldrh	r2, [r1, #12]
 80019b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019b8:	4605      	mov	r5, r0
 80019ba:	0710      	lsls	r0, r2, #28
 80019bc:	460c      	mov	r4, r1
 80019be:	d457      	bmi.n	8001a70 <__sflush_r+0xbc>
 80019c0:	684b      	ldr	r3, [r1, #4]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	dc04      	bgt.n	80019d0 <__sflush_r+0x1c>
 80019c6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	dc01      	bgt.n	80019d0 <__sflush_r+0x1c>
 80019cc:	2000      	movs	r0, #0
 80019ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80019d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80019d2:	2e00      	cmp	r6, #0
 80019d4:	d0fa      	beq.n	80019cc <__sflush_r+0x18>
 80019d6:	2300      	movs	r3, #0
 80019d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80019dc:	682f      	ldr	r7, [r5, #0]
 80019de:	602b      	str	r3, [r5, #0]
 80019e0:	d032      	beq.n	8001a48 <__sflush_r+0x94>
 80019e2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80019e4:	89a3      	ldrh	r3, [r4, #12]
 80019e6:	075a      	lsls	r2, r3, #29
 80019e8:	d505      	bpl.n	80019f6 <__sflush_r+0x42>
 80019ea:	6863      	ldr	r3, [r4, #4]
 80019ec:	1ac0      	subs	r0, r0, r3
 80019ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80019f0:	b10b      	cbz	r3, 80019f6 <__sflush_r+0x42>
 80019f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80019f4:	1ac0      	subs	r0, r0, r3
 80019f6:	2300      	movs	r3, #0
 80019f8:	4602      	mov	r2, r0
 80019fa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80019fc:	6a21      	ldr	r1, [r4, #32]
 80019fe:	4628      	mov	r0, r5
 8001a00:	47b0      	blx	r6
 8001a02:	1c43      	adds	r3, r0, #1
 8001a04:	89a3      	ldrh	r3, [r4, #12]
 8001a06:	d106      	bne.n	8001a16 <__sflush_r+0x62>
 8001a08:	6829      	ldr	r1, [r5, #0]
 8001a0a:	291d      	cmp	r1, #29
 8001a0c:	d82c      	bhi.n	8001a68 <__sflush_r+0xb4>
 8001a0e:	4a29      	ldr	r2, [pc, #164]	; (8001ab4 <__sflush_r+0x100>)
 8001a10:	40ca      	lsrs	r2, r1
 8001a12:	07d6      	lsls	r6, r2, #31
 8001a14:	d528      	bpl.n	8001a68 <__sflush_r+0xb4>
 8001a16:	2200      	movs	r2, #0
 8001a18:	6062      	str	r2, [r4, #4]
 8001a1a:	04d9      	lsls	r1, r3, #19
 8001a1c:	6922      	ldr	r2, [r4, #16]
 8001a1e:	6022      	str	r2, [r4, #0]
 8001a20:	d504      	bpl.n	8001a2c <__sflush_r+0x78>
 8001a22:	1c42      	adds	r2, r0, #1
 8001a24:	d101      	bne.n	8001a2a <__sflush_r+0x76>
 8001a26:	682b      	ldr	r3, [r5, #0]
 8001a28:	b903      	cbnz	r3, 8001a2c <__sflush_r+0x78>
 8001a2a:	6560      	str	r0, [r4, #84]	; 0x54
 8001a2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001a2e:	602f      	str	r7, [r5, #0]
 8001a30:	2900      	cmp	r1, #0
 8001a32:	d0cb      	beq.n	80019cc <__sflush_r+0x18>
 8001a34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001a38:	4299      	cmp	r1, r3
 8001a3a:	d002      	beq.n	8001a42 <__sflush_r+0x8e>
 8001a3c:	4628      	mov	r0, r5
 8001a3e:	f000 f9d5 	bl	8001dec <_free_r>
 8001a42:	2000      	movs	r0, #0
 8001a44:	6360      	str	r0, [r4, #52]	; 0x34
 8001a46:	e7c2      	b.n	80019ce <__sflush_r+0x1a>
 8001a48:	6a21      	ldr	r1, [r4, #32]
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	4628      	mov	r0, r5
 8001a4e:	47b0      	blx	r6
 8001a50:	1c41      	adds	r1, r0, #1
 8001a52:	d1c7      	bne.n	80019e4 <__sflush_r+0x30>
 8001a54:	682b      	ldr	r3, [r5, #0]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d0c4      	beq.n	80019e4 <__sflush_r+0x30>
 8001a5a:	2b1d      	cmp	r3, #29
 8001a5c:	d001      	beq.n	8001a62 <__sflush_r+0xae>
 8001a5e:	2b16      	cmp	r3, #22
 8001a60:	d101      	bne.n	8001a66 <__sflush_r+0xb2>
 8001a62:	602f      	str	r7, [r5, #0]
 8001a64:	e7b2      	b.n	80019cc <__sflush_r+0x18>
 8001a66:	89a3      	ldrh	r3, [r4, #12]
 8001a68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a6c:	81a3      	strh	r3, [r4, #12]
 8001a6e:	e7ae      	b.n	80019ce <__sflush_r+0x1a>
 8001a70:	690f      	ldr	r7, [r1, #16]
 8001a72:	2f00      	cmp	r7, #0
 8001a74:	d0aa      	beq.n	80019cc <__sflush_r+0x18>
 8001a76:	0793      	lsls	r3, r2, #30
 8001a78:	680e      	ldr	r6, [r1, #0]
 8001a7a:	bf08      	it	eq
 8001a7c:	694b      	ldreq	r3, [r1, #20]
 8001a7e:	600f      	str	r7, [r1, #0]
 8001a80:	bf18      	it	ne
 8001a82:	2300      	movne	r3, #0
 8001a84:	1bf6      	subs	r6, r6, r7
 8001a86:	608b      	str	r3, [r1, #8]
 8001a88:	2e00      	cmp	r6, #0
 8001a8a:	dd9f      	ble.n	80019cc <__sflush_r+0x18>
 8001a8c:	6a21      	ldr	r1, [r4, #32]
 8001a8e:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8001a92:	4633      	mov	r3, r6
 8001a94:	463a      	mov	r2, r7
 8001a96:	4628      	mov	r0, r5
 8001a98:	47e0      	blx	ip
 8001a9a:	2800      	cmp	r0, #0
 8001a9c:	dc06      	bgt.n	8001aac <__sflush_r+0xf8>
 8001a9e:	89a3      	ldrh	r3, [r4, #12]
 8001aa0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001aa4:	81a3      	strh	r3, [r4, #12]
 8001aa6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001aaa:	e790      	b.n	80019ce <__sflush_r+0x1a>
 8001aac:	4407      	add	r7, r0
 8001aae:	1a36      	subs	r6, r6, r0
 8001ab0:	e7ea      	b.n	8001a88 <__sflush_r+0xd4>
 8001ab2:	bf00      	nop
 8001ab4:	20400001 	.word	0x20400001

08001ab8 <_fflush_r>:
 8001ab8:	b538      	push	{r3, r4, r5, lr}
 8001aba:	690b      	ldr	r3, [r1, #16]
 8001abc:	4605      	mov	r5, r0
 8001abe:	460c      	mov	r4, r1
 8001ac0:	b913      	cbnz	r3, 8001ac8 <_fflush_r+0x10>
 8001ac2:	2500      	movs	r5, #0
 8001ac4:	4628      	mov	r0, r5
 8001ac6:	bd38      	pop	{r3, r4, r5, pc}
 8001ac8:	b118      	cbz	r0, 8001ad2 <_fflush_r+0x1a>
 8001aca:	6983      	ldr	r3, [r0, #24]
 8001acc:	b90b      	cbnz	r3, 8001ad2 <_fflush_r+0x1a>
 8001ace:	f000 f887 	bl	8001be0 <__sinit>
 8001ad2:	4b14      	ldr	r3, [pc, #80]	; (8001b24 <_fflush_r+0x6c>)
 8001ad4:	429c      	cmp	r4, r3
 8001ad6:	d11b      	bne.n	8001b10 <_fflush_r+0x58>
 8001ad8:	686c      	ldr	r4, [r5, #4]
 8001ada:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d0ef      	beq.n	8001ac2 <_fflush_r+0xa>
 8001ae2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001ae4:	07d0      	lsls	r0, r2, #31
 8001ae6:	d404      	bmi.n	8001af2 <_fflush_r+0x3a>
 8001ae8:	0599      	lsls	r1, r3, #22
 8001aea:	d402      	bmi.n	8001af2 <_fflush_r+0x3a>
 8001aec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001aee:	f000 f915 	bl	8001d1c <__retarget_lock_acquire_recursive>
 8001af2:	4628      	mov	r0, r5
 8001af4:	4621      	mov	r1, r4
 8001af6:	f7ff ff5d 	bl	80019b4 <__sflush_r>
 8001afa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001afc:	07da      	lsls	r2, r3, #31
 8001afe:	4605      	mov	r5, r0
 8001b00:	d4e0      	bmi.n	8001ac4 <_fflush_r+0xc>
 8001b02:	89a3      	ldrh	r3, [r4, #12]
 8001b04:	059b      	lsls	r3, r3, #22
 8001b06:	d4dd      	bmi.n	8001ac4 <_fflush_r+0xc>
 8001b08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001b0a:	f000 f908 	bl	8001d1e <__retarget_lock_release_recursive>
 8001b0e:	e7d9      	b.n	8001ac4 <_fflush_r+0xc>
 8001b10:	4b05      	ldr	r3, [pc, #20]	; (8001b28 <_fflush_r+0x70>)
 8001b12:	429c      	cmp	r4, r3
 8001b14:	d101      	bne.n	8001b1a <_fflush_r+0x62>
 8001b16:	68ac      	ldr	r4, [r5, #8]
 8001b18:	e7df      	b.n	8001ada <_fflush_r+0x22>
 8001b1a:	4b04      	ldr	r3, [pc, #16]	; (8001b2c <_fflush_r+0x74>)
 8001b1c:	429c      	cmp	r4, r3
 8001b1e:	bf08      	it	eq
 8001b20:	68ec      	ldreq	r4, [r5, #12]
 8001b22:	e7da      	b.n	8001ada <_fflush_r+0x22>
 8001b24:	08002aac 	.word	0x08002aac
 8001b28:	08002acc 	.word	0x08002acc
 8001b2c:	08002a8c 	.word	0x08002a8c

08001b30 <std>:
 8001b30:	2300      	movs	r3, #0
 8001b32:	b510      	push	{r4, lr}
 8001b34:	4604      	mov	r4, r0
 8001b36:	e9c0 3300 	strd	r3, r3, [r0]
 8001b3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001b3e:	6083      	str	r3, [r0, #8]
 8001b40:	8181      	strh	r1, [r0, #12]
 8001b42:	6643      	str	r3, [r0, #100]	; 0x64
 8001b44:	81c2      	strh	r2, [r0, #14]
 8001b46:	6183      	str	r3, [r0, #24]
 8001b48:	4619      	mov	r1, r3
 8001b4a:	2208      	movs	r2, #8
 8001b4c:	305c      	adds	r0, #92	; 0x5c
 8001b4e:	f7ff fddb 	bl	8001708 <memset>
 8001b52:	4b05      	ldr	r3, [pc, #20]	; (8001b68 <std+0x38>)
 8001b54:	6263      	str	r3, [r4, #36]	; 0x24
 8001b56:	4b05      	ldr	r3, [pc, #20]	; (8001b6c <std+0x3c>)
 8001b58:	62a3      	str	r3, [r4, #40]	; 0x28
 8001b5a:	4b05      	ldr	r3, [pc, #20]	; (8001b70 <std+0x40>)
 8001b5c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001b5e:	4b05      	ldr	r3, [pc, #20]	; (8001b74 <std+0x44>)
 8001b60:	6224      	str	r4, [r4, #32]
 8001b62:	6323      	str	r3, [r4, #48]	; 0x30
 8001b64:	bd10      	pop	{r4, pc}
 8001b66:	bf00      	nop
 8001b68:	080025a1 	.word	0x080025a1
 8001b6c:	080025c3 	.word	0x080025c3
 8001b70:	080025fb 	.word	0x080025fb
 8001b74:	0800261f 	.word	0x0800261f

08001b78 <_cleanup_r>:
 8001b78:	4901      	ldr	r1, [pc, #4]	; (8001b80 <_cleanup_r+0x8>)
 8001b7a:	f000 b8af 	b.w	8001cdc <_fwalk_reent>
 8001b7e:	bf00      	nop
 8001b80:	08001ab9 	.word	0x08001ab9

08001b84 <__sfmoreglue>:
 8001b84:	b570      	push	{r4, r5, r6, lr}
 8001b86:	2268      	movs	r2, #104	; 0x68
 8001b88:	1e4d      	subs	r5, r1, #1
 8001b8a:	4355      	muls	r5, r2
 8001b8c:	460e      	mov	r6, r1
 8001b8e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001b92:	f000 f995 	bl	8001ec0 <_malloc_r>
 8001b96:	4604      	mov	r4, r0
 8001b98:	b140      	cbz	r0, 8001bac <__sfmoreglue+0x28>
 8001b9a:	2100      	movs	r1, #0
 8001b9c:	e9c0 1600 	strd	r1, r6, [r0]
 8001ba0:	300c      	adds	r0, #12
 8001ba2:	60a0      	str	r0, [r4, #8]
 8001ba4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001ba8:	f7ff fdae 	bl	8001708 <memset>
 8001bac:	4620      	mov	r0, r4
 8001bae:	bd70      	pop	{r4, r5, r6, pc}

08001bb0 <__sfp_lock_acquire>:
 8001bb0:	4801      	ldr	r0, [pc, #4]	; (8001bb8 <__sfp_lock_acquire+0x8>)
 8001bb2:	f000 b8b3 	b.w	8001d1c <__retarget_lock_acquire_recursive>
 8001bb6:	bf00      	nop
 8001bb8:	200000be 	.word	0x200000be

08001bbc <__sfp_lock_release>:
 8001bbc:	4801      	ldr	r0, [pc, #4]	; (8001bc4 <__sfp_lock_release+0x8>)
 8001bbe:	f000 b8ae 	b.w	8001d1e <__retarget_lock_release_recursive>
 8001bc2:	bf00      	nop
 8001bc4:	200000be 	.word	0x200000be

08001bc8 <__sinit_lock_acquire>:
 8001bc8:	4801      	ldr	r0, [pc, #4]	; (8001bd0 <__sinit_lock_acquire+0x8>)
 8001bca:	f000 b8a7 	b.w	8001d1c <__retarget_lock_acquire_recursive>
 8001bce:	bf00      	nop
 8001bd0:	200000bf 	.word	0x200000bf

08001bd4 <__sinit_lock_release>:
 8001bd4:	4801      	ldr	r0, [pc, #4]	; (8001bdc <__sinit_lock_release+0x8>)
 8001bd6:	f000 b8a2 	b.w	8001d1e <__retarget_lock_release_recursive>
 8001bda:	bf00      	nop
 8001bdc:	200000bf 	.word	0x200000bf

08001be0 <__sinit>:
 8001be0:	b510      	push	{r4, lr}
 8001be2:	4604      	mov	r4, r0
 8001be4:	f7ff fff0 	bl	8001bc8 <__sinit_lock_acquire>
 8001be8:	69a3      	ldr	r3, [r4, #24]
 8001bea:	b11b      	cbz	r3, 8001bf4 <__sinit+0x14>
 8001bec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001bf0:	f7ff bff0 	b.w	8001bd4 <__sinit_lock_release>
 8001bf4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8001bf8:	6523      	str	r3, [r4, #80]	; 0x50
 8001bfa:	4b13      	ldr	r3, [pc, #76]	; (8001c48 <__sinit+0x68>)
 8001bfc:	4a13      	ldr	r2, [pc, #76]	; (8001c4c <__sinit+0x6c>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	62a2      	str	r2, [r4, #40]	; 0x28
 8001c02:	42a3      	cmp	r3, r4
 8001c04:	bf04      	itt	eq
 8001c06:	2301      	moveq	r3, #1
 8001c08:	61a3      	streq	r3, [r4, #24]
 8001c0a:	4620      	mov	r0, r4
 8001c0c:	f000 f820 	bl	8001c50 <__sfp>
 8001c10:	6060      	str	r0, [r4, #4]
 8001c12:	4620      	mov	r0, r4
 8001c14:	f000 f81c 	bl	8001c50 <__sfp>
 8001c18:	60a0      	str	r0, [r4, #8]
 8001c1a:	4620      	mov	r0, r4
 8001c1c:	f000 f818 	bl	8001c50 <__sfp>
 8001c20:	2200      	movs	r2, #0
 8001c22:	60e0      	str	r0, [r4, #12]
 8001c24:	2104      	movs	r1, #4
 8001c26:	6860      	ldr	r0, [r4, #4]
 8001c28:	f7ff ff82 	bl	8001b30 <std>
 8001c2c:	68a0      	ldr	r0, [r4, #8]
 8001c2e:	2201      	movs	r2, #1
 8001c30:	2109      	movs	r1, #9
 8001c32:	f7ff ff7d 	bl	8001b30 <std>
 8001c36:	68e0      	ldr	r0, [r4, #12]
 8001c38:	2202      	movs	r2, #2
 8001c3a:	2112      	movs	r1, #18
 8001c3c:	f7ff ff78 	bl	8001b30 <std>
 8001c40:	2301      	movs	r3, #1
 8001c42:	61a3      	str	r3, [r4, #24]
 8001c44:	e7d2      	b.n	8001bec <__sinit+0xc>
 8001c46:	bf00      	nop
 8001c48:	08002a88 	.word	0x08002a88
 8001c4c:	08001b79 	.word	0x08001b79

08001c50 <__sfp>:
 8001c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c52:	4607      	mov	r7, r0
 8001c54:	f7ff ffac 	bl	8001bb0 <__sfp_lock_acquire>
 8001c58:	4b1e      	ldr	r3, [pc, #120]	; (8001cd4 <__sfp+0x84>)
 8001c5a:	681e      	ldr	r6, [r3, #0]
 8001c5c:	69b3      	ldr	r3, [r6, #24]
 8001c5e:	b913      	cbnz	r3, 8001c66 <__sfp+0x16>
 8001c60:	4630      	mov	r0, r6
 8001c62:	f7ff ffbd 	bl	8001be0 <__sinit>
 8001c66:	3648      	adds	r6, #72	; 0x48
 8001c68:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001c6c:	3b01      	subs	r3, #1
 8001c6e:	d503      	bpl.n	8001c78 <__sfp+0x28>
 8001c70:	6833      	ldr	r3, [r6, #0]
 8001c72:	b30b      	cbz	r3, 8001cb8 <__sfp+0x68>
 8001c74:	6836      	ldr	r6, [r6, #0]
 8001c76:	e7f7      	b.n	8001c68 <__sfp+0x18>
 8001c78:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001c7c:	b9d5      	cbnz	r5, 8001cb4 <__sfp+0x64>
 8001c7e:	4b16      	ldr	r3, [pc, #88]	; (8001cd8 <__sfp+0x88>)
 8001c80:	60e3      	str	r3, [r4, #12]
 8001c82:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001c86:	6665      	str	r5, [r4, #100]	; 0x64
 8001c88:	f000 f847 	bl	8001d1a <__retarget_lock_init_recursive>
 8001c8c:	f7ff ff96 	bl	8001bbc <__sfp_lock_release>
 8001c90:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001c94:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001c98:	6025      	str	r5, [r4, #0]
 8001c9a:	61a5      	str	r5, [r4, #24]
 8001c9c:	2208      	movs	r2, #8
 8001c9e:	4629      	mov	r1, r5
 8001ca0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001ca4:	f7ff fd30 	bl	8001708 <memset>
 8001ca8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001cac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001cb0:	4620      	mov	r0, r4
 8001cb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001cb4:	3468      	adds	r4, #104	; 0x68
 8001cb6:	e7d9      	b.n	8001c6c <__sfp+0x1c>
 8001cb8:	2104      	movs	r1, #4
 8001cba:	4638      	mov	r0, r7
 8001cbc:	f7ff ff62 	bl	8001b84 <__sfmoreglue>
 8001cc0:	4604      	mov	r4, r0
 8001cc2:	6030      	str	r0, [r6, #0]
 8001cc4:	2800      	cmp	r0, #0
 8001cc6:	d1d5      	bne.n	8001c74 <__sfp+0x24>
 8001cc8:	f7ff ff78 	bl	8001bbc <__sfp_lock_release>
 8001ccc:	230c      	movs	r3, #12
 8001cce:	603b      	str	r3, [r7, #0]
 8001cd0:	e7ee      	b.n	8001cb0 <__sfp+0x60>
 8001cd2:	bf00      	nop
 8001cd4:	08002a88 	.word	0x08002a88
 8001cd8:	ffff0001 	.word	0xffff0001

08001cdc <_fwalk_reent>:
 8001cdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001ce0:	4606      	mov	r6, r0
 8001ce2:	4688      	mov	r8, r1
 8001ce4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001ce8:	2700      	movs	r7, #0
 8001cea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001cee:	f1b9 0901 	subs.w	r9, r9, #1
 8001cf2:	d505      	bpl.n	8001d00 <_fwalk_reent+0x24>
 8001cf4:	6824      	ldr	r4, [r4, #0]
 8001cf6:	2c00      	cmp	r4, #0
 8001cf8:	d1f7      	bne.n	8001cea <_fwalk_reent+0xe>
 8001cfa:	4638      	mov	r0, r7
 8001cfc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001d00:	89ab      	ldrh	r3, [r5, #12]
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d907      	bls.n	8001d16 <_fwalk_reent+0x3a>
 8001d06:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001d0a:	3301      	adds	r3, #1
 8001d0c:	d003      	beq.n	8001d16 <_fwalk_reent+0x3a>
 8001d0e:	4629      	mov	r1, r5
 8001d10:	4630      	mov	r0, r6
 8001d12:	47c0      	blx	r8
 8001d14:	4307      	orrs	r7, r0
 8001d16:	3568      	adds	r5, #104	; 0x68
 8001d18:	e7e9      	b.n	8001cee <_fwalk_reent+0x12>

08001d1a <__retarget_lock_init_recursive>:
 8001d1a:	4770      	bx	lr

08001d1c <__retarget_lock_acquire_recursive>:
 8001d1c:	4770      	bx	lr

08001d1e <__retarget_lock_release_recursive>:
 8001d1e:	4770      	bx	lr

08001d20 <__swhatbuf_r>:
 8001d20:	b570      	push	{r4, r5, r6, lr}
 8001d22:	460e      	mov	r6, r1
 8001d24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001d28:	2900      	cmp	r1, #0
 8001d2a:	b096      	sub	sp, #88	; 0x58
 8001d2c:	4614      	mov	r4, r2
 8001d2e:	461d      	mov	r5, r3
 8001d30:	da08      	bge.n	8001d44 <__swhatbuf_r+0x24>
 8001d32:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8001d36:	2200      	movs	r2, #0
 8001d38:	602a      	str	r2, [r5, #0]
 8001d3a:	061a      	lsls	r2, r3, #24
 8001d3c:	d410      	bmi.n	8001d60 <__swhatbuf_r+0x40>
 8001d3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d42:	e00e      	b.n	8001d62 <__swhatbuf_r+0x42>
 8001d44:	466a      	mov	r2, sp
 8001d46:	f000 fc91 	bl	800266c <_fstat_r>
 8001d4a:	2800      	cmp	r0, #0
 8001d4c:	dbf1      	blt.n	8001d32 <__swhatbuf_r+0x12>
 8001d4e:	9a01      	ldr	r2, [sp, #4]
 8001d50:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001d54:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001d58:	425a      	negs	r2, r3
 8001d5a:	415a      	adcs	r2, r3
 8001d5c:	602a      	str	r2, [r5, #0]
 8001d5e:	e7ee      	b.n	8001d3e <__swhatbuf_r+0x1e>
 8001d60:	2340      	movs	r3, #64	; 0x40
 8001d62:	2000      	movs	r0, #0
 8001d64:	6023      	str	r3, [r4, #0]
 8001d66:	b016      	add	sp, #88	; 0x58
 8001d68:	bd70      	pop	{r4, r5, r6, pc}
	...

08001d6c <__smakebuf_r>:
 8001d6c:	898b      	ldrh	r3, [r1, #12]
 8001d6e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001d70:	079d      	lsls	r5, r3, #30
 8001d72:	4606      	mov	r6, r0
 8001d74:	460c      	mov	r4, r1
 8001d76:	d507      	bpl.n	8001d88 <__smakebuf_r+0x1c>
 8001d78:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001d7c:	6023      	str	r3, [r4, #0]
 8001d7e:	6123      	str	r3, [r4, #16]
 8001d80:	2301      	movs	r3, #1
 8001d82:	6163      	str	r3, [r4, #20]
 8001d84:	b002      	add	sp, #8
 8001d86:	bd70      	pop	{r4, r5, r6, pc}
 8001d88:	ab01      	add	r3, sp, #4
 8001d8a:	466a      	mov	r2, sp
 8001d8c:	f7ff ffc8 	bl	8001d20 <__swhatbuf_r>
 8001d90:	9900      	ldr	r1, [sp, #0]
 8001d92:	4605      	mov	r5, r0
 8001d94:	4630      	mov	r0, r6
 8001d96:	f000 f893 	bl	8001ec0 <_malloc_r>
 8001d9a:	b948      	cbnz	r0, 8001db0 <__smakebuf_r+0x44>
 8001d9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001da0:	059a      	lsls	r2, r3, #22
 8001da2:	d4ef      	bmi.n	8001d84 <__smakebuf_r+0x18>
 8001da4:	f023 0303 	bic.w	r3, r3, #3
 8001da8:	f043 0302 	orr.w	r3, r3, #2
 8001dac:	81a3      	strh	r3, [r4, #12]
 8001dae:	e7e3      	b.n	8001d78 <__smakebuf_r+0xc>
 8001db0:	4b0d      	ldr	r3, [pc, #52]	; (8001de8 <__smakebuf_r+0x7c>)
 8001db2:	62b3      	str	r3, [r6, #40]	; 0x28
 8001db4:	89a3      	ldrh	r3, [r4, #12]
 8001db6:	6020      	str	r0, [r4, #0]
 8001db8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001dbc:	81a3      	strh	r3, [r4, #12]
 8001dbe:	9b00      	ldr	r3, [sp, #0]
 8001dc0:	6163      	str	r3, [r4, #20]
 8001dc2:	9b01      	ldr	r3, [sp, #4]
 8001dc4:	6120      	str	r0, [r4, #16]
 8001dc6:	b15b      	cbz	r3, 8001de0 <__smakebuf_r+0x74>
 8001dc8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001dcc:	4630      	mov	r0, r6
 8001dce:	f000 fc5f 	bl	8002690 <_isatty_r>
 8001dd2:	b128      	cbz	r0, 8001de0 <__smakebuf_r+0x74>
 8001dd4:	89a3      	ldrh	r3, [r4, #12]
 8001dd6:	f023 0303 	bic.w	r3, r3, #3
 8001dda:	f043 0301 	orr.w	r3, r3, #1
 8001dde:	81a3      	strh	r3, [r4, #12]
 8001de0:	89a0      	ldrh	r0, [r4, #12]
 8001de2:	4305      	orrs	r5, r0
 8001de4:	81a5      	strh	r5, [r4, #12]
 8001de6:	e7cd      	b.n	8001d84 <__smakebuf_r+0x18>
 8001de8:	08001b79 	.word	0x08001b79

08001dec <_free_r>:
 8001dec:	b538      	push	{r3, r4, r5, lr}
 8001dee:	4605      	mov	r5, r0
 8001df0:	2900      	cmp	r1, #0
 8001df2:	d041      	beq.n	8001e78 <_free_r+0x8c>
 8001df4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001df8:	1f0c      	subs	r4, r1, #4
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	bfb8      	it	lt
 8001dfe:	18e4      	addlt	r4, r4, r3
 8001e00:	f000 fc68 	bl	80026d4 <__malloc_lock>
 8001e04:	4a1d      	ldr	r2, [pc, #116]	; (8001e7c <_free_r+0x90>)
 8001e06:	6813      	ldr	r3, [r2, #0]
 8001e08:	b933      	cbnz	r3, 8001e18 <_free_r+0x2c>
 8001e0a:	6063      	str	r3, [r4, #4]
 8001e0c:	6014      	str	r4, [r2, #0]
 8001e0e:	4628      	mov	r0, r5
 8001e10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001e14:	f000 bc64 	b.w	80026e0 <__malloc_unlock>
 8001e18:	42a3      	cmp	r3, r4
 8001e1a:	d908      	bls.n	8001e2e <_free_r+0x42>
 8001e1c:	6820      	ldr	r0, [r4, #0]
 8001e1e:	1821      	adds	r1, r4, r0
 8001e20:	428b      	cmp	r3, r1
 8001e22:	bf01      	itttt	eq
 8001e24:	6819      	ldreq	r1, [r3, #0]
 8001e26:	685b      	ldreq	r3, [r3, #4]
 8001e28:	1809      	addeq	r1, r1, r0
 8001e2a:	6021      	streq	r1, [r4, #0]
 8001e2c:	e7ed      	b.n	8001e0a <_free_r+0x1e>
 8001e2e:	461a      	mov	r2, r3
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	b10b      	cbz	r3, 8001e38 <_free_r+0x4c>
 8001e34:	42a3      	cmp	r3, r4
 8001e36:	d9fa      	bls.n	8001e2e <_free_r+0x42>
 8001e38:	6811      	ldr	r1, [r2, #0]
 8001e3a:	1850      	adds	r0, r2, r1
 8001e3c:	42a0      	cmp	r0, r4
 8001e3e:	d10b      	bne.n	8001e58 <_free_r+0x6c>
 8001e40:	6820      	ldr	r0, [r4, #0]
 8001e42:	4401      	add	r1, r0
 8001e44:	1850      	adds	r0, r2, r1
 8001e46:	4283      	cmp	r3, r0
 8001e48:	6011      	str	r1, [r2, #0]
 8001e4a:	d1e0      	bne.n	8001e0e <_free_r+0x22>
 8001e4c:	6818      	ldr	r0, [r3, #0]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	6053      	str	r3, [r2, #4]
 8001e52:	4401      	add	r1, r0
 8001e54:	6011      	str	r1, [r2, #0]
 8001e56:	e7da      	b.n	8001e0e <_free_r+0x22>
 8001e58:	d902      	bls.n	8001e60 <_free_r+0x74>
 8001e5a:	230c      	movs	r3, #12
 8001e5c:	602b      	str	r3, [r5, #0]
 8001e5e:	e7d6      	b.n	8001e0e <_free_r+0x22>
 8001e60:	6820      	ldr	r0, [r4, #0]
 8001e62:	1821      	adds	r1, r4, r0
 8001e64:	428b      	cmp	r3, r1
 8001e66:	bf04      	itt	eq
 8001e68:	6819      	ldreq	r1, [r3, #0]
 8001e6a:	685b      	ldreq	r3, [r3, #4]
 8001e6c:	6063      	str	r3, [r4, #4]
 8001e6e:	bf04      	itt	eq
 8001e70:	1809      	addeq	r1, r1, r0
 8001e72:	6021      	streq	r1, [r4, #0]
 8001e74:	6054      	str	r4, [r2, #4]
 8001e76:	e7ca      	b.n	8001e0e <_free_r+0x22>
 8001e78:	bd38      	pop	{r3, r4, r5, pc}
 8001e7a:	bf00      	nop
 8001e7c:	200000c0 	.word	0x200000c0

08001e80 <sbrk_aligned>:
 8001e80:	b570      	push	{r4, r5, r6, lr}
 8001e82:	4e0e      	ldr	r6, [pc, #56]	; (8001ebc <sbrk_aligned+0x3c>)
 8001e84:	460c      	mov	r4, r1
 8001e86:	6831      	ldr	r1, [r6, #0]
 8001e88:	4605      	mov	r5, r0
 8001e8a:	b911      	cbnz	r1, 8001e92 <sbrk_aligned+0x12>
 8001e8c:	f000 fb78 	bl	8002580 <_sbrk_r>
 8001e90:	6030      	str	r0, [r6, #0]
 8001e92:	4621      	mov	r1, r4
 8001e94:	4628      	mov	r0, r5
 8001e96:	f000 fb73 	bl	8002580 <_sbrk_r>
 8001e9a:	1c43      	adds	r3, r0, #1
 8001e9c:	d00a      	beq.n	8001eb4 <sbrk_aligned+0x34>
 8001e9e:	1cc4      	adds	r4, r0, #3
 8001ea0:	f024 0403 	bic.w	r4, r4, #3
 8001ea4:	42a0      	cmp	r0, r4
 8001ea6:	d007      	beq.n	8001eb8 <sbrk_aligned+0x38>
 8001ea8:	1a21      	subs	r1, r4, r0
 8001eaa:	4628      	mov	r0, r5
 8001eac:	f000 fb68 	bl	8002580 <_sbrk_r>
 8001eb0:	3001      	adds	r0, #1
 8001eb2:	d101      	bne.n	8001eb8 <sbrk_aligned+0x38>
 8001eb4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8001eb8:	4620      	mov	r0, r4
 8001eba:	bd70      	pop	{r4, r5, r6, pc}
 8001ebc:	200000c4 	.word	0x200000c4

08001ec0 <_malloc_r>:
 8001ec0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ec4:	1ccd      	adds	r5, r1, #3
 8001ec6:	f025 0503 	bic.w	r5, r5, #3
 8001eca:	3508      	adds	r5, #8
 8001ecc:	2d0c      	cmp	r5, #12
 8001ece:	bf38      	it	cc
 8001ed0:	250c      	movcc	r5, #12
 8001ed2:	2d00      	cmp	r5, #0
 8001ed4:	4607      	mov	r7, r0
 8001ed6:	db01      	blt.n	8001edc <_malloc_r+0x1c>
 8001ed8:	42a9      	cmp	r1, r5
 8001eda:	d905      	bls.n	8001ee8 <_malloc_r+0x28>
 8001edc:	230c      	movs	r3, #12
 8001ede:	603b      	str	r3, [r7, #0]
 8001ee0:	2600      	movs	r6, #0
 8001ee2:	4630      	mov	r0, r6
 8001ee4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001ee8:	4e2e      	ldr	r6, [pc, #184]	; (8001fa4 <_malloc_r+0xe4>)
 8001eea:	f000 fbf3 	bl	80026d4 <__malloc_lock>
 8001eee:	6833      	ldr	r3, [r6, #0]
 8001ef0:	461c      	mov	r4, r3
 8001ef2:	bb34      	cbnz	r4, 8001f42 <_malloc_r+0x82>
 8001ef4:	4629      	mov	r1, r5
 8001ef6:	4638      	mov	r0, r7
 8001ef8:	f7ff ffc2 	bl	8001e80 <sbrk_aligned>
 8001efc:	1c43      	adds	r3, r0, #1
 8001efe:	4604      	mov	r4, r0
 8001f00:	d14d      	bne.n	8001f9e <_malloc_r+0xde>
 8001f02:	6834      	ldr	r4, [r6, #0]
 8001f04:	4626      	mov	r6, r4
 8001f06:	2e00      	cmp	r6, #0
 8001f08:	d140      	bne.n	8001f8c <_malloc_r+0xcc>
 8001f0a:	6823      	ldr	r3, [r4, #0]
 8001f0c:	4631      	mov	r1, r6
 8001f0e:	4638      	mov	r0, r7
 8001f10:	eb04 0803 	add.w	r8, r4, r3
 8001f14:	f000 fb34 	bl	8002580 <_sbrk_r>
 8001f18:	4580      	cmp	r8, r0
 8001f1a:	d13a      	bne.n	8001f92 <_malloc_r+0xd2>
 8001f1c:	6821      	ldr	r1, [r4, #0]
 8001f1e:	3503      	adds	r5, #3
 8001f20:	1a6d      	subs	r5, r5, r1
 8001f22:	f025 0503 	bic.w	r5, r5, #3
 8001f26:	3508      	adds	r5, #8
 8001f28:	2d0c      	cmp	r5, #12
 8001f2a:	bf38      	it	cc
 8001f2c:	250c      	movcc	r5, #12
 8001f2e:	4629      	mov	r1, r5
 8001f30:	4638      	mov	r0, r7
 8001f32:	f7ff ffa5 	bl	8001e80 <sbrk_aligned>
 8001f36:	3001      	adds	r0, #1
 8001f38:	d02b      	beq.n	8001f92 <_malloc_r+0xd2>
 8001f3a:	6823      	ldr	r3, [r4, #0]
 8001f3c:	442b      	add	r3, r5
 8001f3e:	6023      	str	r3, [r4, #0]
 8001f40:	e00e      	b.n	8001f60 <_malloc_r+0xa0>
 8001f42:	6822      	ldr	r2, [r4, #0]
 8001f44:	1b52      	subs	r2, r2, r5
 8001f46:	d41e      	bmi.n	8001f86 <_malloc_r+0xc6>
 8001f48:	2a0b      	cmp	r2, #11
 8001f4a:	d916      	bls.n	8001f7a <_malloc_r+0xba>
 8001f4c:	1961      	adds	r1, r4, r5
 8001f4e:	42a3      	cmp	r3, r4
 8001f50:	6025      	str	r5, [r4, #0]
 8001f52:	bf18      	it	ne
 8001f54:	6059      	strne	r1, [r3, #4]
 8001f56:	6863      	ldr	r3, [r4, #4]
 8001f58:	bf08      	it	eq
 8001f5a:	6031      	streq	r1, [r6, #0]
 8001f5c:	5162      	str	r2, [r4, r5]
 8001f5e:	604b      	str	r3, [r1, #4]
 8001f60:	4638      	mov	r0, r7
 8001f62:	f104 060b 	add.w	r6, r4, #11
 8001f66:	f000 fbbb 	bl	80026e0 <__malloc_unlock>
 8001f6a:	f026 0607 	bic.w	r6, r6, #7
 8001f6e:	1d23      	adds	r3, r4, #4
 8001f70:	1af2      	subs	r2, r6, r3
 8001f72:	d0b6      	beq.n	8001ee2 <_malloc_r+0x22>
 8001f74:	1b9b      	subs	r3, r3, r6
 8001f76:	50a3      	str	r3, [r4, r2]
 8001f78:	e7b3      	b.n	8001ee2 <_malloc_r+0x22>
 8001f7a:	6862      	ldr	r2, [r4, #4]
 8001f7c:	42a3      	cmp	r3, r4
 8001f7e:	bf0c      	ite	eq
 8001f80:	6032      	streq	r2, [r6, #0]
 8001f82:	605a      	strne	r2, [r3, #4]
 8001f84:	e7ec      	b.n	8001f60 <_malloc_r+0xa0>
 8001f86:	4623      	mov	r3, r4
 8001f88:	6864      	ldr	r4, [r4, #4]
 8001f8a:	e7b2      	b.n	8001ef2 <_malloc_r+0x32>
 8001f8c:	4634      	mov	r4, r6
 8001f8e:	6876      	ldr	r6, [r6, #4]
 8001f90:	e7b9      	b.n	8001f06 <_malloc_r+0x46>
 8001f92:	230c      	movs	r3, #12
 8001f94:	603b      	str	r3, [r7, #0]
 8001f96:	4638      	mov	r0, r7
 8001f98:	f000 fba2 	bl	80026e0 <__malloc_unlock>
 8001f9c:	e7a1      	b.n	8001ee2 <_malloc_r+0x22>
 8001f9e:	6025      	str	r5, [r4, #0]
 8001fa0:	e7de      	b.n	8001f60 <_malloc_r+0xa0>
 8001fa2:	bf00      	nop
 8001fa4:	200000c0 	.word	0x200000c0

08001fa8 <__sfputc_r>:
 8001fa8:	6893      	ldr	r3, [r2, #8]
 8001faa:	3b01      	subs	r3, #1
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	b410      	push	{r4}
 8001fb0:	6093      	str	r3, [r2, #8]
 8001fb2:	da07      	bge.n	8001fc4 <__sfputc_r+0x1c>
 8001fb4:	6994      	ldr	r4, [r2, #24]
 8001fb6:	42a3      	cmp	r3, r4
 8001fb8:	db01      	blt.n	8001fbe <__sfputc_r+0x16>
 8001fba:	290a      	cmp	r1, #10
 8001fbc:	d102      	bne.n	8001fc4 <__sfputc_r+0x1c>
 8001fbe:	bc10      	pop	{r4}
 8001fc0:	f7ff bc38 	b.w	8001834 <__swbuf_r>
 8001fc4:	6813      	ldr	r3, [r2, #0]
 8001fc6:	1c58      	adds	r0, r3, #1
 8001fc8:	6010      	str	r0, [r2, #0]
 8001fca:	7019      	strb	r1, [r3, #0]
 8001fcc:	4608      	mov	r0, r1
 8001fce:	bc10      	pop	{r4}
 8001fd0:	4770      	bx	lr

08001fd2 <__sfputs_r>:
 8001fd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fd4:	4606      	mov	r6, r0
 8001fd6:	460f      	mov	r7, r1
 8001fd8:	4614      	mov	r4, r2
 8001fda:	18d5      	adds	r5, r2, r3
 8001fdc:	42ac      	cmp	r4, r5
 8001fde:	d101      	bne.n	8001fe4 <__sfputs_r+0x12>
 8001fe0:	2000      	movs	r0, #0
 8001fe2:	e007      	b.n	8001ff4 <__sfputs_r+0x22>
 8001fe4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001fe8:	463a      	mov	r2, r7
 8001fea:	4630      	mov	r0, r6
 8001fec:	f7ff ffdc 	bl	8001fa8 <__sfputc_r>
 8001ff0:	1c43      	adds	r3, r0, #1
 8001ff2:	d1f3      	bne.n	8001fdc <__sfputs_r+0xa>
 8001ff4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001ff8 <_vfiprintf_r>:
 8001ff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ffc:	460d      	mov	r5, r1
 8001ffe:	b09d      	sub	sp, #116	; 0x74
 8002000:	4614      	mov	r4, r2
 8002002:	4698      	mov	r8, r3
 8002004:	4606      	mov	r6, r0
 8002006:	b118      	cbz	r0, 8002010 <_vfiprintf_r+0x18>
 8002008:	6983      	ldr	r3, [r0, #24]
 800200a:	b90b      	cbnz	r3, 8002010 <_vfiprintf_r+0x18>
 800200c:	f7ff fde8 	bl	8001be0 <__sinit>
 8002010:	4b89      	ldr	r3, [pc, #548]	; (8002238 <_vfiprintf_r+0x240>)
 8002012:	429d      	cmp	r5, r3
 8002014:	d11b      	bne.n	800204e <_vfiprintf_r+0x56>
 8002016:	6875      	ldr	r5, [r6, #4]
 8002018:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800201a:	07d9      	lsls	r1, r3, #31
 800201c:	d405      	bmi.n	800202a <_vfiprintf_r+0x32>
 800201e:	89ab      	ldrh	r3, [r5, #12]
 8002020:	059a      	lsls	r2, r3, #22
 8002022:	d402      	bmi.n	800202a <_vfiprintf_r+0x32>
 8002024:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002026:	f7ff fe79 	bl	8001d1c <__retarget_lock_acquire_recursive>
 800202a:	89ab      	ldrh	r3, [r5, #12]
 800202c:	071b      	lsls	r3, r3, #28
 800202e:	d501      	bpl.n	8002034 <_vfiprintf_r+0x3c>
 8002030:	692b      	ldr	r3, [r5, #16]
 8002032:	b9eb      	cbnz	r3, 8002070 <_vfiprintf_r+0x78>
 8002034:	4629      	mov	r1, r5
 8002036:	4630      	mov	r0, r6
 8002038:	f7ff fc4e 	bl	80018d8 <__swsetup_r>
 800203c:	b1c0      	cbz	r0, 8002070 <_vfiprintf_r+0x78>
 800203e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002040:	07dc      	lsls	r4, r3, #31
 8002042:	d50e      	bpl.n	8002062 <_vfiprintf_r+0x6a>
 8002044:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002048:	b01d      	add	sp, #116	; 0x74
 800204a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800204e:	4b7b      	ldr	r3, [pc, #492]	; (800223c <_vfiprintf_r+0x244>)
 8002050:	429d      	cmp	r5, r3
 8002052:	d101      	bne.n	8002058 <_vfiprintf_r+0x60>
 8002054:	68b5      	ldr	r5, [r6, #8]
 8002056:	e7df      	b.n	8002018 <_vfiprintf_r+0x20>
 8002058:	4b79      	ldr	r3, [pc, #484]	; (8002240 <_vfiprintf_r+0x248>)
 800205a:	429d      	cmp	r5, r3
 800205c:	bf08      	it	eq
 800205e:	68f5      	ldreq	r5, [r6, #12]
 8002060:	e7da      	b.n	8002018 <_vfiprintf_r+0x20>
 8002062:	89ab      	ldrh	r3, [r5, #12]
 8002064:	0598      	lsls	r0, r3, #22
 8002066:	d4ed      	bmi.n	8002044 <_vfiprintf_r+0x4c>
 8002068:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800206a:	f7ff fe58 	bl	8001d1e <__retarget_lock_release_recursive>
 800206e:	e7e9      	b.n	8002044 <_vfiprintf_r+0x4c>
 8002070:	2300      	movs	r3, #0
 8002072:	9309      	str	r3, [sp, #36]	; 0x24
 8002074:	2320      	movs	r3, #32
 8002076:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800207a:	f8cd 800c 	str.w	r8, [sp, #12]
 800207e:	2330      	movs	r3, #48	; 0x30
 8002080:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8002244 <_vfiprintf_r+0x24c>
 8002084:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002088:	f04f 0901 	mov.w	r9, #1
 800208c:	4623      	mov	r3, r4
 800208e:	469a      	mov	sl, r3
 8002090:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002094:	b10a      	cbz	r2, 800209a <_vfiprintf_r+0xa2>
 8002096:	2a25      	cmp	r2, #37	; 0x25
 8002098:	d1f9      	bne.n	800208e <_vfiprintf_r+0x96>
 800209a:	ebba 0b04 	subs.w	fp, sl, r4
 800209e:	d00b      	beq.n	80020b8 <_vfiprintf_r+0xc0>
 80020a0:	465b      	mov	r3, fp
 80020a2:	4622      	mov	r2, r4
 80020a4:	4629      	mov	r1, r5
 80020a6:	4630      	mov	r0, r6
 80020a8:	f7ff ff93 	bl	8001fd2 <__sfputs_r>
 80020ac:	3001      	adds	r0, #1
 80020ae:	f000 80aa 	beq.w	8002206 <_vfiprintf_r+0x20e>
 80020b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80020b4:	445a      	add	r2, fp
 80020b6:	9209      	str	r2, [sp, #36]	; 0x24
 80020b8:	f89a 3000 	ldrb.w	r3, [sl]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	f000 80a2 	beq.w	8002206 <_vfiprintf_r+0x20e>
 80020c2:	2300      	movs	r3, #0
 80020c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80020c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80020cc:	f10a 0a01 	add.w	sl, sl, #1
 80020d0:	9304      	str	r3, [sp, #16]
 80020d2:	9307      	str	r3, [sp, #28]
 80020d4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80020d8:	931a      	str	r3, [sp, #104]	; 0x68
 80020da:	4654      	mov	r4, sl
 80020dc:	2205      	movs	r2, #5
 80020de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80020e2:	4858      	ldr	r0, [pc, #352]	; (8002244 <_vfiprintf_r+0x24c>)
 80020e4:	f7fe f87c 	bl	80001e0 <memchr>
 80020e8:	9a04      	ldr	r2, [sp, #16]
 80020ea:	b9d8      	cbnz	r0, 8002124 <_vfiprintf_r+0x12c>
 80020ec:	06d1      	lsls	r1, r2, #27
 80020ee:	bf44      	itt	mi
 80020f0:	2320      	movmi	r3, #32
 80020f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80020f6:	0713      	lsls	r3, r2, #28
 80020f8:	bf44      	itt	mi
 80020fa:	232b      	movmi	r3, #43	; 0x2b
 80020fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002100:	f89a 3000 	ldrb.w	r3, [sl]
 8002104:	2b2a      	cmp	r3, #42	; 0x2a
 8002106:	d015      	beq.n	8002134 <_vfiprintf_r+0x13c>
 8002108:	9a07      	ldr	r2, [sp, #28]
 800210a:	4654      	mov	r4, sl
 800210c:	2000      	movs	r0, #0
 800210e:	f04f 0c0a 	mov.w	ip, #10
 8002112:	4621      	mov	r1, r4
 8002114:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002118:	3b30      	subs	r3, #48	; 0x30
 800211a:	2b09      	cmp	r3, #9
 800211c:	d94e      	bls.n	80021bc <_vfiprintf_r+0x1c4>
 800211e:	b1b0      	cbz	r0, 800214e <_vfiprintf_r+0x156>
 8002120:	9207      	str	r2, [sp, #28]
 8002122:	e014      	b.n	800214e <_vfiprintf_r+0x156>
 8002124:	eba0 0308 	sub.w	r3, r0, r8
 8002128:	fa09 f303 	lsl.w	r3, r9, r3
 800212c:	4313      	orrs	r3, r2
 800212e:	9304      	str	r3, [sp, #16]
 8002130:	46a2      	mov	sl, r4
 8002132:	e7d2      	b.n	80020da <_vfiprintf_r+0xe2>
 8002134:	9b03      	ldr	r3, [sp, #12]
 8002136:	1d19      	adds	r1, r3, #4
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	9103      	str	r1, [sp, #12]
 800213c:	2b00      	cmp	r3, #0
 800213e:	bfbb      	ittet	lt
 8002140:	425b      	neglt	r3, r3
 8002142:	f042 0202 	orrlt.w	r2, r2, #2
 8002146:	9307      	strge	r3, [sp, #28]
 8002148:	9307      	strlt	r3, [sp, #28]
 800214a:	bfb8      	it	lt
 800214c:	9204      	strlt	r2, [sp, #16]
 800214e:	7823      	ldrb	r3, [r4, #0]
 8002150:	2b2e      	cmp	r3, #46	; 0x2e
 8002152:	d10c      	bne.n	800216e <_vfiprintf_r+0x176>
 8002154:	7863      	ldrb	r3, [r4, #1]
 8002156:	2b2a      	cmp	r3, #42	; 0x2a
 8002158:	d135      	bne.n	80021c6 <_vfiprintf_r+0x1ce>
 800215a:	9b03      	ldr	r3, [sp, #12]
 800215c:	1d1a      	adds	r2, r3, #4
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	9203      	str	r2, [sp, #12]
 8002162:	2b00      	cmp	r3, #0
 8002164:	bfb8      	it	lt
 8002166:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800216a:	3402      	adds	r4, #2
 800216c:	9305      	str	r3, [sp, #20]
 800216e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8002248 <_vfiprintf_r+0x250>
 8002172:	7821      	ldrb	r1, [r4, #0]
 8002174:	2203      	movs	r2, #3
 8002176:	4650      	mov	r0, sl
 8002178:	f7fe f832 	bl	80001e0 <memchr>
 800217c:	b140      	cbz	r0, 8002190 <_vfiprintf_r+0x198>
 800217e:	2340      	movs	r3, #64	; 0x40
 8002180:	eba0 000a 	sub.w	r0, r0, sl
 8002184:	fa03 f000 	lsl.w	r0, r3, r0
 8002188:	9b04      	ldr	r3, [sp, #16]
 800218a:	4303      	orrs	r3, r0
 800218c:	3401      	adds	r4, #1
 800218e:	9304      	str	r3, [sp, #16]
 8002190:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002194:	482d      	ldr	r0, [pc, #180]	; (800224c <_vfiprintf_r+0x254>)
 8002196:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800219a:	2206      	movs	r2, #6
 800219c:	f7fe f820 	bl	80001e0 <memchr>
 80021a0:	2800      	cmp	r0, #0
 80021a2:	d03f      	beq.n	8002224 <_vfiprintf_r+0x22c>
 80021a4:	4b2a      	ldr	r3, [pc, #168]	; (8002250 <_vfiprintf_r+0x258>)
 80021a6:	bb1b      	cbnz	r3, 80021f0 <_vfiprintf_r+0x1f8>
 80021a8:	9b03      	ldr	r3, [sp, #12]
 80021aa:	3307      	adds	r3, #7
 80021ac:	f023 0307 	bic.w	r3, r3, #7
 80021b0:	3308      	adds	r3, #8
 80021b2:	9303      	str	r3, [sp, #12]
 80021b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80021b6:	443b      	add	r3, r7
 80021b8:	9309      	str	r3, [sp, #36]	; 0x24
 80021ba:	e767      	b.n	800208c <_vfiprintf_r+0x94>
 80021bc:	fb0c 3202 	mla	r2, ip, r2, r3
 80021c0:	460c      	mov	r4, r1
 80021c2:	2001      	movs	r0, #1
 80021c4:	e7a5      	b.n	8002112 <_vfiprintf_r+0x11a>
 80021c6:	2300      	movs	r3, #0
 80021c8:	3401      	adds	r4, #1
 80021ca:	9305      	str	r3, [sp, #20]
 80021cc:	4619      	mov	r1, r3
 80021ce:	f04f 0c0a 	mov.w	ip, #10
 80021d2:	4620      	mov	r0, r4
 80021d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80021d8:	3a30      	subs	r2, #48	; 0x30
 80021da:	2a09      	cmp	r2, #9
 80021dc:	d903      	bls.n	80021e6 <_vfiprintf_r+0x1ee>
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d0c5      	beq.n	800216e <_vfiprintf_r+0x176>
 80021e2:	9105      	str	r1, [sp, #20]
 80021e4:	e7c3      	b.n	800216e <_vfiprintf_r+0x176>
 80021e6:	fb0c 2101 	mla	r1, ip, r1, r2
 80021ea:	4604      	mov	r4, r0
 80021ec:	2301      	movs	r3, #1
 80021ee:	e7f0      	b.n	80021d2 <_vfiprintf_r+0x1da>
 80021f0:	ab03      	add	r3, sp, #12
 80021f2:	9300      	str	r3, [sp, #0]
 80021f4:	462a      	mov	r2, r5
 80021f6:	4b17      	ldr	r3, [pc, #92]	; (8002254 <_vfiprintf_r+0x25c>)
 80021f8:	a904      	add	r1, sp, #16
 80021fa:	4630      	mov	r0, r6
 80021fc:	f3af 8000 	nop.w
 8002200:	4607      	mov	r7, r0
 8002202:	1c78      	adds	r0, r7, #1
 8002204:	d1d6      	bne.n	80021b4 <_vfiprintf_r+0x1bc>
 8002206:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002208:	07d9      	lsls	r1, r3, #31
 800220a:	d405      	bmi.n	8002218 <_vfiprintf_r+0x220>
 800220c:	89ab      	ldrh	r3, [r5, #12]
 800220e:	059a      	lsls	r2, r3, #22
 8002210:	d402      	bmi.n	8002218 <_vfiprintf_r+0x220>
 8002212:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002214:	f7ff fd83 	bl	8001d1e <__retarget_lock_release_recursive>
 8002218:	89ab      	ldrh	r3, [r5, #12]
 800221a:	065b      	lsls	r3, r3, #25
 800221c:	f53f af12 	bmi.w	8002044 <_vfiprintf_r+0x4c>
 8002220:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002222:	e711      	b.n	8002048 <_vfiprintf_r+0x50>
 8002224:	ab03      	add	r3, sp, #12
 8002226:	9300      	str	r3, [sp, #0]
 8002228:	462a      	mov	r2, r5
 800222a:	4b0a      	ldr	r3, [pc, #40]	; (8002254 <_vfiprintf_r+0x25c>)
 800222c:	a904      	add	r1, sp, #16
 800222e:	4630      	mov	r0, r6
 8002230:	f000 f880 	bl	8002334 <_printf_i>
 8002234:	e7e4      	b.n	8002200 <_vfiprintf_r+0x208>
 8002236:	bf00      	nop
 8002238:	08002aac 	.word	0x08002aac
 800223c:	08002acc 	.word	0x08002acc
 8002240:	08002a8c 	.word	0x08002a8c
 8002244:	08002aec 	.word	0x08002aec
 8002248:	08002af2 	.word	0x08002af2
 800224c:	08002af6 	.word	0x08002af6
 8002250:	00000000 	.word	0x00000000
 8002254:	08001fd3 	.word	0x08001fd3

08002258 <_printf_common>:
 8002258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800225c:	4616      	mov	r6, r2
 800225e:	4699      	mov	r9, r3
 8002260:	688a      	ldr	r2, [r1, #8]
 8002262:	690b      	ldr	r3, [r1, #16]
 8002264:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002268:	4293      	cmp	r3, r2
 800226a:	bfb8      	it	lt
 800226c:	4613      	movlt	r3, r2
 800226e:	6033      	str	r3, [r6, #0]
 8002270:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002274:	4607      	mov	r7, r0
 8002276:	460c      	mov	r4, r1
 8002278:	b10a      	cbz	r2, 800227e <_printf_common+0x26>
 800227a:	3301      	adds	r3, #1
 800227c:	6033      	str	r3, [r6, #0]
 800227e:	6823      	ldr	r3, [r4, #0]
 8002280:	0699      	lsls	r1, r3, #26
 8002282:	bf42      	ittt	mi
 8002284:	6833      	ldrmi	r3, [r6, #0]
 8002286:	3302      	addmi	r3, #2
 8002288:	6033      	strmi	r3, [r6, #0]
 800228a:	6825      	ldr	r5, [r4, #0]
 800228c:	f015 0506 	ands.w	r5, r5, #6
 8002290:	d106      	bne.n	80022a0 <_printf_common+0x48>
 8002292:	f104 0a19 	add.w	sl, r4, #25
 8002296:	68e3      	ldr	r3, [r4, #12]
 8002298:	6832      	ldr	r2, [r6, #0]
 800229a:	1a9b      	subs	r3, r3, r2
 800229c:	42ab      	cmp	r3, r5
 800229e:	dc26      	bgt.n	80022ee <_printf_common+0x96>
 80022a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80022a4:	1e13      	subs	r3, r2, #0
 80022a6:	6822      	ldr	r2, [r4, #0]
 80022a8:	bf18      	it	ne
 80022aa:	2301      	movne	r3, #1
 80022ac:	0692      	lsls	r2, r2, #26
 80022ae:	d42b      	bmi.n	8002308 <_printf_common+0xb0>
 80022b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80022b4:	4649      	mov	r1, r9
 80022b6:	4638      	mov	r0, r7
 80022b8:	47c0      	blx	r8
 80022ba:	3001      	adds	r0, #1
 80022bc:	d01e      	beq.n	80022fc <_printf_common+0xa4>
 80022be:	6823      	ldr	r3, [r4, #0]
 80022c0:	68e5      	ldr	r5, [r4, #12]
 80022c2:	6832      	ldr	r2, [r6, #0]
 80022c4:	f003 0306 	and.w	r3, r3, #6
 80022c8:	2b04      	cmp	r3, #4
 80022ca:	bf08      	it	eq
 80022cc:	1aad      	subeq	r5, r5, r2
 80022ce:	68a3      	ldr	r3, [r4, #8]
 80022d0:	6922      	ldr	r2, [r4, #16]
 80022d2:	bf0c      	ite	eq
 80022d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80022d8:	2500      	movne	r5, #0
 80022da:	4293      	cmp	r3, r2
 80022dc:	bfc4      	itt	gt
 80022de:	1a9b      	subgt	r3, r3, r2
 80022e0:	18ed      	addgt	r5, r5, r3
 80022e2:	2600      	movs	r6, #0
 80022e4:	341a      	adds	r4, #26
 80022e6:	42b5      	cmp	r5, r6
 80022e8:	d11a      	bne.n	8002320 <_printf_common+0xc8>
 80022ea:	2000      	movs	r0, #0
 80022ec:	e008      	b.n	8002300 <_printf_common+0xa8>
 80022ee:	2301      	movs	r3, #1
 80022f0:	4652      	mov	r2, sl
 80022f2:	4649      	mov	r1, r9
 80022f4:	4638      	mov	r0, r7
 80022f6:	47c0      	blx	r8
 80022f8:	3001      	adds	r0, #1
 80022fa:	d103      	bne.n	8002304 <_printf_common+0xac>
 80022fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002304:	3501      	adds	r5, #1
 8002306:	e7c6      	b.n	8002296 <_printf_common+0x3e>
 8002308:	18e1      	adds	r1, r4, r3
 800230a:	1c5a      	adds	r2, r3, #1
 800230c:	2030      	movs	r0, #48	; 0x30
 800230e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002312:	4422      	add	r2, r4
 8002314:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002318:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800231c:	3302      	adds	r3, #2
 800231e:	e7c7      	b.n	80022b0 <_printf_common+0x58>
 8002320:	2301      	movs	r3, #1
 8002322:	4622      	mov	r2, r4
 8002324:	4649      	mov	r1, r9
 8002326:	4638      	mov	r0, r7
 8002328:	47c0      	blx	r8
 800232a:	3001      	adds	r0, #1
 800232c:	d0e6      	beq.n	80022fc <_printf_common+0xa4>
 800232e:	3601      	adds	r6, #1
 8002330:	e7d9      	b.n	80022e6 <_printf_common+0x8e>
	...

08002334 <_printf_i>:
 8002334:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002338:	7e0f      	ldrb	r7, [r1, #24]
 800233a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800233c:	2f78      	cmp	r7, #120	; 0x78
 800233e:	4691      	mov	r9, r2
 8002340:	4680      	mov	r8, r0
 8002342:	460c      	mov	r4, r1
 8002344:	469a      	mov	sl, r3
 8002346:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800234a:	d807      	bhi.n	800235c <_printf_i+0x28>
 800234c:	2f62      	cmp	r7, #98	; 0x62
 800234e:	d80a      	bhi.n	8002366 <_printf_i+0x32>
 8002350:	2f00      	cmp	r7, #0
 8002352:	f000 80d8 	beq.w	8002506 <_printf_i+0x1d2>
 8002356:	2f58      	cmp	r7, #88	; 0x58
 8002358:	f000 80a3 	beq.w	80024a2 <_printf_i+0x16e>
 800235c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002360:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002364:	e03a      	b.n	80023dc <_printf_i+0xa8>
 8002366:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800236a:	2b15      	cmp	r3, #21
 800236c:	d8f6      	bhi.n	800235c <_printf_i+0x28>
 800236e:	a101      	add	r1, pc, #4	; (adr r1, 8002374 <_printf_i+0x40>)
 8002370:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002374:	080023cd 	.word	0x080023cd
 8002378:	080023e1 	.word	0x080023e1
 800237c:	0800235d 	.word	0x0800235d
 8002380:	0800235d 	.word	0x0800235d
 8002384:	0800235d 	.word	0x0800235d
 8002388:	0800235d 	.word	0x0800235d
 800238c:	080023e1 	.word	0x080023e1
 8002390:	0800235d 	.word	0x0800235d
 8002394:	0800235d 	.word	0x0800235d
 8002398:	0800235d 	.word	0x0800235d
 800239c:	0800235d 	.word	0x0800235d
 80023a0:	080024ed 	.word	0x080024ed
 80023a4:	08002411 	.word	0x08002411
 80023a8:	080024cf 	.word	0x080024cf
 80023ac:	0800235d 	.word	0x0800235d
 80023b0:	0800235d 	.word	0x0800235d
 80023b4:	0800250f 	.word	0x0800250f
 80023b8:	0800235d 	.word	0x0800235d
 80023bc:	08002411 	.word	0x08002411
 80023c0:	0800235d 	.word	0x0800235d
 80023c4:	0800235d 	.word	0x0800235d
 80023c8:	080024d7 	.word	0x080024d7
 80023cc:	682b      	ldr	r3, [r5, #0]
 80023ce:	1d1a      	adds	r2, r3, #4
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	602a      	str	r2, [r5, #0]
 80023d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80023d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80023dc:	2301      	movs	r3, #1
 80023de:	e0a3      	b.n	8002528 <_printf_i+0x1f4>
 80023e0:	6820      	ldr	r0, [r4, #0]
 80023e2:	6829      	ldr	r1, [r5, #0]
 80023e4:	0606      	lsls	r6, r0, #24
 80023e6:	f101 0304 	add.w	r3, r1, #4
 80023ea:	d50a      	bpl.n	8002402 <_printf_i+0xce>
 80023ec:	680e      	ldr	r6, [r1, #0]
 80023ee:	602b      	str	r3, [r5, #0]
 80023f0:	2e00      	cmp	r6, #0
 80023f2:	da03      	bge.n	80023fc <_printf_i+0xc8>
 80023f4:	232d      	movs	r3, #45	; 0x2d
 80023f6:	4276      	negs	r6, r6
 80023f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80023fc:	485e      	ldr	r0, [pc, #376]	; (8002578 <_printf_i+0x244>)
 80023fe:	230a      	movs	r3, #10
 8002400:	e019      	b.n	8002436 <_printf_i+0x102>
 8002402:	680e      	ldr	r6, [r1, #0]
 8002404:	602b      	str	r3, [r5, #0]
 8002406:	f010 0f40 	tst.w	r0, #64	; 0x40
 800240a:	bf18      	it	ne
 800240c:	b236      	sxthne	r6, r6
 800240e:	e7ef      	b.n	80023f0 <_printf_i+0xbc>
 8002410:	682b      	ldr	r3, [r5, #0]
 8002412:	6820      	ldr	r0, [r4, #0]
 8002414:	1d19      	adds	r1, r3, #4
 8002416:	6029      	str	r1, [r5, #0]
 8002418:	0601      	lsls	r1, r0, #24
 800241a:	d501      	bpl.n	8002420 <_printf_i+0xec>
 800241c:	681e      	ldr	r6, [r3, #0]
 800241e:	e002      	b.n	8002426 <_printf_i+0xf2>
 8002420:	0646      	lsls	r6, r0, #25
 8002422:	d5fb      	bpl.n	800241c <_printf_i+0xe8>
 8002424:	881e      	ldrh	r6, [r3, #0]
 8002426:	4854      	ldr	r0, [pc, #336]	; (8002578 <_printf_i+0x244>)
 8002428:	2f6f      	cmp	r7, #111	; 0x6f
 800242a:	bf0c      	ite	eq
 800242c:	2308      	moveq	r3, #8
 800242e:	230a      	movne	r3, #10
 8002430:	2100      	movs	r1, #0
 8002432:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002436:	6865      	ldr	r5, [r4, #4]
 8002438:	60a5      	str	r5, [r4, #8]
 800243a:	2d00      	cmp	r5, #0
 800243c:	bfa2      	ittt	ge
 800243e:	6821      	ldrge	r1, [r4, #0]
 8002440:	f021 0104 	bicge.w	r1, r1, #4
 8002444:	6021      	strge	r1, [r4, #0]
 8002446:	b90e      	cbnz	r6, 800244c <_printf_i+0x118>
 8002448:	2d00      	cmp	r5, #0
 800244a:	d04d      	beq.n	80024e8 <_printf_i+0x1b4>
 800244c:	4615      	mov	r5, r2
 800244e:	fbb6 f1f3 	udiv	r1, r6, r3
 8002452:	fb03 6711 	mls	r7, r3, r1, r6
 8002456:	5dc7      	ldrb	r7, [r0, r7]
 8002458:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800245c:	4637      	mov	r7, r6
 800245e:	42bb      	cmp	r3, r7
 8002460:	460e      	mov	r6, r1
 8002462:	d9f4      	bls.n	800244e <_printf_i+0x11a>
 8002464:	2b08      	cmp	r3, #8
 8002466:	d10b      	bne.n	8002480 <_printf_i+0x14c>
 8002468:	6823      	ldr	r3, [r4, #0]
 800246a:	07de      	lsls	r6, r3, #31
 800246c:	d508      	bpl.n	8002480 <_printf_i+0x14c>
 800246e:	6923      	ldr	r3, [r4, #16]
 8002470:	6861      	ldr	r1, [r4, #4]
 8002472:	4299      	cmp	r1, r3
 8002474:	bfde      	ittt	le
 8002476:	2330      	movle	r3, #48	; 0x30
 8002478:	f805 3c01 	strble.w	r3, [r5, #-1]
 800247c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8002480:	1b52      	subs	r2, r2, r5
 8002482:	6122      	str	r2, [r4, #16]
 8002484:	f8cd a000 	str.w	sl, [sp]
 8002488:	464b      	mov	r3, r9
 800248a:	aa03      	add	r2, sp, #12
 800248c:	4621      	mov	r1, r4
 800248e:	4640      	mov	r0, r8
 8002490:	f7ff fee2 	bl	8002258 <_printf_common>
 8002494:	3001      	adds	r0, #1
 8002496:	d14c      	bne.n	8002532 <_printf_i+0x1fe>
 8002498:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800249c:	b004      	add	sp, #16
 800249e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80024a2:	4835      	ldr	r0, [pc, #212]	; (8002578 <_printf_i+0x244>)
 80024a4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80024a8:	6829      	ldr	r1, [r5, #0]
 80024aa:	6823      	ldr	r3, [r4, #0]
 80024ac:	f851 6b04 	ldr.w	r6, [r1], #4
 80024b0:	6029      	str	r1, [r5, #0]
 80024b2:	061d      	lsls	r5, r3, #24
 80024b4:	d514      	bpl.n	80024e0 <_printf_i+0x1ac>
 80024b6:	07df      	lsls	r7, r3, #31
 80024b8:	bf44      	itt	mi
 80024ba:	f043 0320 	orrmi.w	r3, r3, #32
 80024be:	6023      	strmi	r3, [r4, #0]
 80024c0:	b91e      	cbnz	r6, 80024ca <_printf_i+0x196>
 80024c2:	6823      	ldr	r3, [r4, #0]
 80024c4:	f023 0320 	bic.w	r3, r3, #32
 80024c8:	6023      	str	r3, [r4, #0]
 80024ca:	2310      	movs	r3, #16
 80024cc:	e7b0      	b.n	8002430 <_printf_i+0xfc>
 80024ce:	6823      	ldr	r3, [r4, #0]
 80024d0:	f043 0320 	orr.w	r3, r3, #32
 80024d4:	6023      	str	r3, [r4, #0]
 80024d6:	2378      	movs	r3, #120	; 0x78
 80024d8:	4828      	ldr	r0, [pc, #160]	; (800257c <_printf_i+0x248>)
 80024da:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80024de:	e7e3      	b.n	80024a8 <_printf_i+0x174>
 80024e0:	0659      	lsls	r1, r3, #25
 80024e2:	bf48      	it	mi
 80024e4:	b2b6      	uxthmi	r6, r6
 80024e6:	e7e6      	b.n	80024b6 <_printf_i+0x182>
 80024e8:	4615      	mov	r5, r2
 80024ea:	e7bb      	b.n	8002464 <_printf_i+0x130>
 80024ec:	682b      	ldr	r3, [r5, #0]
 80024ee:	6826      	ldr	r6, [r4, #0]
 80024f0:	6961      	ldr	r1, [r4, #20]
 80024f2:	1d18      	adds	r0, r3, #4
 80024f4:	6028      	str	r0, [r5, #0]
 80024f6:	0635      	lsls	r5, r6, #24
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	d501      	bpl.n	8002500 <_printf_i+0x1cc>
 80024fc:	6019      	str	r1, [r3, #0]
 80024fe:	e002      	b.n	8002506 <_printf_i+0x1d2>
 8002500:	0670      	lsls	r0, r6, #25
 8002502:	d5fb      	bpl.n	80024fc <_printf_i+0x1c8>
 8002504:	8019      	strh	r1, [r3, #0]
 8002506:	2300      	movs	r3, #0
 8002508:	6123      	str	r3, [r4, #16]
 800250a:	4615      	mov	r5, r2
 800250c:	e7ba      	b.n	8002484 <_printf_i+0x150>
 800250e:	682b      	ldr	r3, [r5, #0]
 8002510:	1d1a      	adds	r2, r3, #4
 8002512:	602a      	str	r2, [r5, #0]
 8002514:	681d      	ldr	r5, [r3, #0]
 8002516:	6862      	ldr	r2, [r4, #4]
 8002518:	2100      	movs	r1, #0
 800251a:	4628      	mov	r0, r5
 800251c:	f7fd fe60 	bl	80001e0 <memchr>
 8002520:	b108      	cbz	r0, 8002526 <_printf_i+0x1f2>
 8002522:	1b40      	subs	r0, r0, r5
 8002524:	6060      	str	r0, [r4, #4]
 8002526:	6863      	ldr	r3, [r4, #4]
 8002528:	6123      	str	r3, [r4, #16]
 800252a:	2300      	movs	r3, #0
 800252c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002530:	e7a8      	b.n	8002484 <_printf_i+0x150>
 8002532:	6923      	ldr	r3, [r4, #16]
 8002534:	462a      	mov	r2, r5
 8002536:	4649      	mov	r1, r9
 8002538:	4640      	mov	r0, r8
 800253a:	47d0      	blx	sl
 800253c:	3001      	adds	r0, #1
 800253e:	d0ab      	beq.n	8002498 <_printf_i+0x164>
 8002540:	6823      	ldr	r3, [r4, #0]
 8002542:	079b      	lsls	r3, r3, #30
 8002544:	d413      	bmi.n	800256e <_printf_i+0x23a>
 8002546:	68e0      	ldr	r0, [r4, #12]
 8002548:	9b03      	ldr	r3, [sp, #12]
 800254a:	4298      	cmp	r0, r3
 800254c:	bfb8      	it	lt
 800254e:	4618      	movlt	r0, r3
 8002550:	e7a4      	b.n	800249c <_printf_i+0x168>
 8002552:	2301      	movs	r3, #1
 8002554:	4632      	mov	r2, r6
 8002556:	4649      	mov	r1, r9
 8002558:	4640      	mov	r0, r8
 800255a:	47d0      	blx	sl
 800255c:	3001      	adds	r0, #1
 800255e:	d09b      	beq.n	8002498 <_printf_i+0x164>
 8002560:	3501      	adds	r5, #1
 8002562:	68e3      	ldr	r3, [r4, #12]
 8002564:	9903      	ldr	r1, [sp, #12]
 8002566:	1a5b      	subs	r3, r3, r1
 8002568:	42ab      	cmp	r3, r5
 800256a:	dcf2      	bgt.n	8002552 <_printf_i+0x21e>
 800256c:	e7eb      	b.n	8002546 <_printf_i+0x212>
 800256e:	2500      	movs	r5, #0
 8002570:	f104 0619 	add.w	r6, r4, #25
 8002574:	e7f5      	b.n	8002562 <_printf_i+0x22e>
 8002576:	bf00      	nop
 8002578:	08002afd 	.word	0x08002afd
 800257c:	08002b0e 	.word	0x08002b0e

08002580 <_sbrk_r>:
 8002580:	b538      	push	{r3, r4, r5, lr}
 8002582:	4d06      	ldr	r5, [pc, #24]	; (800259c <_sbrk_r+0x1c>)
 8002584:	2300      	movs	r3, #0
 8002586:	4604      	mov	r4, r0
 8002588:	4608      	mov	r0, r1
 800258a:	602b      	str	r3, [r5, #0]
 800258c:	f7fd fe78 	bl	8000280 <_sbrk>
 8002590:	1c43      	adds	r3, r0, #1
 8002592:	d102      	bne.n	800259a <_sbrk_r+0x1a>
 8002594:	682b      	ldr	r3, [r5, #0]
 8002596:	b103      	cbz	r3, 800259a <_sbrk_r+0x1a>
 8002598:	6023      	str	r3, [r4, #0]
 800259a:	bd38      	pop	{r3, r4, r5, pc}
 800259c:	200000c8 	.word	0x200000c8

080025a0 <__sread>:
 80025a0:	b510      	push	{r4, lr}
 80025a2:	460c      	mov	r4, r1
 80025a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80025a8:	f000 f8a0 	bl	80026ec <_read_r>
 80025ac:	2800      	cmp	r0, #0
 80025ae:	bfab      	itete	ge
 80025b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80025b2:	89a3      	ldrhlt	r3, [r4, #12]
 80025b4:	181b      	addge	r3, r3, r0
 80025b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80025ba:	bfac      	ite	ge
 80025bc:	6563      	strge	r3, [r4, #84]	; 0x54
 80025be:	81a3      	strhlt	r3, [r4, #12]
 80025c0:	bd10      	pop	{r4, pc}

080025c2 <__swrite>:
 80025c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80025c6:	461f      	mov	r7, r3
 80025c8:	898b      	ldrh	r3, [r1, #12]
 80025ca:	05db      	lsls	r3, r3, #23
 80025cc:	4605      	mov	r5, r0
 80025ce:	460c      	mov	r4, r1
 80025d0:	4616      	mov	r6, r2
 80025d2:	d505      	bpl.n	80025e0 <__swrite+0x1e>
 80025d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80025d8:	2302      	movs	r3, #2
 80025da:	2200      	movs	r2, #0
 80025dc:	f000 f868 	bl	80026b0 <_lseek_r>
 80025e0:	89a3      	ldrh	r3, [r4, #12]
 80025e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80025e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80025ea:	81a3      	strh	r3, [r4, #12]
 80025ec:	4632      	mov	r2, r6
 80025ee:	463b      	mov	r3, r7
 80025f0:	4628      	mov	r0, r5
 80025f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80025f6:	f000 b817 	b.w	8002628 <_write_r>

080025fa <__sseek>:
 80025fa:	b510      	push	{r4, lr}
 80025fc:	460c      	mov	r4, r1
 80025fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002602:	f000 f855 	bl	80026b0 <_lseek_r>
 8002606:	1c43      	adds	r3, r0, #1
 8002608:	89a3      	ldrh	r3, [r4, #12]
 800260a:	bf15      	itete	ne
 800260c:	6560      	strne	r0, [r4, #84]	; 0x54
 800260e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002612:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002616:	81a3      	strheq	r3, [r4, #12]
 8002618:	bf18      	it	ne
 800261a:	81a3      	strhne	r3, [r4, #12]
 800261c:	bd10      	pop	{r4, pc}

0800261e <__sclose>:
 800261e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002622:	f000 b813 	b.w	800264c <_close_r>
	...

08002628 <_write_r>:
 8002628:	b538      	push	{r3, r4, r5, lr}
 800262a:	4d07      	ldr	r5, [pc, #28]	; (8002648 <_write_r+0x20>)
 800262c:	4604      	mov	r4, r0
 800262e:	4608      	mov	r0, r1
 8002630:	4611      	mov	r1, r2
 8002632:	2200      	movs	r2, #0
 8002634:	602a      	str	r2, [r5, #0]
 8002636:	461a      	mov	r2, r3
 8002638:	f000 f90f 	bl	800285a <_write>
 800263c:	1c43      	adds	r3, r0, #1
 800263e:	d102      	bne.n	8002646 <_write_r+0x1e>
 8002640:	682b      	ldr	r3, [r5, #0]
 8002642:	b103      	cbz	r3, 8002646 <_write_r+0x1e>
 8002644:	6023      	str	r3, [r4, #0]
 8002646:	bd38      	pop	{r3, r4, r5, pc}
 8002648:	200000c8 	.word	0x200000c8

0800264c <_close_r>:
 800264c:	b538      	push	{r3, r4, r5, lr}
 800264e:	4d06      	ldr	r5, [pc, #24]	; (8002668 <_close_r+0x1c>)
 8002650:	2300      	movs	r3, #0
 8002652:	4604      	mov	r4, r0
 8002654:	4608      	mov	r0, r1
 8002656:	602b      	str	r3, [r5, #0]
 8002658:	f000 f92c 	bl	80028b4 <_close>
 800265c:	1c43      	adds	r3, r0, #1
 800265e:	d102      	bne.n	8002666 <_close_r+0x1a>
 8002660:	682b      	ldr	r3, [r5, #0]
 8002662:	b103      	cbz	r3, 8002666 <_close_r+0x1a>
 8002664:	6023      	str	r3, [r4, #0]
 8002666:	bd38      	pop	{r3, r4, r5, pc}
 8002668:	200000c8 	.word	0x200000c8

0800266c <_fstat_r>:
 800266c:	b538      	push	{r3, r4, r5, lr}
 800266e:	4d07      	ldr	r5, [pc, #28]	; (800268c <_fstat_r+0x20>)
 8002670:	2300      	movs	r3, #0
 8002672:	4604      	mov	r4, r0
 8002674:	4608      	mov	r0, r1
 8002676:	4611      	mov	r1, r2
 8002678:	602b      	str	r3, [r5, #0]
 800267a:	f000 f962 	bl	8002942 <_fstat>
 800267e:	1c43      	adds	r3, r0, #1
 8002680:	d102      	bne.n	8002688 <_fstat_r+0x1c>
 8002682:	682b      	ldr	r3, [r5, #0]
 8002684:	b103      	cbz	r3, 8002688 <_fstat_r+0x1c>
 8002686:	6023      	str	r3, [r4, #0]
 8002688:	bd38      	pop	{r3, r4, r5, pc}
 800268a:	bf00      	nop
 800268c:	200000c8 	.word	0x200000c8

08002690 <_isatty_r>:
 8002690:	b538      	push	{r3, r4, r5, lr}
 8002692:	4d06      	ldr	r5, [pc, #24]	; (80026ac <_isatty_r+0x1c>)
 8002694:	2300      	movs	r3, #0
 8002696:	4604      	mov	r4, r0
 8002698:	4608      	mov	r0, r1
 800269a:	602b      	str	r3, [r5, #0]
 800269c:	f000 f95f 	bl	800295e <_isatty>
 80026a0:	1c43      	adds	r3, r0, #1
 80026a2:	d102      	bne.n	80026aa <_isatty_r+0x1a>
 80026a4:	682b      	ldr	r3, [r5, #0]
 80026a6:	b103      	cbz	r3, 80026aa <_isatty_r+0x1a>
 80026a8:	6023      	str	r3, [r4, #0]
 80026aa:	bd38      	pop	{r3, r4, r5, pc}
 80026ac:	200000c8 	.word	0x200000c8

080026b0 <_lseek_r>:
 80026b0:	b538      	push	{r3, r4, r5, lr}
 80026b2:	4d07      	ldr	r5, [pc, #28]	; (80026d0 <_lseek_r+0x20>)
 80026b4:	4604      	mov	r4, r0
 80026b6:	4608      	mov	r0, r1
 80026b8:	4611      	mov	r1, r2
 80026ba:	2200      	movs	r2, #0
 80026bc:	602a      	str	r2, [r5, #0]
 80026be:	461a      	mov	r2, r3
 80026c0:	f000 f8b9 	bl	8002836 <_lseek>
 80026c4:	1c43      	adds	r3, r0, #1
 80026c6:	d102      	bne.n	80026ce <_lseek_r+0x1e>
 80026c8:	682b      	ldr	r3, [r5, #0]
 80026ca:	b103      	cbz	r3, 80026ce <_lseek_r+0x1e>
 80026cc:	6023      	str	r3, [r4, #0]
 80026ce:	bd38      	pop	{r3, r4, r5, pc}
 80026d0:	200000c8 	.word	0x200000c8

080026d4 <__malloc_lock>:
 80026d4:	4801      	ldr	r0, [pc, #4]	; (80026dc <__malloc_lock+0x8>)
 80026d6:	f7ff bb21 	b.w	8001d1c <__retarget_lock_acquire_recursive>
 80026da:	bf00      	nop
 80026dc:	200000bd 	.word	0x200000bd

080026e0 <__malloc_unlock>:
 80026e0:	4801      	ldr	r0, [pc, #4]	; (80026e8 <__malloc_unlock+0x8>)
 80026e2:	f7ff bb1c 	b.w	8001d1e <__retarget_lock_release_recursive>
 80026e6:	bf00      	nop
 80026e8:	200000bd 	.word	0x200000bd

080026ec <_read_r>:
 80026ec:	b538      	push	{r3, r4, r5, lr}
 80026ee:	4d07      	ldr	r5, [pc, #28]	; (800270c <_read_r+0x20>)
 80026f0:	4604      	mov	r4, r0
 80026f2:	4608      	mov	r0, r1
 80026f4:	4611      	mov	r1, r2
 80026f6:	2200      	movs	r2, #0
 80026f8:	602a      	str	r2, [r5, #0]
 80026fa:	461a      	mov	r2, r3
 80026fc:	f000 f845 	bl	800278a <_read>
 8002700:	1c43      	adds	r3, r0, #1
 8002702:	d102      	bne.n	800270a <_read_r+0x1e>
 8002704:	682b      	ldr	r3, [r5, #0]
 8002706:	b103      	cbz	r3, 800270a <_read_r+0x1e>
 8002708:	6023      	str	r3, [r4, #0]
 800270a:	bd38      	pop	{r3, r4, r5, pc}
 800270c:	200000c8 	.word	0x200000c8

08002710 <findslot>:
 8002710:	4b0a      	ldr	r3, [pc, #40]	; (800273c <findslot+0x2c>)
 8002712:	b510      	push	{r4, lr}
 8002714:	4604      	mov	r4, r0
 8002716:	6818      	ldr	r0, [r3, #0]
 8002718:	b118      	cbz	r0, 8002722 <findslot+0x12>
 800271a:	6983      	ldr	r3, [r0, #24]
 800271c:	b90b      	cbnz	r3, 8002722 <findslot+0x12>
 800271e:	f7ff fa5f 	bl	8001be0 <__sinit>
 8002722:	2c13      	cmp	r4, #19
 8002724:	d807      	bhi.n	8002736 <findslot+0x26>
 8002726:	4806      	ldr	r0, [pc, #24]	; (8002740 <findslot+0x30>)
 8002728:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 800272c:	3201      	adds	r2, #1
 800272e:	d002      	beq.n	8002736 <findslot+0x26>
 8002730:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8002734:	bd10      	pop	{r4, pc}
 8002736:	2000      	movs	r0, #0
 8002738:	e7fc      	b.n	8002734 <findslot+0x24>
 800273a:	bf00      	nop
 800273c:	20000000 	.word	0x20000000
 8002740:	200000cc 	.word	0x200000cc

08002744 <error>:
 8002744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002746:	4604      	mov	r4, r0
 8002748:	f7fe ffb4 	bl	80016b4 <__errno>
 800274c:	2613      	movs	r6, #19
 800274e:	4605      	mov	r5, r0
 8002750:	2700      	movs	r7, #0
 8002752:	4630      	mov	r0, r6
 8002754:	4639      	mov	r1, r7
 8002756:	beab      	bkpt	0x00ab
 8002758:	4606      	mov	r6, r0
 800275a:	602e      	str	r6, [r5, #0]
 800275c:	4620      	mov	r0, r4
 800275e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002760 <checkerror>:
 8002760:	1c43      	adds	r3, r0, #1
 8002762:	d101      	bne.n	8002768 <checkerror+0x8>
 8002764:	f7ff bfee 	b.w	8002744 <error>
 8002768:	4770      	bx	lr

0800276a <_swiread>:
 800276a:	b530      	push	{r4, r5, lr}
 800276c:	b085      	sub	sp, #20
 800276e:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8002772:	9203      	str	r2, [sp, #12]
 8002774:	2406      	movs	r4, #6
 8002776:	ad01      	add	r5, sp, #4
 8002778:	4620      	mov	r0, r4
 800277a:	4629      	mov	r1, r5
 800277c:	beab      	bkpt	0x00ab
 800277e:	4604      	mov	r4, r0
 8002780:	4620      	mov	r0, r4
 8002782:	f7ff ffed 	bl	8002760 <checkerror>
 8002786:	b005      	add	sp, #20
 8002788:	bd30      	pop	{r4, r5, pc}

0800278a <_read>:
 800278a:	b570      	push	{r4, r5, r6, lr}
 800278c:	460e      	mov	r6, r1
 800278e:	4615      	mov	r5, r2
 8002790:	f7ff ffbe 	bl	8002710 <findslot>
 8002794:	4604      	mov	r4, r0
 8002796:	b930      	cbnz	r0, 80027a6 <_read+0x1c>
 8002798:	f7fe ff8c 	bl	80016b4 <__errno>
 800279c:	2309      	movs	r3, #9
 800279e:	6003      	str	r3, [r0, #0]
 80027a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80027a4:	bd70      	pop	{r4, r5, r6, pc}
 80027a6:	6800      	ldr	r0, [r0, #0]
 80027a8:	462a      	mov	r2, r5
 80027aa:	4631      	mov	r1, r6
 80027ac:	f7ff ffdd 	bl	800276a <_swiread>
 80027b0:	1c43      	adds	r3, r0, #1
 80027b2:	bf1f      	itttt	ne
 80027b4:	6863      	ldrne	r3, [r4, #4]
 80027b6:	1a28      	subne	r0, r5, r0
 80027b8:	181b      	addne	r3, r3, r0
 80027ba:	6063      	strne	r3, [r4, #4]
 80027bc:	e7f2      	b.n	80027a4 <_read+0x1a>

080027be <_swilseek>:
 80027be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80027c0:	460c      	mov	r4, r1
 80027c2:	4616      	mov	r6, r2
 80027c4:	f7ff ffa4 	bl	8002710 <findslot>
 80027c8:	4605      	mov	r5, r0
 80027ca:	b940      	cbnz	r0, 80027de <_swilseek+0x20>
 80027cc:	f7fe ff72 	bl	80016b4 <__errno>
 80027d0:	2309      	movs	r3, #9
 80027d2:	6003      	str	r3, [r0, #0]
 80027d4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80027d8:	4620      	mov	r0, r4
 80027da:	b003      	add	sp, #12
 80027dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80027de:	2e02      	cmp	r6, #2
 80027e0:	d903      	bls.n	80027ea <_swilseek+0x2c>
 80027e2:	f7fe ff67 	bl	80016b4 <__errno>
 80027e6:	2316      	movs	r3, #22
 80027e8:	e7f3      	b.n	80027d2 <_swilseek+0x14>
 80027ea:	2e01      	cmp	r6, #1
 80027ec:	d112      	bne.n	8002814 <_swilseek+0x56>
 80027ee:	6843      	ldr	r3, [r0, #4]
 80027f0:	18e4      	adds	r4, r4, r3
 80027f2:	d4f6      	bmi.n	80027e2 <_swilseek+0x24>
 80027f4:	682b      	ldr	r3, [r5, #0]
 80027f6:	260a      	movs	r6, #10
 80027f8:	e9cd 3400 	strd	r3, r4, [sp]
 80027fc:	466f      	mov	r7, sp
 80027fe:	4630      	mov	r0, r6
 8002800:	4639      	mov	r1, r7
 8002802:	beab      	bkpt	0x00ab
 8002804:	4606      	mov	r6, r0
 8002806:	4630      	mov	r0, r6
 8002808:	f7ff ffaa 	bl	8002760 <checkerror>
 800280c:	2800      	cmp	r0, #0
 800280e:	dbe1      	blt.n	80027d4 <_swilseek+0x16>
 8002810:	606c      	str	r4, [r5, #4]
 8002812:	e7e1      	b.n	80027d8 <_swilseek+0x1a>
 8002814:	2e02      	cmp	r6, #2
 8002816:	d1ed      	bne.n	80027f4 <_swilseek+0x36>
 8002818:	6803      	ldr	r3, [r0, #0]
 800281a:	9300      	str	r3, [sp, #0]
 800281c:	260c      	movs	r6, #12
 800281e:	466f      	mov	r7, sp
 8002820:	4630      	mov	r0, r6
 8002822:	4639      	mov	r1, r7
 8002824:	beab      	bkpt	0x00ab
 8002826:	4606      	mov	r6, r0
 8002828:	4630      	mov	r0, r6
 800282a:	f7ff ff99 	bl	8002760 <checkerror>
 800282e:	1c43      	adds	r3, r0, #1
 8002830:	d0d0      	beq.n	80027d4 <_swilseek+0x16>
 8002832:	4404      	add	r4, r0
 8002834:	e7de      	b.n	80027f4 <_swilseek+0x36>

08002836 <_lseek>:
 8002836:	f7ff bfc2 	b.w	80027be <_swilseek>

0800283a <_swiwrite>:
 800283a:	b530      	push	{r4, r5, lr}
 800283c:	b085      	sub	sp, #20
 800283e:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8002842:	9203      	str	r2, [sp, #12]
 8002844:	2405      	movs	r4, #5
 8002846:	ad01      	add	r5, sp, #4
 8002848:	4620      	mov	r0, r4
 800284a:	4629      	mov	r1, r5
 800284c:	beab      	bkpt	0x00ab
 800284e:	4604      	mov	r4, r0
 8002850:	4620      	mov	r0, r4
 8002852:	f7ff ff85 	bl	8002760 <checkerror>
 8002856:	b005      	add	sp, #20
 8002858:	bd30      	pop	{r4, r5, pc}

0800285a <_write>:
 800285a:	b570      	push	{r4, r5, r6, lr}
 800285c:	460e      	mov	r6, r1
 800285e:	4615      	mov	r5, r2
 8002860:	f7ff ff56 	bl	8002710 <findslot>
 8002864:	4604      	mov	r4, r0
 8002866:	b930      	cbnz	r0, 8002876 <_write+0x1c>
 8002868:	f7fe ff24 	bl	80016b4 <__errno>
 800286c:	2309      	movs	r3, #9
 800286e:	6003      	str	r3, [r0, #0]
 8002870:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002874:	bd70      	pop	{r4, r5, r6, pc}
 8002876:	6800      	ldr	r0, [r0, #0]
 8002878:	462a      	mov	r2, r5
 800287a:	4631      	mov	r1, r6
 800287c:	f7ff ffdd 	bl	800283a <_swiwrite>
 8002880:	1e03      	subs	r3, r0, #0
 8002882:	dbf5      	blt.n	8002870 <_write+0x16>
 8002884:	6862      	ldr	r2, [r4, #4]
 8002886:	1ae8      	subs	r0, r5, r3
 8002888:	4402      	add	r2, r0
 800288a:	42ab      	cmp	r3, r5
 800288c:	6062      	str	r2, [r4, #4]
 800288e:	d1f1      	bne.n	8002874 <_write+0x1a>
 8002890:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8002894:	2000      	movs	r0, #0
 8002896:	f7ff bf55 	b.w	8002744 <error>

0800289a <_swiclose>:
 800289a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800289c:	2402      	movs	r4, #2
 800289e:	9001      	str	r0, [sp, #4]
 80028a0:	ad01      	add	r5, sp, #4
 80028a2:	4620      	mov	r0, r4
 80028a4:	4629      	mov	r1, r5
 80028a6:	beab      	bkpt	0x00ab
 80028a8:	4604      	mov	r4, r0
 80028aa:	4620      	mov	r0, r4
 80028ac:	f7ff ff58 	bl	8002760 <checkerror>
 80028b0:	b003      	add	sp, #12
 80028b2:	bd30      	pop	{r4, r5, pc}

080028b4 <_close>:
 80028b4:	b538      	push	{r3, r4, r5, lr}
 80028b6:	4605      	mov	r5, r0
 80028b8:	f7ff ff2a 	bl	8002710 <findslot>
 80028bc:	4604      	mov	r4, r0
 80028be:	b930      	cbnz	r0, 80028ce <_close+0x1a>
 80028c0:	f7fe fef8 	bl	80016b4 <__errno>
 80028c4:	2309      	movs	r3, #9
 80028c6:	6003      	str	r3, [r0, #0]
 80028c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80028cc:	bd38      	pop	{r3, r4, r5, pc}
 80028ce:	3d01      	subs	r5, #1
 80028d0:	2d01      	cmp	r5, #1
 80028d2:	d809      	bhi.n	80028e8 <_close+0x34>
 80028d4:	4b09      	ldr	r3, [pc, #36]	; (80028fc <_close+0x48>)
 80028d6:	689a      	ldr	r2, [r3, #8]
 80028d8:	691b      	ldr	r3, [r3, #16]
 80028da:	429a      	cmp	r2, r3
 80028dc:	d104      	bne.n	80028e8 <_close+0x34>
 80028de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80028e2:	6003      	str	r3, [r0, #0]
 80028e4:	2000      	movs	r0, #0
 80028e6:	e7f1      	b.n	80028cc <_close+0x18>
 80028e8:	6820      	ldr	r0, [r4, #0]
 80028ea:	f7ff ffd6 	bl	800289a <_swiclose>
 80028ee:	2800      	cmp	r0, #0
 80028f0:	d1ec      	bne.n	80028cc <_close+0x18>
 80028f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80028f6:	6023      	str	r3, [r4, #0]
 80028f8:	e7e8      	b.n	80028cc <_close+0x18>
 80028fa:	bf00      	nop
 80028fc:	200000cc 	.word	0x200000cc

08002900 <_swistat>:
 8002900:	b570      	push	{r4, r5, r6, lr}
 8002902:	460c      	mov	r4, r1
 8002904:	f7ff ff04 	bl	8002710 <findslot>
 8002908:	4605      	mov	r5, r0
 800290a:	b930      	cbnz	r0, 800291a <_swistat+0x1a>
 800290c:	f7fe fed2 	bl	80016b4 <__errno>
 8002910:	2309      	movs	r3, #9
 8002912:	6003      	str	r3, [r0, #0]
 8002914:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002918:	bd70      	pop	{r4, r5, r6, pc}
 800291a:	6863      	ldr	r3, [r4, #4]
 800291c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002920:	6063      	str	r3, [r4, #4]
 8002922:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002926:	64a3      	str	r3, [r4, #72]	; 0x48
 8002928:	260c      	movs	r6, #12
 800292a:	4630      	mov	r0, r6
 800292c:	4629      	mov	r1, r5
 800292e:	beab      	bkpt	0x00ab
 8002930:	4605      	mov	r5, r0
 8002932:	4628      	mov	r0, r5
 8002934:	f7ff ff14 	bl	8002760 <checkerror>
 8002938:	1c43      	adds	r3, r0, #1
 800293a:	bf1c      	itt	ne
 800293c:	6120      	strne	r0, [r4, #16]
 800293e:	2000      	movne	r0, #0
 8002940:	e7ea      	b.n	8002918 <_swistat+0x18>

08002942 <_fstat>:
 8002942:	460b      	mov	r3, r1
 8002944:	b510      	push	{r4, lr}
 8002946:	2100      	movs	r1, #0
 8002948:	4604      	mov	r4, r0
 800294a:	2258      	movs	r2, #88	; 0x58
 800294c:	4618      	mov	r0, r3
 800294e:	f7fe fedb 	bl	8001708 <memset>
 8002952:	4601      	mov	r1, r0
 8002954:	4620      	mov	r0, r4
 8002956:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800295a:	f7ff bfd1 	b.w	8002900 <_swistat>

0800295e <_isatty>:
 800295e:	b570      	push	{r4, r5, r6, lr}
 8002960:	f7ff fed6 	bl	8002710 <findslot>
 8002964:	2509      	movs	r5, #9
 8002966:	4604      	mov	r4, r0
 8002968:	b920      	cbnz	r0, 8002974 <_isatty+0x16>
 800296a:	f7fe fea3 	bl	80016b4 <__errno>
 800296e:	6005      	str	r5, [r0, #0]
 8002970:	4620      	mov	r0, r4
 8002972:	bd70      	pop	{r4, r5, r6, pc}
 8002974:	4628      	mov	r0, r5
 8002976:	4621      	mov	r1, r4
 8002978:	beab      	bkpt	0x00ab
 800297a:	4604      	mov	r4, r0
 800297c:	2c01      	cmp	r4, #1
 800297e:	d0f7      	beq.n	8002970 <_isatty+0x12>
 8002980:	f7fe fe98 	bl	80016b4 <__errno>
 8002984:	2400      	movs	r4, #0
 8002986:	4605      	mov	r5, r0
 8002988:	2613      	movs	r6, #19
 800298a:	4630      	mov	r0, r6
 800298c:	4621      	mov	r1, r4
 800298e:	beab      	bkpt	0x00ab
 8002990:	4606      	mov	r6, r0
 8002992:	602e      	str	r6, [r5, #0]
 8002994:	e7ec      	b.n	8002970 <_isatty+0x12>
	...

08002998 <_init>:
 8002998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800299a:	bf00      	nop
 800299c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800299e:	bc08      	pop	{r3}
 80029a0:	469e      	mov	lr, r3
 80029a2:	4770      	bx	lr

080029a4 <_fini>:
 80029a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029a6:	bf00      	nop
 80029a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029aa:	bc08      	pop	{r3}
 80029ac:	469e      	mov	lr, r3
 80029ae:	4770      	bx	lr
