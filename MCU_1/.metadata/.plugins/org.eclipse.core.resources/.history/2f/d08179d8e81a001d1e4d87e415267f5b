/*
 * stm32f303re_gpio_driver.c
 *
 *  Created on: Jul 27, 2022
 *      Author: alie
 */

#include <stm32f303re_gpio_driver.h>
#include <stdint.h>

/*
 * @fn			-GPIO_PeriClockcontrol
 *
 * @breif		-This function enable or disable peripheral clock for the give Gpio port
 *
 * @param[in]	-Base address of the Gpio peripheral
 * @param[in]	-Enable or Disable Macro
 * @param[in]	-
 *
 * @return		-None
 *
 * @Note		-None
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx , uint8_t EnorDi)
{
	if (EnorDi == Enable)
	{
		if (pGPIOx == GPIOA)
		{
			GPIOA_PCLK_EN();
		}
		else if (pGPIOx == GPIOB)
		{
			GPIOB_PCLK_EN();
		}
		else if (pGPIOx == GPIOC)
		{
			GPIOC_PCLK_EN();
		}
		else if (pGPIOx == GPIOD)
		{
			GPIOD_PCLK_EN();
		}
		else if (pGPIOx == GPIOE)
		{
			GPIOE_PCLK_EN();
		}
		else if (pGPIOx == GPIOF)
		{
			GPIOF_PCLK_EN();
		}
	}
	else if (EnorDi == Disable)
	{
		if (pGPIOx == GPIOA)
			{
				GPIOA_PCLK_DI();
			}
		else if (pGPIOx == GPIOB)
			{
				GPIOB_PCLK_DI();
			}
		else if (pGPIOx == GPIOC)
			{
				GPIOC_PCLK_DI();
			}
		else if (pGPIOx == GPIOD)
			{
				GPIOD_PCLK_DI();
			}
		else if (pGPIOx == GPIOE)
			{
				GPIOE_PCLK_DI();
			}
		else if (pGPIOx == GPIOF)
			{
				GPIOF_PCLK_DI();
			}
	}
}
/*
 * @fn			-GPIO_Init
 *
 * @breif		-This function used to intialize the gpio prot
 *
 * @param[in]	-Pointer to GPIO_handle
 *
 *
 * @return		-None
 *
 * @Note		-None
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
	// configure the mode of the pin
	uint32_t temp = 0;
	//check interrupt or non interrupt
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode<=GPIO_MODE_ANALOG)
	{
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
		pGPIOHandle->pGPIOx->MODER |= temp;
		temp = 0;
	}

	// configure the speed
	temp = 0;
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSPeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;

	// configure the pupd setting
	temp = 0;
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
	pGPIOHandle->pGPIOx->PUPDR |= temp;
	// configure the output type
	temp = 0;
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOpType << (1 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
	pGPIOHandle->pGPIOx->OTYPER |= temp;

	// configure the Alt_mode_function
	uint8_t temp1 ,temp2 ;
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
	{
		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (temp2 * 4));
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (temp2 * 4));

	}
	else{
		if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
		{
			//1. Configure Falling trigger selection register FTSR
			EXTI->FTSR |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
			// to guarntee that raising trigger selection register RTSR
			EXTI->RTSR &= ~(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
		}
	else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
	{
		//2. configure Raising trigger selection register RTSR
		//1. Configure Falling trigger selection register FTSR
		EXTI->RTSR |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
		// to guarntee that raising trigger selection register RTSR
		EXTI->FTSR &= ~(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
	}
	else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
	{
		//3. configure Both FTSR & RTSR
		EXTI->RTSR |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
		EXTI->FTSR |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
	}
		// 2. configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp_1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
		uint8_t temp_2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
		uint8_t port_code = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
		SYSCFG_PCLK_EN();
		SYSCFG->EXTICR[temp_1] = port_code << (temp_2 * 4);


		// 3. Enable The EXTI Interrupt delivery
		EXTI->IMR |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);

	}

}
/*
 * @fn			-GPIO_Init
 *
 * @breif		-This function used to Dintialize the gpio prot
 *
 * @param[in]	-Base Address of GPIOx
 *
 *
 * @return		-None
 *
 * @Note		-None
 */

void GPIO_DeInit(GPIO_RegDef_t *pGPIOx)
{
	if (pGPIOx == GPIOA)
			{
				GPIOA_REG_RESET();
			}
			else if (pGPIOx == GPIOB)
			{
				GPIOB_REG_RESET();
			}
			else if (pGPIOx == GPIOC)
			{
				GPIOC_REG_RESET();
			}
			else if (pGPIOx == GPIOD)
			{
				GPIOD_REG_RESET();
			}
			else if (pGPIOx == GPIOE)
			{
				GPIOE_REG_RESET();
			}
			else if (pGPIOx == GPIOF)
			{
				GPIOF_REG_RESET();
			}
}
/*
 * @fn			-GPIO_ReadFROMInpuPIN
 *
 * @brief		-This function used to read from Input pin
 *
 * @param[in]	-Base Address of GPIOx
 * @param[in]	-PinNumber
 *
 *
 * @return		-Content of input data
 *
 * @Note		-None
 */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
	uint8_t value;
	value = (uint8_t)((pGPIOx->IDR >>PinNumber)&(0x00000001));
	return value;
}
/*
 * @fn			-GPIO_ReadFromInputPort
 *
 * @breif		-This function used to read from gpio prot
 *
 * @param[in]	-Base Address of GPIOx
 *
 *
 *
 * @return		-Content of Port
 *
 * @Note		-None
 */
uint16_t GPIO_ReadFromInputPort(GPIO_RegDef_t *pGPIOx)
{
	uint16_t value ;
	value = (uint16_t)pGPIOx->IDR;
	return value;
}
/*
 * @fn			-GPIO_WritetooutputPin
 *
 * @breif		-This function used to Write to output pin
 *
 * @param[in]	-Base Address
 * @param[in]	-PinNumber
 * @param[in]	-The value that you want to write it
 *
 *
 * @return		-None
 *
 * @Note		-None
 */
void GPIO_WriteToOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber,uint8_t value)
{
	if(value == GPIO_PIN_SET)
	{
		pGPIOx->ODR |= (1>>PinNumber);
	}
	else
	{
		pGPIOx->ODR |= (0>>PinNumber);

	}
}
/*
 * @fn			-GPIO_WritetooutputPort
 *
 * @breif		-This function used to Write to output port
 *
 * @param[in]	-Base Address of gpiox
 * @param[in]	-The value that you want to write it
 *
 *
 * @return		-None
 *
 * @Note		-None
 */
void GPIO_WriteToOutputPort(GPIO_RegDef_t *pGPIOx,uint16_t value)
{
		pGPIOx->ODR = value;
}
/*
 * @fn			- GPIO_ToggleOutputPin
 *
 * @brief		- This function toggles specific output pin
 *
 * @param[in]		- Base address of the GPIO peripheral
 * @param[in]		- Pin number
 *
 * @return		- None
 *
 * @Note		- None
 *
 */
void GPIO_ToggleOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
	pGPIOx->ODR ^= (1<<PinNumber);
}
/*
 * IRQ Configuration and ISR handling
 */
/*****************************************************************
 * @fn			- GPIO_IRQConfig
 *
 * @brief		- This function configures interrupt
 *
 * @param[in]		- IRQ Interrupt number
 * @param[in]		- Macro: Enable/Disable
 *
 * @return		- None
 *
 * @Note		- None
 */
void GPIO_IRQInterruptConfig(uint8_t IRQNumber,uint8_t EnorDi)
{
	if (EnorDi == Enable)
	{
		if (IRQNumber <= 31)
		{
			// program ISER0 Register
			*NVIC_ISER0 |= (1 << IRQNumber);
		}
		else if (IRQNumber > 31 && IRQNumber < 64)
		{
			// program ISER1 Register
			*NVIC_ISER1 |= (1 << IRQNumber % 32 );
		}
		else if (IRQNumber >= 64 && IRQNumber < 96)
		{
			// program ISER2 Register
			*NVIC_ISER2 |= (1 << IRQNumber % 64);
		}

	}
	else
	{
		if (IRQNumber <= 31)
		{
			*NVIC_ICER0 |= (1 << IRQNumber);
		}
		else if (IRQNumber > 31 && IRQNumber < 64)
		{
			*NVIC_ICER0 |= (1 << IRQNumber % 32);
		}
		else if (IRQNumber >= 64 && IRQNumber < 96)
		{
			*NVIC_ICER0 |= (1 << IRQNumber % 64);
		}

	}

}
/*****************************************************************
 * @fn			- GPIO _ interrupt request periort configuration
 *
 * @brief		-
 *
 * @param[in]		- Pin number
 *
 * @return		- None
 *
 * @Note		- None
 *
 *****************************************************************/
void GPIO_IRQPriortyConfig(uint8_t IRQNumber,uint8_t IRQPeriorty)
{
	uint8_t irpx = IRQNumber / 4;
	uint8_t irpx_section = IRQNumber % 4;
	shift_number = (8 * irpx_section) + (8 - NO_PR_BITS_IMPLEMENTED);
	*(NVIC_PR_BASE_ADDR + (irpx)*4 ) |= ( IRQPeriorty << shift_number);
}

/*****************************************************************
 * @fn			- GPIO_IRQHandling
 *
 * @brief		- This function handle interrupts
 *
 * @param[in]		- Pin number
 *
 * @return		- None
 *
 * @Note		- None
 *
 *****************************************************************/
void GPIO_IRQHandling(uint8_t PinNumber)
{
	// clear the exti pr register corresponding to the pin number
	if (EXTI->PR & (1 << PinNumber))
	{
		// clear
		EXTI->PR & (1 << PinNumber)
	}
}


