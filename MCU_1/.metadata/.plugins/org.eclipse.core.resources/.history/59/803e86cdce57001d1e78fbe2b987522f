/*
 * ds1307.c
 *
 *  Created on: Oct 28, 2022
 *      Author: alie
 */
#include "ds1307.h"
#include <stdint.h>
#include <string.h>

static void ds1307_i2c_pin_config();
static void ds1307_i2c_config();
static void ds1307_write(uint8_t value, uint8_t reg_address);
static uint8_t ds1307_read(uint8_t reg_address);
static uint8_t binarytobcd(uint8_t value);
static uint8_t bcd_to_binary(uint8_t value);



I2C_Handle_t g_ds1307I2CHandle;
static void ds1307_i2c_pin_config()
{
	GPIO_Handle_t i2c_sda,i2c_scl;

	memset(&i2c_sda,0,sizeof(i2c_sda));
	memset(&i2c_scl,0,sizeof(i2c_scl));

	i2c_sda.pGPIOx = DS1307_GPIO_PORT;
	i2c_sda.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
	i2c_sda.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
	i2c_sda.GPIO_PinConfig.GPIO_PinNumber = DS1307_I2C_SDA_PIN;
	i2c_sda.GPIO_PinConfig.GPIO_PuPdControl = DS1307_I2C_SCL_PUPD;
	i2c_sda.GPIO_PinConfig.GPIO_PinSPeed = GPIO_SPEED_HIGH;
	i2c_sda.GPIO_PinConfig.GPIO_PinOpType = GPIO_OP_TYPE_OD;
	GPIO_Init(&i2c_sda);

	i2c_scl.pGPIOx = DS1307_GPIO_PORT;
	i2c_scl.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
	i2c_scl.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
	i2c_scl.GPIO_PinConfig.GPIO_PinNumber = DS1307_I2C_SCL_PIN;
	i2c_scl.GPIO_PinConfig.GPIO_PuPdControl = DS1307_I2C_SCL_PUPD;
	i2c_scl.GPIO_PinConfig.GPIO_PinSPeed = GPIO_SPEED_HIGH;
	i2c_scl.GPIO_PinConfig.GPIO_PinOpType = GPIO_OP_TYPE_OD;
	GPIO_Init(&i2c_scl);

}

static void ds1307_i2c_config()
{
	g_ds1307I2CHandle.pI2Cx = DS1307_I2C;
	g_ds1307I2CHandle.I2C_Config.I2C_DeviceAddress = DS1307_I2C_ADDRESS;
	g_ds1307I2CHandle.I2C_Config.I2C_SCLSpeed = DS1307_I2C_SCL_SPEED;
	I2C_Init(&g_ds1307I2CHandle);
}
uint8_t ds1307_init(void)
{
	ds1307_i2c_pin_config();

	ds1307_i2c_config();

	I2C_PeripheralControl(DS1307_I2C,Enable);

	ds1307_write(0x00,DS1307_ADD_SEC);

	uint8_t clock_state = ds1307_read(DS1307_ADD_SEC);


	return (clock_state >>7 & 0x01);
}
void ds1307_set_current_time(RTC_time_t *rtc_time)
{
	uint8_t seconds , hrs;
	seconds = binarytobcd(rtc_time->seconds);
	seconds &~(1<<7);
	ds1307_write(seconds,DS1307_ADD_SEC);
	ds1307_write(binarytobcd(rtc_time->minutes),DS1307_ADD_MIN);

	hrs = binarytobcd(rtc_time->hours);
	if (rtc_time->time_format == TIME_FORMAT_24HRS)
	{
		hrs &= ~(1<<6);
	}
	else
	{
		hrs |= (1<<6);
		hrs = (rtc_time->time_format == TIME_FORMAT_12HRS_PM? hrs |(1<<5): hrs &~(1<<5));
	}
	ds1307_write(hrs,DS1307_ADD_HRS);
}
void ds1307_get_current_time(RTC_time_t *rtc_time)
{
	uint8_t seconds,hrs;
	seconds = ds1307_read(DS1307_ADD_SEC);

	seconds &= ~(1<<7);

	rtc_time->seconds = bcd_to_binary(seconds);
	rtc_time->minutes = bcd_to_binary(ds1307_read(DS1307_ADD_MIN));

	hrs = ds1307_read(DS1307_ADD_HRS);

	if (hrs & (1<<6))
	{
		if (hrs & (1 <<5))
		{
			rtc_time->time_format == TIME_FORMAT_12HRS_PM;

		}
		else
		{
			rtc_time->time_format == TIME_FORMAT_12HRS_AM;

		}
	}
	else
	{
		rtc_time->time_format == TIME_FORMAT_24HRS;
	}

}

void ds1307_set_current_date(RTC_date_t *rtc_date)
{
	ds1307_write(binarytobcd(rtc_date->day),DS1307_ADD_DAY);
	ds1307_write(binarytobcd(rtc_date->month),DS1307_ADD_MONTH);
	ds1307_write(binarytobcd(rtc_date->year),DS1307_ADD_YEAR);
	ds1307_write(binarytobcd(rtc_date->date),DS1307_ADD_YEAR);
}
void ds1307_get_current_date(RTC_date_t *rtc_date)
{
	rtc_date->date = bcd_to_binary(ds1307_read(DS1307_ADD_DATE));
	rtc_date->day = bcd_to_binary(ds1307_read(DS1307_ADD_DAY));
	rtc_date->month = bcd_to_binary(ds1307_read(DS1307_ADD_MONTH));
	rtc_date->year = bcd_to_binary(ds1307_read(DS1307_ADD_YEAR));
}
static void ds1307_write(uint8_t value, uint8_t reg_address)
{
	uint8_t tx[2];
	tx[0] = reg_address;
	tx[1] = value;

	I2C_MasterSendData(&g_ds1307I2CHandle, tx, 2, DS1307_I2C_ADDRESS, 0);
}
static uint8_t ds1307_read(uint8_t reg_address)
{
	uint8_t data;
	uint8_t tx[2];
	tx[0] = reg_address;
	tx[1] = 0x00;
    I2C_MasterSendData(&g_ds1307I2CHandle, tx, 2, DS1307_I2C_ADDRESS, 0);
    I2C_MasterRecieveData(&g_ds1307I2CHandle, &data, 1, DS1307_I2C_ADDRESS, 0);

    return data;
}
static uint8_t binarytobcd(uint8_t value)
{
	uint8_t n , m ,bcd ;
	if (value >=10)
	{
		m = value /10;
		n = value %10;
		bcd = (uint8_t)((m << 4) | n);
	}
	else
	{
		bcd = value;
	}
	return bcd;
}
static uint8_t bcd_to_binary(uint8_t value)
{
	uint8_t m , n ,binary;
	m = (uint8_t)((value >>4)*10);
	n = (value &0x0F);
	binary = m + n;

	return binary;
}
